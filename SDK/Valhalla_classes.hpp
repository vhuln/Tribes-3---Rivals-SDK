#pragma once




namespace SDK
{
//---------------------------------------------------------------------------------------------------------------------
// CLASSES
//---------------------------------------------------------------------------------------------------------------------

// 0x70 (0x308 - 0x298)
// Class Valhalla.ValAudioThreatTestActor
class AValAudioThreatTestActor : public AActor
{
public:
	class UStaticMeshComponent*                  MeshComp;                                          // 0x298(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UValProxyAudioThreatComponent*         ThreatComp;                                        // 0x2A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextRenderComponent*                  TextComp;                                          // 0x2A8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECollisionChannel                 ObjectTraceType;                                   // 0x2B0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1CB[0x7];                                      // Fixing Size After Last Property  
	TArray<struct CoreUObject_Color>             BucketColors;                                      // 0x2B8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterial>              RenderMaterial;                                    // 0x2C8(0x28)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        VATTAID;                                           // 0x2F0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Damage;                                            // 0x2F4(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShooting;                                         // 0x2F8(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCybrid;                                           // 0x2F9(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1CC[0x6];                                      // Fixing Size After Last Property  
	class UMaterialInstanceDynamic*              RenderMaterialInstance;                            // 0x300(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValAudioThreatTestActor* GetDefaultObj();

	void AudioSend(const class FString& Input);
};

// 0x28 (0x58 - 0x30)
// Class Valhalla.AsyncAction_GetLeaderboard
class UAsyncAction_GetLeaderboard : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_            Completed;                                         // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_1D1[0x18];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UAsyncAction_GetLeaderboard* GetDefaultObj();

	class UAsyncAction_GetLeaderboard* GetLeaderboard(class UObject* WorldContextObject, const class FString& LeaderboardName);
};

// 0x60 (0x90 - 0x30)
// Class Valhalla.AsyncTaskAttributeChanged
class UAsyncTaskAttributeChanged : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_            OnAttributeChanged;                                // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*               ASC;                                               // 0x40(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1EF[0x48];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UAsyncTaskAttributeChanged* GetDefaultObj();

	class UAsyncTaskAttributeChanged* ListenForAttributesChange(class UAbilitySystemComponent* AbilitySystemComponent, const TArray<struct GameplayAbilities_GameplayAttribute>& Attributes);
	class UAsyncTaskAttributeChanged* ListenForAttributeChange(class UAbilitySystemComponent* AbilitySystemComponent, const struct GameplayAbilities_GameplayAttribute& Attribute);
	void EndTask();
};

// 0x18 (0x48 - 0x30)
// Class Valhalla.AsyncTaskLocalPlayerRep
class UAsyncTaskLocalPlayerRep : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_            OnLocalPlayerRep;                                  // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UValGameInstance*                      CachedValGameInstance;                             // 0x40(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UAsyncTaskLocalPlayerRep* GetDefaultObj();

	void LocalPlayerRep();
	class UAsyncTaskLocalPlayerRep* ListenForLocalPlayerRep(class UValGameInstance* ValGameInstance);
	void EndTask();
};

// 0x20 (0x50 - 0x30)
// Class Valhalla.AsyncTaskPlayerStateRep
class UAsyncTaskPlayerStateRep : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_            OnPlayerStateRep;                                  // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AValPlayerController*                  CachedPC;                                          // 0x40(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValCharacter*                         CachedCharacter;                                   // 0x48(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UAsyncTaskPlayerStateRep* GetDefaultObj();

	void PlayerStateRep(class AValPlayerStateBase* PlayerState);
	class UAsyncTaskPlayerStateRep* ListenForPCPlayerStateRep(class AValPlayerController* ValPC);
	class UAsyncTaskPlayerStateRep* ListenForCharacterPlayerStateRep(class AValCharacter* ValCharacter);
	void EndTask();
};

// 0x0 (0x550 - 0x550)
// Class Valhalla.HUDContainerWidget
class UHUDContainerWidget : public URHWidget
{
public:

	static class UClass* StaticClass();
	static class UHUDContainerWidget* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class Valhalla.RemainingAmmoVFX
class URemainingAmmoVFX : public UObject
{
public:
	uint8                                        Pad_22F[0x18];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class URemainingAmmoVFX* GetDefaultObj();

	void SetCharRef(class AValCharacter* CharacterReference);
	void OnReload(const struct GameplayTags_GameplayTag& InTag, int32 NewCount);
	void OnClipAmmoChanged(float OldValue, float NewValue);
};

// 0x0 (0x380 - 0x380)
// Class Valhalla.RHInstanceDefaultGameMode
class ARHInstanceDefaultGameMode : public AGameMode
{
public:

	static class UClass* StaticClass();
	static class ARHInstanceDefaultGameMode* GetDefaultObj();

};

// 0x8 (0x498 - 0x490)
// Class Valhalla.RHTestClientConnectGameMode
class ARHTestClientConnectGameMode : public ARHGameModeBase
{
public:
	uint8                                        Pad_237[0x8];                                      // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class ARHTestClientConnectGameMode* GetDefaultObj();

};

// 0x248 (0x600 - 0x3B8)
// Class Valhalla.ValGameplayAbility
class UValGameplayAbility : public UGameplayAbility
{
public:
	class UValAbilityAudioVisual*                AbilityAV;                                         // 0x3B8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UValAbilitySystemComponent> OwningASC;                                         // 0x3C0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct GameplayAbilities_ScalableFloat> CooldownDuration;                                  // 0x3C8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                        CooldownModifierFlat;                              // 0x3D8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CooldownModifierPercentage;                        // 0x3DC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        CooldownDurationIndex;                             // 0x3E0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_A1B[0x4];                                      // Fixing Size After Last Property  
	struct GameplayTags_GameplayTagContainer     CooldownTags;                                      // 0x3E8(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                         bOverrideCooldownTag;                              // 0x408(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_A2B[0x7];                                      // Fixing Size After Last Property  
	struct GameplayTags_GameplayTagContainer     TempCooldownTags;                                  // 0x410(0x20)(Protected, NativeAccessSpecifierProtected)
	class UValAT_CooldownChanged*                SecondaryCooldownTask;                             // 0x430(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnAbilityHeldDelegate;                             // 0x438(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct GameplayTags_GameplayTag              CooldownSetByCallerTag;                            // 0x448(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EValAbilityInputID                AbilityInputID;                                    // 0x450(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EValAbilityInputID                AbilityID;                                         // 0x451(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bActivateAbilityOnGranted;                         // 0x452(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bActivateOnInput;                                  // 0x453(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCannotActivateWhileInteracting;                   // 0x454(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCannotActivateWhileDowned;                        // 0x455(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIgnoreSwappableAbilities;                         // 0x456(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCannotActivateWhileThirdPerson;                   // 0x457(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UValGameplayAbility>> SubAbilities;                                      // 0x458(0x10)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<enum class EValAbilityInputID, TSubclassOf<class UValGameplayAbility>> InputedSubAbilities;                               // 0x468(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<enum class EValAbilityInputID, struct GameplayAbilities_GameplayAbilitySpecHandle> InputedSubAbilitySpecHandles;                      // 0x4B8(0x50)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct GameplayAbilities_GameplayAbilitySpecHandle> SubAbilitySpecHandles;                             // 0x508(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct GameplayTags_GameplayTag              EquipStatsTag;                                     // 0x518(0x8)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct GameplayAbilities_ActiveGameplayEffectHandle> EquipStatEffects;                                  // 0x520(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	float                                        DrawTime;                                          // 0x530(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        HolsterTime;                                       // 0x534(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct GameplayTags_GameplayTag, struct Valhalla_ValGameplayEffectContainer> EffectContainerMap;                                // 0x538(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                        StartingMaxCharges;                                // 0x588(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsConsumable;                                     // 0x58C(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_A75[0x3];                                      // Fixing Size After Last Property  
	int32                                        CurrentCharges;                                    // 0x590(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_A79[0x4];                                      // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnChargeChange;                                    // 0x598(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_A7E[0x10];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_AbilityMeshMontage>   CurrentAbilityMeshMontages;                        // 0x5B8(0x10)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              AssetIDTag;                                        // 0x5C8(0x8)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCalcAbilityPropertyModsOnActivation;              // 0x5D0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EAbilityEventType                 AbilityEventType;                                  // 0x5D1(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_A87[0x2E];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValGameplayAbility* GetDefaultObj();

	void ValInputPressed(const struct GameplayAbilities_GameplayAbilitySpecHandle& Handle, struct GameplayAbilities_GameplayAbilityActorInfo& ActorInfo, const struct GameplayAbilities_GameplayAbilityActivationInfo& ActivationInfo);
	bool ValCheckCost(const struct GameplayAbilities_GameplayAbilitySpecHandle& Handle, struct GameplayAbilities_GameplayAbilityActorInfo& ActorInfo);
	void ValApplyCost(const struct GameplayAbilities_GameplayAbilitySpecHandle& Handle, struct GameplayAbilities_GameplayAbilityActorInfo& ActorInfo, const struct GameplayAbilities_GameplayAbilityActivationInfo& ActivationInfo);
	void ValActivationFailed(const struct GameplayAbilities_GameplayAbilitySpecHandle& Handle, struct GameplayTags_GameplayTagContainer& FailureReason);
	bool UsesCharges();
	bool TryInputLocal(enum class EValAbilityInputID InputID);
	bool TryInput(enum class EValAbilityInputID InputID);
	void SetFullCharge();
	void SetCurrentChargeNoReplication(int32 Value);
	void SetCurrentCharge(int32 Value);
	void SetCooldownAbility(TSubclassOf<class UGameplayEffect> NewCooldown);
	void SendTargetDataToServer(struct GameplayAbilities_GameplayAbilityTargetDataHandle& TargetData);
	void RemoveCharge();
	void OnSecondaryCooldownEnd(const struct GameplayTags_GameplayTag& CooldownTag, float TimeRemaining, float Duration);
	void OnAbilityLevelUpdated(int32 NewLevel);
	void MontageStopForMesh(class USkeletalMeshComponent* InMesh, float OverrideBlendOutTime);
	void MontageStopForAllMeshes(float OverrideBlendOutTime);
	void MontageSetNextSectionNameForMesh(class USkeletalMeshComponent* InMesh, class FName FromSectionName, class FName ToSectionName);
	void MontageJumpToSectionForMesh(class USkeletalMeshComponent* InMesh, class FName SectionName);
	struct GameplayAbilities_GameplayAbilityTargetDataHandle MakeGameplayAbilityTargetDataHandleFromHitResults(const TArray<struct Engine_HitResult>& HitResults);
	struct GameplayAbilities_GameplayAbilityTargetDataHandle MakeGameplayAbilityTargetDataHandleFromActorArray(const TArray<class AActor*>& TargetActors);
	struct Valhalla_ValGameplayEffectContainerSpec MakeEffectContainerSpecFromContainer(struct Valhalla_ValGameplayEffectContainer& Container, struct GameplayAbilities_GameplayEventData& EventData, int32 OverrideGameplayLevel);
	struct Valhalla_ValGameplayEffectContainerSpec MakeEffectContainerSpec(const struct GameplayTags_GameplayTag& ContainerTag, struct GameplayAbilities_GameplayEventData& EventData, int32 OverrideGameplayLevel);
	class UObject* K2_GetSourceObject(const struct GameplayAbilities_GameplayAbilitySpecHandle& Handle, struct GameplayAbilities_GameplayAbilityActorInfo& ActorInfo);
	TArray<struct GameplayAbilities_ActiveGameplayEffectHandle> K2_ApplyGameplayEffectSpecsToTarget(TArray<struct GameplayAbilities_GameplayEffectSpecHandle>& EffectSpecHandles, const struct GameplayAbilities_GameplayAbilityTargetDataHandle& TargetData);
	bool IsPredictionKeyValidForMorePrediction();
	bool IsOnSecondaryCooldown();
	bool IsInputPressed();
	bool IsHitscan();
	bool IsAbilityActive();
	bool HasCharge();
	void GetWeaponType(struct GameplayTags_GameplayTag& OutWeaponType);
	float GetTimeSinceDate(const struct CoreUObject_DateTime& PreviousTime);
	class UGameplayAbility* GetSubAbilityFromInputID(enum class EValAbilityInputID InputID);
	class UGameplayAbility* GetSubAbilityFromClass(TSubclassOf<class UGameplayAbility> AbilityClass);
	bool GetSlotSecondaryCooldownTag(struct GameplayTags_GameplayTag* OutGameplayTag);
	bool GetSlotCooldownTags(struct GameplayTags_GameplayTagContainer* OutGameplayTags);
	float GetSecondaryCooldownTimeRemaining();
	class UValAbilitySystemComponent* GetOwningASC();
	int32 GetMaxCharges();
	float GetHolsterTime();
	float GetDrawTime();
	void GetDamageType(struct GameplayTags_GameplayTag& OutDamageType);
	class FString GetCurrentPredictionKeyStatus();
	class UAnimMontage* GetCurrentMontageForMesh(class USkeletalMeshComponent* InMesh);
	int32 GetCurrentCharges();
	float GetCooldownDuration();
	struct GameplayTags_GameplayTagContainer GetAbilityTags();
	void GetAbilityPropertyModValues(const struct GameplayTags_GameplayTag& PropertyTag, TArray<float>* OutValues);
	class UValAbilityAudioVisual* GetAbilityAudioVisual();
	void EventOnAbilityRemoved(struct GameplayAbilities_GameplayAbilityActorInfo& ActorInfo, struct GameplayAbilities_GameplayAbilitySpec& Spec);
	void EventOnAbilityPendingRemoved();
	void EventOnAbilityGiven(struct GameplayAbilities_GameplayAbilityActorInfo& ActorInfo, struct GameplayAbilities_GameplayAbilitySpec& Spec);
	void EndSecondaryCooldown();
	void EndCooldown();
	void CalcAbilityPropertyModifiers();
	void BeginPlay();
	bool BatchRPCTryActivateAbility(const struct GameplayAbilities_GameplayAbilitySpecHandle& InAbilityHandle, bool EndAbilityImmediately);
	void ApplySwapTimeModifier(float& OutPercentModifier, float& OutFlatModifier, struct GameplayTags_GameplayTag& SwappedFromSlot, struct GameplayTags_GameplayTag& SwappedToSlot);
	void ApplySecondaryCooldown(float Amount);
	void ApplyLimbResistanceModifier(float& OutLimbDamageModifier, float Damage, struct GameplayAbilities_GameplayEffectContextHandle& DamageContext);
	void ApplyHealthResistanceModifier(float& OutPercentModifier, float& OutFlatModifier, float Damage, struct GameplayAbilities_GameplayEffectContextHandle& DamageContext);
	TArray<struct GameplayAbilities_ActiveGameplayEffectHandle> ApplyEffectContainerSpecToTarget(struct Valhalla_ValGameplayEffectContainerSpec& ContainerSpec, struct GameplayAbilities_GameplayAbilityTargetDataHandle& TargetData);
	void ApplyDamageResistanceModifier(float& OutPercentModifier, float& OutFlatModifier, float& OutShieldModifier, float Damage, struct GameplayAbilities_GameplayEffectContextHandle& DamageContext);
	void ApplyDamageOutputModifier(float& OutPercentModifier, float& OutFlatModifier, float Damage, struct GameplayAbilities_GameplayEffectContextHandle& DamageContext);
	void ApplyCooldownWithFlatAmount(float Amount);
	void ApplyCooldown();
	void AddMaxCharge(int32 Value);
	void AddCharge();
	void AddAbilityCooldownPercentageModifier(float Value);
	void AddAbilityCooldownFlatModifier(float Value);
};

// 0x50 (0x650 - 0x600)
// Class Valhalla.ValDevice
class UValDevice : public UValGameplayAbility
{
public:
	uint8                                        Pad_B52[0x8];                                      // Fixing Size After Last Property  
	bool                                         bCanActivateWhileUnderwater;                       // 0x608(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_B55[0x7];                                      // Fixing Size After Last Property  
	class UValDeviceAudioVisual*                 AudioVisual;                                       // 0x610(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValDeployableAudioVisual*             DeployableAudioVisual;                             // 0x618(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCanActivateWhileSprinting;                        // 0x620(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bInterruptsSprintingOnActivation;                  // 0x621(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_B6A[0x2];                                      // Fixing Size After Last Property  
	float                                        InterruptSprintingDelay;                           // 0x624(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCanActivateWhileStealthed;                        // 0x628(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bInterruptsStealthOnActivation;                    // 0x629(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_B72[0x2];                                      // Fixing Size After Last Property  
	float                                        InterruptSteathDelay;                              // 0x62C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AActor>                    ActorToSpawnOnActivation;                          // 0x630(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ValidationDistanceLeeway;                          // 0x638(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUsePredictiveAiming;                              // 0x63C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_B7F[0x3];                                      // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnDeviceUnheldDel;                                 // 0x640(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValDevice* GetDefaultObj();

	bool ShouldUsePredictiveAiming();
	class UValDeployableAudioVisual* GetDeployableAudioVisual();
	class UValDeviceAudioVisual* GetAudioVisual();
	TSubclassOf<class AActor> GetActorToSpawnOnActivation();
	double CalculateActivationDelta(float TimeBetweenActivations, double LastActivation);
};

// 0x0 (0x650 - 0x650)
// Class Valhalla.RubyWeapon
class URubyWeapon : public UValDevice
{
public:

	static class UClass* StaticClass();
	static class URubyWeapon* GetDefaultObj();

};

// 0x30 (0x2D0 - 0x2A0)
// Class Valhalla.SmoothTransformComponent
class USmoothTransformComponent : public USceneComponent
{
public:
	float                                        UpdateSpeed;                                       // 0x2A0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDistance;                                       // 0x2A4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_BDF[0x28];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class USmoothTransformComponent* GetDefaultObj();

	struct CoreUObject_Vector GetCurrentLocation();
};

// 0x7B8 (0xB00 - 0x348)
// Class Valhalla.ValAnimInstance
class UValAnimInstance : public UAnimInstance
{
public:
	uint8                                        Pad_DBD[0x8];                                      // Fixing Size After Last Property  
	struct Valhalla_ValAnimInstanceProxy         Proxy;                                             // 0x350(0x760)(BlueprintVisible, BlueprintReadOnly, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class USkeletalMeshComponent*                CopyPoseComp;                                      // 0xAB0(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AValCharacter*                         ValCharacterOwner;                                 // 0xAB8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UValCharacterMovementComponent*        ValCharacterMovementComponent;                     // 0xAC0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDisableIKWhileSprinting;                          // 0xAC8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAlwaysIKRightHand;                                // 0xAC9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAlwaysIKLeftHand;                                 // 0xACA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_DD2[0x1];                                      // Fixing Size After Last Property  
	float                                        AimingAlpha;                                       // 0xACC(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        BlockingAlpha;                                     // 0xAD0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bWalking;                                          // 0xAD4(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bSprinting;                                        // 0xAD5(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bStateSprinting;                                   // 0xAD6(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bFalling;                                          // 0xAD7(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bJetpacking;                                       // 0xAD8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bSkydiving;                                        // 0xAD9(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bSkydiveLanding;                                   // 0xADA(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bWantsToSki;                                       // 0xADB(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LeftHandIKStrength;                                // 0xADC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RightHandIKStrength;                               // 0xAE0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LeftHandIKTargetStrength;                          // 0xAE4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RightHandIKTargetStrength;                         // 0xAE8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ForwardPercent;                                    // 0xAEC(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LeftPercent;                                       // 0xAF0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUpdateAnimation;                                  // 0xAF4(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E19[0x3];                                      // Fixing Size After Last Property  
	float                                        RightPercent;                                      // 0xAF8(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E1F[0x4];                                      // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValAnimInstance* GetDefaultObj();

	void StopSwapAnims();
	void SetWalking(bool bValue);
	void SetSprinting(bool bValue);
	void SetRightHandIKStrength(float NewStrength, float BlendTime);
	void SetLeftHandIKStrength(float NewStrength, float BlendTime);
	void SetHidden(bool bNewHidden);
	void RestoreSwapAnim(float HolsterDuration, float DrawDuration);
	void PlayReverseHolster(float HolsterDuration);
	void PlayReverseDraw(float DrawDuration);
	void PlayHolster(float HolsterDuration);
	void PlayDraw(float DrawDuration);
	bool PlayDeathAnimation();
	void OnWeaponHolstered(const struct GameplayTags_GameplayTag& InTag, int32 NewCount);
	void OnVaulted();
	void OnSprintStateChanged(const struct GameplayTags_GameplayTag& InTag, int32 NewCount);
	void OnPostMatchStateChanged(const struct GameplayTags_GameplayTag& InTag, int32 NewCount);
	void EventSprintStateUpdated();
	void BlendOutIK(bool bForceBlendOutBothArms);
	void BlendInIK();
};

// 0x20 (0xB20 - 0xB00)
// Class Valhalla.ValAbilityAnimInstance
class UValAbilityAnimInstance : public UValAnimInstance
{
public:
	class UAnimMontage*                          DrawingMontage;                                    // 0xB00(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          HolsteringMontage;                                 // 0xB08(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          FireMontage;                                       // 0xB10(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UValAT_PlayMontageForMeshAndWait*      MontageTask;                                       // 0xB18(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValAbilityAnimInstance* GetDefaultObj();

	void PlayMontageReplicated(class UValGameplayAbility* Ability, class UAnimMontage* Montage, float Duration);
	void PlayMontage(class UAnimMontage* Montage, float Duration);
	void OnGrenadeThrow(const struct GameplayTags_GameplayTag& InTag, int32 NewCount);
};

// 0x230 (0x260 - 0x30)
// Class Valhalla.ValAbilityAudioVisual
class UValAbilityAudioVisual : public UDataAsset
{
public:
	struct GameplayTags_GameplayTag              AppearanceSlot;                                    // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>          Mesh1P;                                            // 0x38(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>          Mesh3P;                                            // 0x60(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UValAnimInstance>        ABP1P;                                             // 0x88(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UValAnimInstance>        ABP3P;                                             // 0xB0(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInterface>> MaterialOverrides1P;                               // 0xD8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UTexture2D>> MaterialOverrideParams1P;                          // 0xE8(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInterface>> MaterialOverrides3P;                               // 0x138(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UTexture2D>> MaterialOverrideParams3P;                          // 0x148(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                         bHideSkeletalMesh;                                 // 0x198(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1214[0x7];                                     // Fixing Size After Last Property  
	struct CoreUObject_Transform                 FirstPersonRelativeTransform;                      // 0x1A0(0x60)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                        ProjectileTrail;                                   // 0x200(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             AbilityIcon;                                       // 0x208(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  AbilityDisplayName;                                // 0x230(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  AbilityDescription;                                // 0x248(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValAbilityAudioVisual* GetDefaultObj();

	class USkeletalMesh* GetMesh3P();
	class USkeletalMesh* GetMesh1P();
	class UTexture2D* GetMaterialOverrideParams1P(class FName& Key);
	class UMaterialInterface* GetMaterialOverride1P(int32 Index);
	class UClass* GetABP3P();
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValAbilityFunctionLibrary
class UValAbilityFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UValAbilityFunctionLibrary* GetDefaultObj();

	struct GameplayAbilities_GameplayEffectSpecHandle RemoveGrantedTag(const struct GameplayAbilities_GameplayEffectSpecHandle& SpecHandle, const struct GameplayTags_GameplayTag& GameplayTag);
	bool IsPrimaryAbilityInstanceActive(class UAbilitySystemComponent* AbilitySystemComponent, const struct GameplayAbilities_GameplayAbilitySpecHandle& Handle);
	bool IsOccluded(class AActor* Victim, TArray<class FName>& Bones, struct CoreUObject_Vector& Origin, TArray<class AActor*>& IgnoreActors, struct Engine_HitResult* Hit, enum class ECollisionChannel TraceChannel, bool bDrawDebug);
	bool IsActiveGameplayEffectHandleValid(const struct GameplayAbilities_ActiveGameplayEffectHandle& Handle);
	bool IsAbilitySpecHandleValid(const struct GameplayAbilities_GameplayAbilitySpecHandle& Handle);
	bool HasGrantedTagExact(const struct GameplayAbilities_GameplayEffectSpecHandle& SpecHandle, const struct GameplayTags_GameplayTag& GameplayTag);
	float GetSetByCallerMagnitudeByTag(const struct GameplayAbilities_GameplayEffectSpecHandle& SpecHandle, const struct GameplayTags_GameplayTag& DataTag);
	class UValGameplayAbility* GetPrimaryAbilityInstanceFromHandle(class UAbilitySystemComponent* AbilitySystemComponent, const struct GameplayAbilities_GameplayAbilitySpecHandle& Handle);
	class UValGameplayAbility* GetPrimaryAbilityInstanceFromClass(class UAbilitySystemComponent* AbilitySystemComponent, TSubclassOf<class UGameplayAbility> InAbilityClass);
	class FString GetPlayerEditorWindowRole(class UWorld* World);
	bool GetHitIDFromTargetData(struct GameplayAbilities_GameplayAbilityTargetDataHandle& HitResult, int32 Index, int32* HitID);
	bool FindActorsInExplosion(class UObject* WorldContextObject, class AActor* DamageCauser, struct CoreUObject_Vector& Origin, float OuterDamageRadius, TArray<class AActor*>& IgnoreActors, enum class ECollisionChannel DamagePreventionChannel, TMap<class AActor*, struct Engine_HitResult>* OutResults, bool bIgnoreOcclusion, bool bDrawDebug);
	void EffectContextSetSourceObject(const struct GameplayAbilities_GameplayEffectContextHandle& EffectContextHandle, class UObject* NewSource);
	void EffectContextSetAffectsTeam(const struct GameplayAbilities_GameplayEffectContextHandle& EffectContextHandle, bool Value);
	struct GameplayAbilities_GameplayAbilityTargetDataHandle EffectContextGetTargetData(const struct GameplayAbilities_GameplayEffectContextHandle& EffectContext);
	bool EffectContextGetAffectsTeam(const struct GameplayAbilities_GameplayEffectContextHandle& EffectContext);
	void EffectContextAddTargetData(const struct GameplayAbilities_GameplayEffectContextHandle& EffectContextHandle, struct GameplayAbilities_GameplayAbilityTargetDataHandle& TargetData);
	bool DoesEffectContainerSpecHaveEffects(struct Valhalla_ValGameplayEffectContainerSpec& ContainerSpec);
	void ClearTargetData(struct GameplayAbilities_GameplayAbilityTargetDataHandle& TargetData);
	TArray<struct GameplayAbilities_ActiveGameplayEffectHandle> ApplyExternalEffectSpec(struct GameplayAbilities_GameplayEffectSpecHandle& EffectSpec, struct GameplayAbilities_GameplayAbilityTargetDataHandle& TargetData);
	TArray<struct GameplayAbilities_ActiveGameplayEffectHandle> ApplyExternalEffectContainerSpec(struct Valhalla_ValGameplayEffectContainerSpec& ContainerSpec, struct GameplayAbilities_GameplayAbilityTargetDataHandle& TargetData);
};

// 0x138 (0x3D0 - 0x298)
// Class Valhalla.ValPickup
class AValPickup : public AActor
{
public:
	uint8                                        Pad_1E71[0x8];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnPickedUp;                                        // 0x2A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USphereComponent*                      CollisionComp;                                     // 0x2B0(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                      InteractCollisionComp;                             // 0x2B8(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                Mesh;                                              // 0x2C0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              EquipSlot;                                         // 0x2C8(0x8)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UValDevice>                PickupAbility;                                     // 0x2D0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>           PickupEffect;                                      // 0x2D8(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct GameplayTags_GameplayTag, float> PickupEffectMagnitudes;                            // 0x2E0(0x50)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                         bPickupOnContact;                                  // 0x330(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1EBE[0x7];                                     // Fixing Size After Last Property  
	class FText                                  InteractText;                                      // 0x338(0x18)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                  FailedInteractText;                                // 0x350(0x18)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                         R_bPickupActive;                                   // 0x368(0x1)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDestroyOnPickup;                                  // 0x369(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1EE7[0x2];                                     // Fixing Size After Last Property  
	int32                                        RespawnTime;                                       // 0x36C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    RespawnTimer;                                      // 0x370(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCustomOnPickupComplete;                           // 0x378(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bPreventDefenderInteract;                          // 0x379(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bPickedUp;                                         // 0x37A(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1F08[0x5];                                     // Fixing Size After Last Property  
	class AValCharacter*                         CachedInitiator;                                   // 0x380(0x8)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCameraModifier>           CamMod;                                            // 0x388(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct Engine_WeightedBlendable>      PickupModMaterials;                                // 0x390(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F24[0x18];                                    // Fixing Size After Last Property  
	TArray<class AValCharacter*>                 CharactersThatCanInteract;                         // 0x3B8(0x10)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class AValCharacter*                         CachedReserver;                                    // 0x3C8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValPickup* GetDefaultObj();

	bool TryToPickUp(class AValCharacter* ValCharacter);
	void SetPickupActive(bool bActive);
	bool ReserveItem(class AValCharacter* Reserver);
	void ReleaseReservation();
	void OnPickupComplete(class AValCharacter* ValCharacter);
	void OnHoverStart(class AValCharacter* Initiator);
	void OnHoverEnd(class AValCharacter* Initiator);
	void Interact(class AValCharacter* Initiator);
	void HideFloatingIcon(bool bIsHidden);
	class FText GetPickupInteractText(class AValCharacter* Initiator, bool* Success);
	TSubclassOf<class UValDevice> GetPickupAbility();
	class USkeletalMeshComponent* GetMesh();
	class FText GetInteractText();
	class UPrimitiveComponent* GetInteractComponent();
	class USphereComponent* GetCollisionComp();
	void FinishPickup();
	void EnablePickup(bool Value);
	bool CustomPickupFunc(class AValCharacter* ValCharacter);
	bool CharacterPickupCheck(class AValCharacter* ValCharacter);
	bool CanInteract(class AValCharacter* Initiator);
	void AutoPickupPickupItem(class AValCharacter* Initiator);
};

// 0x1A0 (0x570 - 0x3D0)
// Class Valhalla.ValAbilityPickup
class AValAbilityPickup : public AValPickup
{
public:
	TMap<enum class ERarity, int32>              RaritySpawnWeights;                                // 0x3D0(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	enum class ERarity                           R_Rarity;                                          // 0x420(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2678[0x7];                                     // Fixing Size After Last Property  
	TSubclassOf<class UValGameplayAbility>       R_AbilityPickup;                                   // 0x428(0x8)(Net, ZeroConstructor, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              R_EquipSlot;                                       // 0x430(0x8)(Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bAbilityLoaded;                                  // 0x438(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_269A[0x7];                                     // Fixing Size After Last Property  
	TSoftObjectPtr<class UStaticMesh>            R_AbilityPickupMesh;                               // 0x440(0x28)(Net, RepNotify, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_StackSize;                                       // 0x468(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_MaxStackSize;                                    // 0x46C(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  R_AssetId;                                         // 0x470(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_26B3[0xF8];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValAbilityPickup* GetDefaultObj();

	void SelectPickupRarity();
	void SelectPickupAbility();
	void OnStackSizeUpdated();
	void OnRep_StackSize();
	void OnRep_PickupRarity();
	void OnRep_PickupEquipSlot();
	void OnRep_PickupAbility();
	void OnRep_MaxStackSize();
	void OnRep_DungeonMods();
	void OnRep_AssetId();
	void OnRep_AbilityPickupMesh();
	void OnRep_AbilityLoaded();
	void OnRarityUpdated(enum class ERarity Rarity);
	void OnMaxStackSizeUpdated();
	void OnEquipSlotUpdated(const struct GameplayTags_GameplayTag& NewEquipSlot);
	void OnDungeonModsUpdated();
	void OnAssetIdUpdated();
	void OnAbilityUpdated(TSubclassOf<class UValGameplayAbility> Ability);
	void OnAbilityPickupMeshUpdated();
	int32 GetStackSize();
	enum class ERarity GetRarity();
	int32 GetMaxStackSize();
	struct GameplayTags_GameplayTag GetEquipSlot();
	class FName GetAssetId();
	TSoftObjectPtr<class UStaticMesh> GetAbilityPickupMesh();
	TSubclassOf<class UValGameplayAbility> GetAbility();
};

// 0x28 (0x628 - 0x600)
// Class Valhalla.ValAbilitySwappable
class UValAbilitySwappable : public UValGameplayAbility
{
public:
	enum class EValAbilitySwappableSwapType      DrawTimeType;                                      // 0x600(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2ACD[0x3];                                     // Fixing Size After Last Property  
	float                                        CustomGunDrawTime;                                 // 0x604(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EValAbilitySwappableSwapType      HolsterTimeType;                                   // 0x608(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2AF7[0x3];                                     // Fixing Size After Last Property  
	float                                        CustomGunHolsterTime;                              // 0x60C(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsInterruptible;                                  // 0x610(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bSwapDisabled;                                     // 0x611(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2B12[0x6];                                     // Fixing Size After Last Property  
	class AValCharacter*                         OwningCharacter;                                   // 0x618(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbilityTask_WaitDelay*                DelayTask;                                         // 0x620(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValAbilitySwappable* GetDefaultObj();

	void Wait_UseAbility();
	void Wait_HolsterAbility();
	void Wait_End();
	void Wait_DrawWeapon();
	void Wait_DrawAbility();
	void Wait_ApplyCooldown(float Time);
	bool TryConfirm();
	void SetSwapDisabled(bool Value);
	void SetHolsterTime(float NewTime);
	void PlayMontage(class UAnimMontage* Montage1P, class UAnimMontage* Montage3P, float Duration);
	void ModifySwappable(class AValCharacter* Character);
	float GetGunHolsterTime();
	float GetGunDrawTime();
	void DelayedApplyCooldownAndEndAbility();
	bool CheckSwappableCosts(class AValCharacter* Character);
};

// 0x170 (0x13C0 - 0x1250)
// Class Valhalla.ValAbilitySystemComponent
class UValAbilitySystemComponent : public UAbilitySystemComponent
{
public:
	uint8                                        Pad_3B81[0x8];                                     // Fixing Size After Last Property  
	TMap<enum class EValAbilityInputID, struct GameplayTags_GameplayTag> EquipSlotCooldowns;                                // 0x1258(0x50)(Edit, NativeAccessSpecifierPublic)
	TMap<enum class EValAbilityInputID, struct GameplayTags_GameplayTag> EquipSlotSecondaryCDs;                             // 0x12A8(0x50)(Edit, NativeAccessSpecifierPublic)
	TMap<enum class EValAbilityInputID, struct GameplayTags_GameplayTag> AbilityActivatedTags;                              // 0x12F8(0x50)(Edit, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActiveEffectDurationChanged;                     // 0x1348(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bPendingMontageRepForMesh;                         // 0x1358(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3BA1[0x7];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_GameplayAbilityLocalAnimMontageForMesh> LocalAnimMontageInfoForMeshes;                     // 0x1360(0x10)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_GameplayAbilityRepAnimMontageForMesh> RepAnimMontageInfoForMeshes;                       // 0x1370(0x10)(Net, ZeroConstructor, RepNotify, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnActiveAbilityActivated;                          // 0x1380(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActiveAbilityEndedSuccessfully;                  // 0x1390(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActiveAbilityCancelled;                          // 0x13A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_GameplayAbilityChargesInfo> R_AbilityCharges;                                  // 0x13B0(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValAbilitySystemComponent* GetDefaultObj();

	bool TryActivateAbilityByClassAndInput(TSubclassOf<class UGameplayAbility> InAbilityToActivate, int32 InputID, bool bAllowRemoteActivation);
	bool SetGameplayEffectDurationHandle(const struct GameplayAbilities_ActiveGameplayEffectHandle& Handle, float NewDuration);
	void ServerCurrentMontageSetPlayRateForMesh(class USkeletalMeshComponent* InMesh, class UAnimMontage* ClientAnimMontage, float InPlayRate);
	void ServerCurrentMontageSetNextSectionNameForMesh(class USkeletalMeshComponent* InMesh, class UAnimMontage* ClientAnimMontage, float ClientPosition, class FName SectionName, class FName NextSectionName);
	void ServerCurrentMontageJumpToSectionNameForMesh(class USkeletalMeshComponent* InMesh, class UAnimMontage* ClientAnimMontage, class FName SectionName);
	void RemoveGameplayCueLocal(const struct GameplayTags_GameplayTag& GameplayCueTag, struct GameplayAbilities_GameplayCueParameters& GameplayCueParameters);
	void RefreshAllCharges();
	void OnRep_ReplicatedAnimMontageForMesh();
	void OnRep_Charges();
	void OnGameplayEffectDurationChange(struct GameplayAbilities_ActiveGameplayEffect* ActiveEffect);
	void OnAbilityEndedWithData(struct GameplayAbilities_AbilityEndedData& Data);
	void OnAbilityEnded(class UGameplayAbility* EndedAbility);
	void OnAbilityActivated(class UGameplayAbility* ActivatedAbility);
	void MulticastSwappableAbilityEnded(class UClass* Type);
	void MulticastSwappableAbilityActivated(class UClass* Type);
	void K2_RemoveLooseGameplayTags(struct GameplayTags_GameplayTagContainer& GameplayTags, int32 Count);
	void K2_RemoveLooseGameplayTag(struct GameplayTags_GameplayTag& GameplayTag, int32 Count);
	int32 K2_GetTagCount(const struct GameplayTags_GameplayTag& TagToCheck);
	void K2_AddLooseGameplayTags(struct GameplayTags_GameplayTagContainer& GameplayTags, int32 Count);
	void K2_AddLooseGameplayTag(struct GameplayTags_GameplayTag& GameplayTag, int32 Count);
	void IncreaseAllCooldowns(float Amount);
	void IncreaseActiveCooldownWithTag(float Amount, struct GameplayTags_GameplayTag& Tag);
	void IncreaseActiveCooldownsByPercent(float Value);
	void IncreaseActiveCooldowns(float Amount);
	class FString GetCurrentPredictionKeyStatus();
	struct GameplayAbilities_GameplayAbilitySpecHandle FindAbilitySpecHandleForClass(TSubclassOf<class UGameplayAbility> AbilityClass, class UObject* OptionalSourceObject);
	void ExecuteGameplayCueLocal(const struct GameplayTags_GameplayTag& GameplayCueTag, struct GameplayAbilities_GameplayCueParameters& GameplayCueParameters);
	void ClientRefreshAllCharges();
	void BP_RemoveGameplayCueWithParams(const struct GameplayTags_GameplayTag& GameplayCueTag);
	void BP_ExecuteGameplayCueWithParams(const struct GameplayTags_GameplayTag& GameplayCueTag, struct GameplayAbilities_GameplayCueParameters& GameplayCueParameters);
	struct GameplayAbilities_ActiveGameplayEffectHandle BP_ApplyGameplayEffectToTargetWithPrediction(TSubclassOf<class UGameplayEffect> GameplayEffectClass, class UAbilitySystemComponent* Target, float Level, const struct GameplayAbilities_GameplayEffectContextHandle& Context);
	struct GameplayAbilities_ActiveGameplayEffectHandle BP_ApplyGameplayEffectToSelfWithPrediction(TSubclassOf<class UGameplayEffect> GameplayEffectClass, float Level, const struct GameplayAbilities_GameplayEffectContextHandle& EffectContext);
	struct GameplayAbilities_ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToSelfWithPrediction(struct GameplayAbilities_GameplayEffectSpecHandle& SpecHandle);
	void BP_AddGameplayCueWithParams(const struct GameplayTags_GameplayTag& GameplayCueTag, struct GameplayAbilities_GameplayCueParameters& GameplayCueParameter);
	bool BatchRPCTryActivateAbility(const struct GameplayAbilities_GameplayAbilitySpecHandle& InAbilityHandle, bool EndAbilityImmediately);
	void AddSourceObjectToEffectContext(struct GameplayAbilities_GameplayEffectContextHandle& EffectContextHandle, class UObject* SourceObject);
	void AddGameplayCueLocal(const struct GameplayTags_GameplayTag& GameplayCueTag, struct GameplayAbilities_GameplayCueParameters& GameplayCueParameters);
	void AddAbilityMaxCharge(const struct GameplayAbilities_GameplayAbilitySpecHandle& Handle, int32 Value);
};

// 0x7D0 (0xA78 - 0x2A8)
// Class Valhalla.ValAbilitySystemGlobals
class UValAbilitySystemGlobals : public UAbilitySystemGlobals
{
public:
	uint8                                        Pad_3C18[0x7D0];                                   // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValAbilitySystemGlobals* GetDefaultObj();

};

// 0x28 (0x50 - 0x28)
// Class Valhalla.ValAbilityKnockbackData
class UValAbilityKnockbackData : public UObject
{
public:
	struct CoreUObject_Vector                    KnockbackDirection;                                // 0x28(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        KnockbackMagnitude;                                // 0x40(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InCurveTime;                                       // 0x44(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           InKnockbackCurve;                                  // 0x48(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValAbilityKnockbackData* GetDefaultObj();

};

// 0x118 (0x140 - 0x28)
// Class Valhalla.ValAbilityImpactData
class UValAbilityImpactData : public UObject
{
public:
	struct CoreUObject_Vector                    VelocityBeforeImpact;                              // 0x28(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_Vector                    VelocityAfterImpact;                               // 0x40(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Engine_HitResult                      Impact;                                            // 0x58(0xE8)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValAbilityImpactData* GetDefaultObj();

};

// 0x48 (0x648 - 0x600)
// Class Valhalla.ValAbilityUpgrade
class UValAbilityUpgrade : public UValGameplayAbility
{
public:
	bool                                         bForceListenSlot;                                  // 0x600(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUpgradeAlwaysActive;                              // 0x601(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSlotHeld;                                         // 0x602(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3D20[0x1];                                     // Fixing Size After Last Property  
	struct GameplayTags_GameplayTag              ListenSlot;                                        // 0x604(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3D24[0x4];                                     // Fixing Size After Last Property  
	class UValGameplayAbility*                   OwningAbility;                                     // 0x610(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                CachedAvatarActor;                                 // 0x618(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct GameplayAbilities_ActiveGameplayEffectHandle> ActiveEffectHandles;                               // 0x620(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct GameplayAbilities_GameplayEffectSpecHandle> EffectsToApplyHandles;                             // 0x630(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	float                                        GeneratedValue;                                    // 0x640(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3D2C[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValAbilityUpgrade* GetDefaultObj();

	void UnapplyAbilityUpgrade();
	void SetOwningAbility(const struct GameplayAbilities_GameplayAbilitySpec& Ability);
	void SetListenSlot(struct GameplayTags_GameplayTag& Slot);
	void SetGeneratedValue(float Value);
	void RemoveActiveGameplayEffectHandles();
	void OnSlotDeviceHeldChanged();
	struct GameplayTags_GameplayTag GetListenSlot();
	float GetGeneratedValue();
	void EventUnapplyAbilityUpgrade();
	void EventApplyAbilityUpgrade(TSubclassOf<class UValGameplayAbility> Class, float Value, class UValGameplayAbility* Ability);
	void EventActivateUpgrade(float Value);
	void EquipSlotUpdated(const struct GameplayTags_GameplayTag& Slot);
	void ApplyAbilityUpgrade(class UValGameplayAbility* AbilityToUpgrade, float Value);
	void ActivateUpgrade(float Value);
};

// 0x28 (0xE8 - 0xC0)
// Class Valhalla.ValActivityTier
class UValActivityTier : public URH_ItemAsset
{
public:
	int32                                        RequiredCount;                                     // 0xC0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        CompletionItemId;                                  // 0xC4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MinimumLevelRequired;                              // 0xC8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3D62[0x4];                                     // Fixing Size After Last Property  
	TArray<class URH_ItemAsset*>                 RewardAssets;                                      // 0xD0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                         bUnboundedProgress;                                // 0xE0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3D69[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValActivityTier* GetDefaultObj();

};

// 0x98 (0x158 - 0xC0)
// Class Valhalla.ValActivityAsset
class UValActivityAsset : public URH_ItemAsset
{
public:
	TArray<struct Valhalla_DailyContractLootMapping> DailyContractLootPools;                            // 0xC0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        ProgressItemId;                                    // 0xD0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3ECD[0x4];                                     // Fixing Size After Last Property  
	TArray<int32>                                ActivityResetIds;                                  // 0xD8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UValActivityTier*>              Tiers;                                             // 0xE8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UValActivityPrerequisite*>      Prerequisites;                                     // 0xF8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UValActivityRequirement*>       Requirements;                                      // 0x108(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class UValActivityTracker>       TrackerClass;                                      // 0x118(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         OwnershipRequired;                                 // 0x120(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         AutoClaimReward;                                   // 0x121(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRequiresClaim;                                    // 0x122(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3ED3[0x5];                                     // Fixing Size After Last Property  
	TArray<class URH_ItemAsset*>                 ClaimAssets;                                       // 0x128(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	enum class EActivityType                     ActivityType;                                      // 0x138(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         ClientManaged;                                     // 0x139(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         ClientVisible;                                     // 0x13A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EActivityClientNotification       ClientNotification;                                // 0x13B(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3EDA[0x4];                                     // Fixing Size After Last Property  
	class FText                                  MissionProgressMessage;                            // 0x140(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValActivityAsset* GetDefaultObj();

	bool IsTierUnlocked(int32 CurrentLevel, int32 Tier);
	int32 GetTotalTiersNeeded();
	int32 GetTotalProgressNeeded();
	int32 GetTierUnlockLevel(int32 Tier);
	int32 GetTierForProgress(int32 Progress, bool bShowCompleted);
	void GetRewardsForTier(int32 Tier, TArray<class URH_ItemAsset*>* Rewards);
	int32 GetProgressNeededForTier(int32 Tier, bool bCumulative);
	int32 GetProgressNeededForCompletion();
	int32 GetProgressId();
	int32 GetItemId();
	int32 GetCompletionIdForTier(int32 Tier);
	int32 GetCompletionId();
	void GetClaimLoot(TArray<class URH_ItemAsset*>* ClaimLoot);
	enum class EActivityType GetActivityType();
	TArray<int32> GetActivityResetIds();
};

// 0x130 (0x3C8 - 0x298)
// Class Valhalla.ValActivityPlayer
class AValActivityPlayer : public AActor
{
public:
	FMulticastInlineDelegateProperty_            OnActivityUnlocked;                                // 0x298(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActivityCompleted;                               // 0x2A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActivityInitialized;                             // 0x2B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActivityIncremented;                             // 0x2C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActivityTierReached;                             // 0x2D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActivityPlayerLoaded;                            // 0x2E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UDataAsset>>     R_ActivityAssets;                                  // 0x2F8(0x10)(Net, ZeroConstructor, RepNotify, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UDataAsset>>     R_MissionAssets;                                   // 0x308(0x10)(Net, ZeroConstructor, RepNotify, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                        Pad_3FCA[0x18];                                    // Fixing Size After Last Property  
	struct CoreUObject_Guid                      OwningPlayerId;                                    // 0x330(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UValActivityAsset*>             ActivityAssets;                                    // 0x340(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UValActivityAsset*>             MissionAssets;                                     // 0x350(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UValActivityPlayerInstance*>    ActivityInstances;                                 // 0x360(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValPlayerController>   WeakOwningController;                              // 0x370(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class UValActivityPlayerInstance*, struct Valhalla_DailyContractRewards> ContractsToGrant;                                  // 0x378(0x50)(Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValActivityPlayer* GetDefaultObj();

	void TurnInActivity(int32 ActivityId);
	void ServerTurnInActivity(int32 ActivityId);
	void ServerClaimActivityLoot(int32 ActivityId);
	void OnRep_MissionAssets();
	void OnRep_ActivityAssets();
	void OnPlayerInventoryReady(class UValPlayerInventory* PlayerInventory);
	void OnMissionAssetsLoaded();
	void OnInventoryUpdated(TArray<int32>& ItemIds);
	void OnInventoryLoaded();
	void OnInstanceOwnershipUpdated(class UValActivityPlayerInstance* ActivityInstance, bool bIsUnlocked);
	void OnGameStateSet(class AGameStateBase* GameState);
	void OnAssetsLoaded();
	void ClientUpdateActivity(int32 ActivityId, int32 InventoryCount, bool bIsOwned);
	void ClaimActivityLoot(int32 ActivityId);
	void AddProgress(int32 ActivityId, int32 Count);
};

// 0x140 (0x168 - 0x28)
// Class Valhalla.ValActivityPlayerInstance
class UValActivityPlayerInstance : public UObject
{
public:
	FMulticastInlineDelegateProperty_            OnActivityTierTurnedIn;                            // 0x28(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActivityProgressUpdated;                         // 0x38(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActivityOwnershipUpdated;                        // 0x48(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_41DD[0x18];                                    // Fixing Size After Last Property  
	class UValActivityAsset*                     ActivityAsset;                                     // 0x70(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValActivityPlayer*                    ActivityPlayer;                                    // 0x78(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValActivityTracker*                   ActivityTracker;                                   // 0x80(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct RallyHereIntegration_RH_ItemInventory ActivityInventoryItem;                             // 0x88(0x90)(Protected, NativeAccessSpecifierProtected)
	TMap<class FString, double>                  PlatformProgressPerAchievement;                    // 0x118(0x50)(Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValActivityPlayerInstance* GetDefaultObj();

	bool SetProgress(int32 Count);
	void SetOwnership(bool bOwned);
	void SetActivityFailed(bool Failed);
	bool ResetProgress();
	void OnTrackerProgress(int32 Count);
	void OnMissionProgress();
	void OnInventoryProgressUpdated();
	void OnInventoryOwnershipUpdated();
	void OnActivityTierReached(int32 Tier);
	bool IsUnlocked();
	bool IsTurnedIn();
	bool IsProgressUpdated();
	bool IsOwnershipUpdated();
	bool IsCurrentTierUnlocked();
	bool IsComplete();
	bool IsClaimed();
	bool IsActivityInitialized();
	bool HasLoadedInventory();
	int32 GetTotalProgressNeeded();
	bool GetTierCompletionTime(int32 Tier, struct CoreUObject_DateTime* Timestamp);
	bool GetProgressTime(struct CoreUObject_DateTime* Timestamp);
	int32 GetProgressNeededForTier(int32 Tier, bool bCumulative);
	int32 GetProgressInCurrentTier();
	int32 GetPendingProgress();
	class AValPlayerController* GetOwningController();
	int32 GetInitialProgress();
	bool GetCustomDataReward(class UValEquipmentAsset** OutEquipmentAsset, int32* Quantity, enum class ERarity* Rarity);
	int32 GetCurrentTierUnlockLevel();
	int32 GetCurrentTier();
	int32 GetCurrentProgress();
	bool GetCompletionTime(struct CoreUObject_DateTime* Timestamp);
	class UValActivityTracker* GetActivityTracker();
	class AValActivityPlayer* GetActivityPlayer();
	class UValActivityAsset* GetActivity();
	bool GetAcquiredTime(struct CoreUObject_DateTime* Timestamp);
	bool AddProgress(int32 Count);
};

// 0xC0 (0xE8 - 0x28)
// Class Valhalla.ValActivityTracker
class UValActivityTracker : public UObject
{
public:
	FMulticastInlineDelegateProperty_            OnProgress;                                        // 0x28(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActivityMissionProgress;                         // 0x38(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActivityMissionTimeout;                          // 0x48(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UValActivityAsset>      ActivityAsset;                                     // 0x58(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UValActivityPlayerInstance> ActivityPlayerInstance;                            // 0x60(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIncrementOncePerMatch;                            // 0x68(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4269[0x1];                                     // Fixing Size After Last Property  
	bool                                         bInOneMatch;                                       // 0x6A(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_426B[0xD];                                     // Fixing Size After Last Property  
	struct Engine_TimerHandle                    TimeLimitTimer;                                    // 0x78(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUseThresholds;                                    // 0x80(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUsePercentTreshold;                               // 0x81(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_426E[0x2];                                     // Fixing Size After Last Property  
	float                                        ThresholdPercent;                                  // 0x84(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        ThresholdInterval;                                 // 0x88(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4271[0x4];                                     // Fixing Size After Last Property  
	class AValPlayerController*                  CachedController;                                  // 0x90(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ETeamSize                         ExpectedTeamSize;                                  // 0x98(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ETeamSize                         ActualTeamSize;                                    // 0x99(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4278[0x6];                                     // Fixing Size After Last Property  
	TSubclassOf<class AValGameModeBase>          SpecificGameMode;                                  // 0xA0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              InteractionTag;                                    // 0xA8(0x8)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bTrackHealth;                                      // 0xB0(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4280[0x3];                                     // Fixing Size After Last Property  
	float                                        MinHealth;                                         // 0xB4(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxHealth;                                         // 0xB8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bTrackShields;                                     // 0xBC(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4284[0x3];                                     // Fixing Size After Last Property  
	float                                        MinShields;                                        // 0xC0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxShields;                                        // 0xC4(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bTrackMatchTime;                                   // 0xC8(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4287[0x3];                                     // Fixing Size After Last Property  
	float                                        MinTime;                                           // 0xCC(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxTime;                                           // 0xD0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHasTimeLimit;                                     // 0xD4(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_428B[0x3];                                     // Fixing Size After Last Property  
	float                                        TrackerTimeLimit;                                  // 0xD8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              LocationTag;                                       // 0xDC(0x8)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_428D[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValActivityTracker* GetDefaultObj();

	void TierReached(class UValActivityPlayerInstance* PlayerInstance, int32 Tier);
	void OnTimeLimitExceeded();
	int32 GetProgressInCurrentTier();
	int32 GetPendingProgress();
	int32 GetInitialProgress();
	int32 GetCurrentProgress();
	int32 GetActivityId();
	bool CanAddProgress();
};

// 0x58 (0x140 - 0xE8)
// Class Valhalla.ValActivityTracker_Damage
class UValActivityTracker_Damage : public UValActivityTracker
{
public:
	struct GameplayTags_GameplayTagContainer     AbilityTags;                                       // 0xE8(0x20)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTagContainer     DamageSourceTags;                                  // 0x108(0x20)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                         bCountPlayers;                                     // 0x128(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCountBots;                                        // 0x129(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bKillingBlowsOnly;                                 // 0x12A(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDirectHitsOnly;                                   // 0x12B(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHeadshotsOnly;                                    // 0x12C(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCountPets;                                        // 0x12D(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bTrackDistance;                                    // 0x12E(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_42C0[0x1];                                     // Fixing Size After Last Property  
	float                                        MinDistance;                                       // 0x130(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxDistance;                                       // 0x134(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bSourceIsFalling;                                  // 0x138(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bTargetIsFalling;                                  // 0x139(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIncrementByDamageAmount;                          // 0x13A(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_42CA[0x5];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValActivityTracker_Damage* GetDefaultObj();

	void OnDamage(struct CoreUObject_Guid& PlayerUuid, struct Valhalla_DamageData& DamageData, class AActor* Target);
};

// 0x20 (0x160 - 0x140)
// Class Valhalla.ValActivityTracker_BotType
class UValActivityTracker_BotType : public UValActivityTracker_Damage
{
public:
	struct GameplayTags_GameplayTagContainer     BotTypes;                                          // 0x140(0x20)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValActivityTracker_BotType* GetDefaultObj();

};

// 0x8 (0xF0 - 0xE8)
// Class Valhalla.ValActivityTracker_DogTag
class UValActivityTracker_DogTag : public UValActivityTracker
{
public:
	bool                                         bRewardReputationAmount;                           // 0xE8(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_42E5[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValActivityTracker_DogTag* GetDefaultObj();

	void OnDogTagFound(bool IsFriendly, int32 Split, struct Valhalla_InventoryItem& InventoryItem, enum class EPlayerLevelType LevelType);
};

// 0x48 (0x130 - 0xE8)
// Class Valhalla.ValActivityTracker_Elimination
class UValActivityTracker_Elimination : public UValActivityTracker
{
public:
	struct GameplayTags_GameplayTagContainer     AbilityTags;                                       // 0xE8(0x20)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTagContainer     DamageSourceTags;                                  // 0x108(0x20)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                         bCountPlayers;                                     // 0x128(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCountBots;                                        // 0x129(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_42FA[0x6];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValActivityTracker_Elimination* GetDefaultObj();

	void OnElimination(struct Valhalla_DamageData& DamageData, class AActor* Target);
};

// 0x48 (0x130 - 0xE8)
// Class Valhalla.ValActivityTracker_ExtractedLoot
class UValActivityTracker_ExtractedLoot : public UValActivityTracker
{
public:
	uint8                                        Pad_4304[0x8];                                     // Fixing Size After Last Property  
	TArray<class UDataAsset*>                    LootToTrack;                                       // 0xF0(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                         bValuableFlag;                                     // 0x100(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4307[0x7];                                     // Fixing Size After Last Property  
	TArray<enum class ERarity>                   RarityFilters;                                     // 0x108(0x10)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                         bRequireFoundInMatch;                              // 0x118(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4308[0x17];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValActivityTracker_ExtractedLoot* GetDefaultObj();

};

// 0x18 (0x100 - 0xE8)
// Class Valhalla.ValActivityTracker_Extraction
class UValActivityTracker_Extraction : public UValActivityTracker
{
public:
	bool                                         bUsedEnemyPortal;                                  // 0xE8(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4317[0x7];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_StatComparison>       StatsToTrack;                                      // 0xF0(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValActivityTracker_Extraction* GetDefaultObj();

	void OnPlayerExtracted();
};

// 0x0 (0xE8 - 0xE8)
// Class Valhalla.ValActivityTracker_FirstBlood
class UValActivityTracker_FirstBlood : public UValActivityTracker
{
public:

	static class UClass* StaticClass();
	static class UValActivityTracker_FirstBlood* GetDefaultObj();

};

// 0x0 (0xE8 - 0xE8)
// Class Valhalla.ValActivityTracker_Lights
class UValActivityTracker_Lights : public UValActivityTracker
{
public:

	static class UClass* StaticClass();
	static class UValActivityTracker_Lights* GetDefaultObj();

};

// 0x0 (0xE8 - 0xE8)
// Class Valhalla.ValActivityTracker_OpenCrate
class UValActivityTracker_OpenCrate : public UValActivityTracker
{
public:

	static class UClass* StaticClass();
	static class UValActivityTracker_OpenCrate* GetDefaultObj();

	void OnCrateOpened();
};

// 0x8 (0xF0 - 0xE8)
// Class Valhalla.ValActivityTracker_Stat
class UValActivityTracker_Stat : public UValActivityTracker
{
public:
	enum class EGameStatType                     StatToTrack;                                       // 0xE8(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4330[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValActivityTracker_Stat* GetDefaultObj();

};

// 0x70 (0xA0 - 0x30)
// Class Valhalla.ValActivityConfigData
class UValActivityConfigData : public UDataAsset
{
public:
	int32                                        DailyActivitiesPerDay;                             // 0x30(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        BonusVIPActivities;                                // 0x34(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxDailyActivities;                                // 0x38(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        BonusVIPMaxActivities;                             // 0x3C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxDailyContractRewards;                           // 0x40(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4334[0x4];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_DailyContractLootMapping> DailyContractLootPools;                            // 0x48(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UDataAsset>>     SeasonChallenges;                                  // 0x58(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UDataAsset>>     DailyContracts;                                    // 0x68(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UDataAsset>>     AgentMissions;                                     // 0x78(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UDataAsset>>     Accolades;                                         // 0x88(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                        MissionProgressRewardXp;                           // 0x98(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_433A[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValActivityConfigData* GetDefaultObj();

};

// 0x100 (0x130 - 0x30)
// Class Valhalla.ValMissionConfig
class UValMissionConfig : public UDataAsset
{
public:
	TMap<enum class EMissionDiffuclty, struct Valhalla_MissionReward> MissionRewards;                                    // 0x30(0x50)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                        MinimumMissionScoring;                             // 0x80(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumOfMissionsRolled;                               // 0x84(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UValActivityAsset*                     MissionAsset;                                      // 0x88(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<enum class EMissionDiffuclty, int32>    DifficultyMap;                                     // 0x90(0x50)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<struct GameplayTags_GameplayTag, struct Valhalla_WorldMissionConfig> WorldConfigs;                                      // 0xE0(0x50)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValMissionConfig* GetDefaultObj();

};

// 0x68 (0x98 - 0x30)
// Class Valhalla.ValMissionSequenceAsset
class UValMissionSequenceAsset : public UDataAsset
{
public:
	int32                                        DifficultyRating;                                  // 0x30(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct GameplayTags_GameplayTag              AgentTag;                                          // 0x34(0x8)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_436B[0x4];                                     // Fixing Size After Last Property  
	struct Valhalla_MissionSequenceElement       MissionElement;                                    // 0x40(0x30)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                         RequiresSubsequentMission;                         // 0x70(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_436E[0x7];                                     // Fixing Size After Last Property  
	TArray<class UValMissionSequenceAsset*>      SubsequentMissions;                                // 0x78(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UValMissionSequenceAsset*>      BlockedMissions;                                   // 0x88(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValMissionSequenceAsset* GetDefaultObj();

};

// 0x110 (0x140 - 0x30)
// Class Valhalla.ValAgentConfig
class UValAgentConfig : public UPrimaryDataAsset
{
public:
	class FText                                  DisplayName;                                       // 0x30(0x18)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             InfoPanelIcon;                                     // 0x48(0x28)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             MissionRowIcon;                                    // 0x70(0x28)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             PortraitIcon;                                      // 0x98(0x28)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             PortraitIconHighlighted;                           // 0xC0(0x28)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             NotificationIcon;                                  // 0xE8(0x28)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct GameplayTags_GameplayTag              AgentTag;                                          // 0x110(0x8)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UValEquipmentAsset>     CurrencyItem;                                      // 0x118(0x28)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValAgentConfig* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValAIBlueprintHelperLibrary
class UValAIBlueprintHelperLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UValAIBlueprintHelperLibrary* GetDefaultObj();

	void UpdatePerceptionSightConfig(class AAIController* Controller, float SightRadius, float LoseSightRadius, float PeripheralVisionAngleDegrees);
	void UpdatePerceptionHearingConfig(class AAIController* Controller, float HearingRadius);
	void UnregisterAsCoverWithSightManager(class UObject* WorldContextObject, class AActor* InActor);
	void SyncLoadBotData(class UValBotData* BotData);
	void SpawnBotGroup(class UObject* WorldContextObject, class UValBotWaveConfig* SpawnConfig, TArray<struct CoreUObject_Transform>& SpawnLocations, bool bTreatNullBotDataAsValid, TArray<class AValCharacter*>* OutBots, class AValBotSpawnVolume* OwningVolume);
	class APawn* SpawnAIFromClassWithData(class UObject* WorldContextObject, TSubclassOf<class APawn> PawnClass, class UValBotData* ConfigData, class UBehaviorTree* BehaviorTree, const struct CoreUObject_Vector& Location, const struct CoreUObject_Rotator& Rotation, bool bNoCollisionFail, class AActor* Owner);
	void SetCanEverAffectNavigation(class UActorComponent* Component, bool bCanAffectNavigation);
	void RegisterAsCoverWithSightManager(class UObject* WorldContextObject, class AActor* InActor);
	struct CoreUObject_Vector PredictTargetLocation(class UObject* WorldContextObject, class AActor* TargetActor, float PredictionTime);
	bool IsLocationWithinBuilding(class UObject* WorldContextObject, const struct CoreUObject_Vector& InLocation);
	bool IsLocationOnNavMesh(class UObject* WorldContextObject, const struct CoreUObject_Vector& InLocation, struct CoreUObject_Vector* OutClosestNavMeshLocation);
	bool IsCybridTeamID(class UObject* WorldContextObject, int32 TeamNum);
	bool IsCybridCalmTowardsTarget(class AActor* CybridActor, class AActor* TargetActor);
	bool HasEffectiveAim(class UObject* WorldContextObject, const struct CoreUObject_Vector& MuzzleLocation, class AActor* TargetActor, struct CoreUObject_Vector* EffectiveAimLocation, const struct CoreUObject_Vector& PredictedLocation);
	void GetSpawnBotGroupData(class UObject* WorldContextObject, class UValBotWaveConfig* SpawnConfig, TMap<struct GameplayTags_GameplayTag, struct Valhalla_BotTransformData>* SpawnLocations, bool bTreatNullBotDataAsValid, float SpawnPercentModifier, TArray<struct Valhalla_ValBotWaveSetSpawnData>* OutBotData);
	bool GetSlopeAngleFromActor(class AActor* SourceActor, const struct CoreUObject_Vector& EndOffsetFromActorLocation, float* OutSlopeAngle);
	bool GetSlopeAngle(struct CoreUObject_Vector& TraceStart, struct CoreUObject_Vector& TraceEnd, class AActor* SourceActor, float* OutSlopeAngle);
	bool GetRotationTowardsTarget(class AValCharacter* ValOwner, struct CoreUObject_Rotator* Rotation);
	float GetPerceptionHearingRadius(class AAIController* Controller);
	class ATeamState* GetHazardsTeam(class UObject* WorldContextObject);
	bool GetDoorExitPoints(class UObject* WorldContextObject, TSubclassOf<class AActor> ActorClass, TArray<class AActor*>* OutActors);
	bool GetAlarmSpawnWave(class UObject* WorldContextObject, class AValUtopiaConstructor* OwningConstructor, TArray<class UValBotWaveConfig*>* SpawnWaves);
	class UValBotWaveConfig* GetAlarmSpawnConfig(class UObject* WorldContextObject, class AValUtopiaConstructor* OwningConstructor);
	class ATeamState* GetAITeam(class UObject* WorldContextObject);
	struct CoreUObject_Vector GetActorPredictedHeadLocation(class AActor* Actor, struct CoreUObject_Vector& PredictedLocation);
	struct CoreUObject_Vector GetActorHeadLocation(class AActor* Actor);
	struct CoreUObject_Vector GetAccelerationFromJetpack(class UObject* WorldContextObject, class AActor* TargetActor, float PredictionTime);
	struct CoreUObject_Vector GetAccelerationFromFalling(class UObject* WorldContextObject, class AActor* TargetActor, float PredictionTime);
	void FindNearbyCoverFromSightManager(class UObject* WorldContextObject, const struct CoreUObject_Vector& Location, float Radius, TArray<class AActor*>* OutCoverActors);
	bool DoesPathExistToTarget(class UObject* WorldContextObject, class AActor* SourceActor, class AActor* TargetActor);
	bool DoesPathExistToLocation(class UObject* WorldContextObject, class AActor* SourceActor, struct CoreUObject_Vector& TargetLocation);
	float CalculateBotReactionTimeForTarget(class UValBotData* BotData, class AValCharacter* Target);
	float CalculateBotAccuracyForTarget(class UValBotData* BotData, class AValCharacter* Target);
};

// 0x98 (0x458 - 0x3C0)
// Class Valhalla.ValAIController
class AValAIController : public AAIController
{
public:
	uint8                                        Pad_4530[0x8];                                     // Fixing Size After Last Property  
	bool                                         bIsInBuilding;                                     // 0x3C8(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4532[0x7];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnLoadoutChange;                                   // 0x3D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPredictedLocationSet;                            // 0x3E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFocusChanged;                                    // 0x3F0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBuildingStatusChanged;                           // 0x400(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBlackboardReady;                                 // 0x410(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bHasOverriddenBehaviorTree;                        // 0x420(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4539[0x7];                                     // Fixing Size After Last Property  
	struct Engine_TimerHandle                    RespawnAITimer;                                    // 0x428(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AValReviveBeacon>> RevivableTeammates;                                // 0x430(0x10)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                         bUpdateControlRotation;                            // 0x440(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_453C[0x7];                                     // Fixing Size After Last Property  
	class UValBotData*                           BotConfigData;                                     // 0x448(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TurnRateInDegPerSec;                               // 0x450(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_453E[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValAIController* GetDefaultObj();

	void UpdateReviveBeaconTarget();
	void UpdateBlackboardKeyValueAsVector(class FName Key, const struct CoreUObject_Vector& Value);
	void UpdateBlackboardKeyValueAsObject(class FName Key, class UObject* Value);
	void UpdateBlackboardKeyValueAsEnum(class FName Key, uint8 Value);
	void UpdateBlackboardKeyValueAsBool(class FName Key, bool Value);
	void ToggleTargetingAllAI();
	void ToggleShootingAllAI();
	void TogglePauseAllAI();
	void SetTetherRadius(float Radius);
	void SetIsCurrentlyInBuilding();
	void SetBotLeader(class AValCharacter* Leader);
	void RespawnAIDeferred(float Time, bool bFindRespawnPoint);
	void Respawn(bool bFindRespawnPoint);
	void OnTeamChanged(int32 OldTeamId, int32 NewTeamId);
	void OnReviveBeaconStarted(class AValReviveBeacon* Beacon);
	void OnReviveBeaconDestroyed(class AActor* Actor);
	void OnReviveBeacon(class AValReviveBeacon* Beacon);
	void OnPortalState(enum class EGameObjectiveState PortalState);
	void OnLegendaryArtifact();
	void OnExtractionPodsUpdated();
	void OnCharacterSetupComplete(class AValCharacter* Bot);
	void OnBotLoadoutChanged();
	void OnBotLeaderSet(class AValCharacter* Leader);
	void OnActivePortals();
	void OnActiveLootExtractions();
	bool IsPlayerBotController();
	bool IsInBuilding();
	class AValCharacter* GetValCharacter();
	class UValBotData* GetBotConfigData();
	void EnableControlRotation();
	void EnableAI();
	void DisableControlRotation();
	void DisableAI();
	void DebugDump();
	void AddNewReviveBeacon(class AValReviveBeacon* Beacon);
};

// 0x0 (0x458 - 0x458)
// Class Valhalla.ValAIController_NPC
class AValAIController_NPC : public AValAIController
{
public:

	static class UClass* StaticClass();
	static class AValAIController_NPC* GetDefaultObj();

	void StartBehaviorTree(class AValCharacter* ValChar);
};

// 0xE0 (0x108 - 0x28)
// Class Valhalla.ValAIFSM
class UValAIFSM : public UObject
{
public:
	FMulticastInlineDelegateProperty_            OnStateChangedDel;                                 // 0x28(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct GameplayTags_GameplayTag              Tag;                                               // 0x38(0x8)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                DebugDisplayName;                                  // 0x40(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UValAIFSM_State>           StartingStateClass;                                // 0x50(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              TimeoutTag;                                        // 0x58(0x8)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDebug;                                            // 0x60(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_45A2[0x3];                                     // Fixing Size After Last Property  
	TWeakObjectPtr<class AValCharacter>          Character;                                         // 0x64(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_45A4[0x4];                                     // Fixing Size After Last Property  
	class UValAIFSM_State*                       StartingState;                                     // 0x70(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValAIFSM_State*                       CurrentState;                                      // 0x78(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct GameplayTags_GameplayTag, class UValAIFSM_State*> StateMap;                                          // 0x80(0x50)(Transient, Protected, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTagContainer     ActiveTransitionTags;                              // 0xD0(0x20)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	bool                                         bRespectingMinStateTime;                           // 0xF0(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_45A9[0x3];                                     // Fixing Size After Last Property  
	TWeakObjectPtr<class UValAIFSMComponent>     FSMComp;                                           // 0xF4(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_45AA[0xC];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValAIFSM* GetDefaultObj();

	void StopMachineBP();
	void StopMachine();
	void StateTimerExpired();
	void StartMachineWithStartStateOverride(class AValCharacter* InBot, const struct GameplayTags_GameplayTag& StartStateOverrideTag);
	void StartMachineBP();
	void StartMachine(class AValCharacter* InBot);
	void ReevaluateTransition();
	bool IsStarted();
	bool IsDebug();
	void InitializeBP();
	void Initialize();
	void GotoState(const struct GameplayTags_GameplayTag& NextStateTag, bool bForce);
	struct GameplayTags_GameplayTag GetTag();
	class UValAIFSM_State* GetState(const struct GameplayTags_GameplayTag& InTag);
	void GetDebugDisplayNameBP(class FString* OutDisplayName);
	class AValCharacter* GetCharacter();
	void GenerateActiveTransitionTags();
	void DebugDump();
	void DebugDisplayLayout();
	void CollectChildFSMsAndSelf(TArray<class UValAIFSM*>* OutAllFSMs);
	void CheckForTransition();
};

// 0xD0 (0xF8 - 0x28)
// Class Valhalla.ValAIFSM_State
class UValAIFSM_State : public UObject
{
public:
	struct GameplayTags_GameplayTag              Tag;                                               // 0x28(0x8)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                DebugDisplayName;                                  // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_AIFSM_StateTransitionData> TransitionData;                                    // 0x40(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                        MinTimeInState;                                    // 0x50(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxTimeInState;                                    // 0x54(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeInStateVariance;                               // 0x58(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_45D6[0x4];                                     // Fixing Size After Last Property  
	TSubclassOf<class UValAIFSM>                 ChildFSMClass;                                     // 0x60(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UBehaviorTree>          BehaviorTreeClass;                                 // 0x68(0x28)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UGameplayEffect>>   EffectsToApply;                                    // 0x90(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UValAIFSM*                             OwningFSM;                                         // 0xA0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValAIFSM*                             ChildFSM;                                          // 0xA8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UBehaviorTree>          OverwriteBehaviorTreeClass;                        // 0xB0(0x28)(BlueprintVisible, Transient, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsActive;                                         // 0xD8(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_45DB[0x7];                                     // Fixing Size After Last Property  
	TArray<struct GameplayAbilities_ActiveGameplayEffectHandle> ActiveEffectHandles;                               // 0xE0(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_45DC[0x8];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValAIFSM_State* GetDefaultObj();

	void TimeoutTimerExpired();
	void StartStateBP();
	void ResetStateTimeout(float NewTimeoutTime);
	void OverwriteTimeInStateVariables();
	void OverwritePersonalityBehaviorTree();
	void OverwriteBehaviorTreeBP();
	bool IsActive();
	struct GameplayTags_GameplayTag GetTag();
	float GetMinTimeInState();
	class AValCharacter* GetCharacter();
	void EndStateBP();
	void DebugDump();
	void DebugDisplayLayout();
	void CheckForTransition(struct GameplayTags_GameplayTagContainer& ActiveTransitionTags);
	void AddActiveEffectToRemovalList(struct GameplayAbilities_ActiveGameplayEffectHandle& ActiveHandle);
};

// 0x98 (0x138 - 0xA0)
// Class Valhalla.ValAIFSMComponent
class UValAIFSMComponent : public UActorComponent
{
public:
	TSubclassOf<class UValAIFSM>                 FSMClass;                                          // 0xA0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UValAIAudioCueAgent>       AIAudioCueAgentClass;                              // 0xA8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValAIFSM*                             FSM;                                               // 0xB0(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValAIAudioCueAgent*                   AIAudioCueAgent;                                   // 0xB8(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_ValFSMStateData>      R_CurrentStates;                                   // 0xC0(0x10)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, RepNotify, Protected, NativeAccessSpecifierProtected)
	TMap<struct GameplayTags_GameplayTag, struct GameplayTags_GameplayTag> LastStateMap;                                      // 0xD0(0x50)(Edit, DisableEditOnTemplate, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_ValFSMDelegateData>   DelegateData;                                      // 0x120(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                         bStartRequested;                                   // 0x130(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4609[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValAIFSMComponent* GetDefaultObj();

	void StopMachine();
	void StartMachineWithStartStateOverride(const struct GameplayTags_GameplayTag& StartStateOverrideTag);
	void StartMachine();
	void RegisterStartStateHandler(const struct GameplayTags_GameplayTag& FSM, const struct GameplayTags_GameplayTag& State, FDelegateProperty_ HandlerDelegate);
	void RegisterEndStateHandler(const struct GameplayTags_GameplayTag& FSM, const struct GameplayTags_GameplayTag& State, FDelegateProperty_ HandlerDelegate);
	void OnRep_CurrentStates();
	bool IsStarted();
	void GetAllFSMs(TArray<class UValAIFSM*>* OutAllFSMs);
	class UValAIAudioCueAgent* GetAIAudioCueAgent();
	void DebugDump();
};

// 0x48 (0x208 - 0x1C0)
// Class Valhalla.ValAimAssistComponent
class UValAimAssistComponent : public UUASAimAssistComponent
{
public:
	bool                                         bEnableSnapToTarget;                               // 0x1C0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4613[0x47];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValAimAssistComponent* GetDefaultObj();

	void OnPawnChanged(class APawn* Pawn);
	void OnOwnerEquippedWeaponUpdated(const struct GameplayTags_GameplayTag& EquipSlot);
};

// 0x18 (0x250 - 0x238)
// Class Valhalla.ValAimAssistConfigDataAsset
class UValAimAssistConfigDataAsset : public UUASAimAssistConfigDataAsset
{
public:
	bool                                         bSnapToTargetConfig;                               // 0x238(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4615[0x3];                                     // Fixing Size After Last Property  
	struct Valhalla_ValSnapToTargetConfig        SnapToTargetConfig;                                // 0x23C(0xC)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                         bLeadTargets;                                      // 0x248(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4617[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValAimAssistConfigDataAsset* GetDefaultObj();

};

// 0x0 (0xC0 - 0xC0)
// Class Valhalla.ValAimAssistTargetComponent
class UValAimAssistTargetComponent : public UUASAimAssistTargetComponent
{
public:

	static class UClass* StaticClass();
	static class UValAimAssistTargetComponent* GetDefaultObj();

};

// 0x10 (0xB0 - 0xA0)
// Class Valhalla.ValVisibleToAIComponent
class UValVisibleToAIComponent : public UActorComponent
{
public:
	struct CoreUObject_IntPoint                  CurrentCoordinates;                                // 0xA0(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  VisibilityType;                                    // 0xA8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValVisibleToAIComponent* GetDefaultObj();

	void SetVisibilityType(class FName NewType);
	bool IsVisibleTo(class FName SupportedType);
	class FName GetVisibilityType();
};

// 0x0 (0xA0 - 0xA0)
// Class Valhalla.ValAICoverComponent
class UValAICoverComponent : public UActorComponent
{
public:

	static class UClass* StaticClass();
	static class UValAICoverComponent* GetDefaultObj();

	void OnSightManagerReady(class AValSightManager* PSightManager);
};

// 0x18 (0xB8 - 0xA0)
// Class Valhalla.ValAIVisionObscurerComponent
class UValAIVisionObscurerComponent : public UActorComponent
{
public:
	int32                                        PartitionX0;                                       // 0xA0(0x4)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PartitionY0;                                       // 0xA4(0x4)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PartitionX1;                                       // 0xA8(0x4)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PartitionY1;                                       // 0xAC(0x4)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Radius;                                            // 0xB0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ECollisionChannel                 CollisionChannel;                                  // 0xB4(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4637[0x3];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValAIVisionObscurerComponent* GetDefaultObj();

	void OnSightManagerReady(class AValSightManager* PSightManager);
};

// 0xA0 (0x338 - 0x298)
// Class Valhalla.ValSightManager
class AValSightManager : public AActor
{
public:
	int32                                        MapSizeInTilesX;                                   // 0x298(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MapSizeInTilesY;                                   // 0x29C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_SightSpacePartition>  Partitions;                                        // 0x2A0(0x10)(ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class UValVisibleToAIComponent>> AllTrackedComponents;                              // 0x2B0(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct Valhalla_LevelGrid                    LevelGrid;                                         // 0x2C0(0x50)(Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                        DebugVisualizeRange;                               // 0x310(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DebugVisualizeUpdateDistance;                      // 0x314(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDebugVisualizeCover;                              // 0x318(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_463F[0x7];                                     // Fixing Size After Last Property  
	struct CoreUObject_Vector                    DebugLastVisualizeLocation;                        // 0x320(0x18)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValSightManager* GetDefaultObj();

};

// 0x180 (0x220 - 0xA0)
// Class Valhalla.ValAISightComponent
class UValAISightComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnBotSightGainedDel;                               // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBotSightLostDel;                                 // 0xB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	enum class EVisionShape                      VisionShape;                                       // 0xC0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_467F[0x3];                                     // Fixing Size After Last Property  
	class FName                                  VisionTypeToSee;                                   // 0xC4(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DefaultSightRadius;                                // 0xCC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SightRadius;                                       // 0xD0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LoseSightRadius;                                   // 0xD4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SprintDetectionRadius;                             // 0xD8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PeripheralVisionAngle;                             // 0xDC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        VisionPlaneHalfWidth;                              // 0xE0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        NearClippingRadius;                                // 0xE4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PointOfViewBackwardOffset;                         // 0xE8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SightUpdateTimeInSec;                              // 0xEC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxVisibilityDecayTime;                            // 0xF0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinDistanceChangeForViewCheck;                     // 0xF4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxNoCheckTime;                                    // 0xF8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MaxSimultaneousAsyncTraces;                        // 0xFC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCanSee;                                           // 0x100(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUseCustomViewRotation;                            // 0x101(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4685[0x2];                                     // Fixing Size After Last Property  
	float                                        CustomViewLocationOffset;                          // 0x104(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTagContainer     SightInvisibleTags;                                // 0x108(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                         bDisplayDebug;                                     // 0x128(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4687[0x3];                                     // Fixing Size After Last Property  
	int32                                        BlindnessStacks;                                   // 0x12C(0x4)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4688[0xF0];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValAISightComponent* GetDefaultObj();

	bool UpdateSightRadius(float NewSightRadius);
	bool UpdatePeripheralVisionAngle(float NewPeripheralVisionAngleDegrees);
	bool UpdateLoseSightRadius(float NewLoseSightRadius);
	void SightCheckHandler(class AActor* Target, TArray<TWeakObjectPtr<class UValAIVisionObscurerComponent>>& VisionObscurers);
	bool ShouldSee();
	void SetVisionType(class FName NewType);
	void SetCustomViewLocationOffset(float Value);
	void SetCanSee(bool bInCanSee);
	void RemoveBlindnessStack();
	void OnViewedActorTagChanged(const struct GameplayTags_GameplayTag& InTag, int32 NewCount);
	void OnViewedActorDied(float TimeToRespawn, class AValCharacter* Pawn);
	bool IsBlinded();
	class FName GetVisionType();
	float GetPeripheralVisionAngle();
	float GetNearClippingRadius();
	float GetMinRange();
	float GetMaxRange();
	float GetLoseSightRadius();
	float GetDefaultSightRadius();
	void DebugDump();
	void ClearGameplayTagEvents(class AActor* LostActor);
	void BindGameplayTagEvents(class AActor* ViewedActor);
	void AddBlindnessStack();
};

// 0x88 (0xB0 - 0x28)
// Class Valhalla.ValSquad
class UValSquad : public UObject
{
public:
	FMulticastInlineDelegateProperty_            OnSquadReachedWaypoint;                            // 0x28(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_469F[0x10];                                    // Fixing Size After Last Property  
	float                                        TooCloseToLastWaypointDistance;                    // 0x48(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TooCloseToFogDistance;                             // 0x4C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDebug;                                            // 0x50(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bRecord;                                           // 0x51(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_46A0[0x2];                                     // Fixing Size After Last Property  
	float                                        RecordRate;                                        // 0x54(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AValCharacter>>  Members;                                           // 0x58(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class AValDungeonGenerator*                  DungeonLayout;                                     // 0x68(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct CoreUObject_IntPoint>          VisitedQuadrants;                                  // 0x70(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<struct CoreUObject_Vector>            LocationRecord;                                    // 0x80(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	struct CoreUObject_Vector                    LastLocationRecord;                                // 0x90(0x18)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LastRecordTime;                                    // 0xA8(0x4)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_46A5[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValSquad* GetDefaultObj();

	void UpdateForMember(class AValCharacter* InMember);
	void ToggleRecord(bool bOn);
	class AValCharacter* GetLeader();
	void DumpLocationRecord(TArray<struct CoreUObject_Vector>* OutLocationCache);
	bool ChooseNextWaypoint(class AValCharacter* InMember, bool bMeanderToCenter, struct CoreUObject_Vector* OutWaypoint);
};

// 0x28 (0x58 - 0x30)
// Class Valhalla.ValBotWaveConfig
class UValBotWaveConfig : public UDataAsset
{
public:
	TArray<struct Valhalla_ValBotGroupConfig>    SpawnSet;                                          // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        PreSpawnDelayInSec;                                // 0x40(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PostSpawnDelayInSec;                               // 0x44(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        TotalSpawnPoints;                                  // 0x48(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        TotalSpawnPointsSolos;                             // 0x4C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseGroupNumber;                                   // 0x50(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_46B1[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValBotWaveConfig* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValAkRoomObject
class IValAkRoomObject : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IValAkRoomObject* GetDefaultObj();

	void SetAssociatedAkRoom(class AValAkRoom* Room);
	struct CoreUObject_Vector AkGetLocation();
	void AkEnable();
	void AkDisable();
};

// 0x0 (0x38 - 0x38)
// Class Valhalla.ValAnimNotifyInitRagdoll
class UValAnimNotifyInitRagdoll : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UValAnimNotifyInitRagdoll* GetDefaultObj();

};

// 0x78 (0x310 - 0x298)
// Class Valhalla.ValArtifactDeposit
class AValArtifactDeposit : public AActor
{
public:
	uint8                                        Pad_46E3[0x8];                                     // Fixing Size After Last Property  
	class USceneComponent*                       SceneComponent;                                    // 0x2A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                      InteractCollisionComp;                             // 0x2A8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                  InteractText;                                      // 0x2B0(0x18)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValCharacter>          CachedInitiator;                                   // 0x2C8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_PendingItem>          R_DepositedItems;                                  // 0x2D0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, RepNotify, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_46E4[0x18];                                    // Fixing Size After Last Property  
	TArray<class AValCharacter*>                 CharactersThatCanInteract;                         // 0x2F8(0x10)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                        CreditCost;                                        // 0x308(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_46E5[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValArtifactDeposit* GetDefaultObj();

	void OnRep_DepositedItems();
	void OnDepositComplete(TArray<struct Valhalla_PendingItem>& ItemsDeposited);
	void Interact(class AValCharacter* Initiator);
	enum class EInteractType GetInteractType();
	class FText GetInteractText();
	class UPrimitiveComponent* GetInteractComponent();
	bool CanInteract(class AValCharacter* Initiator);
};

// 0x0 (0xA0 - 0xA0)
// Class Valhalla.ValClassComponentBase
class UValClassComponentBase : public UActorComponent
{
public:

	static class UClass* StaticClass();
	static class UValClassComponentBase* GetDefaultObj();

	bool HasModsForTag(const struct GameplayTags_GameplayTag& TagToCheck);
	class AValCharacter* GetValCharacter();
	void GetPassivePropertyModValues(const struct GameplayTags_GameplayTag& PassiveIdTag, const struct GameplayTags_GameplayTag& PropertyTag, TArray<float>* OutValues);
	void CalcPropertyModifiers();
	void ApplyDamageResistanceModifier(float& OutPercentModifier, float& OutFlatModifier, float& OutShieldModifier, float Damage, struct GameplayAbilities_GameplayEffectContextHandle& DamageContext);
	void ApplyDamageOutputModifier(float& OutPercentModifier, float& OutFlatModifier, float Damage, struct GameplayAbilities_GameplayEffectContextHandle& DamageContext);
};

// 0x0 (0xA0 - 0xA0)
// Class Valhalla.ValAssaultClassComponent
class UValAssaultClassComponent : public UValClassComponentBase
{
public:

	static class UClass* StaticClass();
	static class UValAssaultClassComponent* GetDefaultObj();

};

// 0x0 (0x570 - 0x570)
// Class Valhalla.ValAssetManager
class UValAssetManager : public URH_AssetManager
{
public:

	static class UClass* StaticClass();
	static class UValAssetManager* GetDefaultObj();

};

// 0x398 (0x458 - 0xC0)
// Class Valhalla.ValEquipmentAsset
class UValEquipmentAsset : public URH_ItemAsset
{
public:
	struct GameplayTags_GameplayTag              EquipSlot;                                         // 0xC0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayAbility>          AbilityClass;                                      // 0xC8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanBeStashed;                                     // 0xD0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_471F[0x7];                                     // Fixing Size After Last Property  
	class UDataAsset*                            Mesh;                                              // 0xD8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                    Material;                                          // 0xE0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Valhalla_EquipmentModParamsList       StaticModParams;                                   // 0xE8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct Valhalla_EquipmentModParamsList       AvailableModParams;                                // 0xF8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                  Lore;                                              // 0x108(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct GameplayTags_GameplayTag              AppearanceSlot;                                    // 0x120(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERarity                           Rarity;                                            // 0x128(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4720[0x7];                                     // Fixing Size After Last Property  
	TSoftObjectPtr<class UTexture2D>             InventoryIcon;                                     // 0x130(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             TooltipIcon;                                       // 0x158(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>            PickupMesh;                                        // 0x180(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PreviewScale;                                      // 0x1A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4722[0x4];                                     // Fixing Size After Last Property  
	TSoftObjectPtr<class UAnimSequence>          PreviewAnimation;                                  // 0x1B0(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         GenerateRarity;                                    // 0x1D8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         GenerateOffensivePower;                            // 0x1D9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         GenerateDefensivePower;                            // 0x1DA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4723[0x5];                                     // Fixing Size After Last Property  
	TMap<enum class ERarity, struct Valhalla_EquipmentModParamsList> StaticRarityModParams;                             // 0x1E0(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<enum class ERarity, struct Valhalla_EquipmentModParamsList> AvailableRarityModParams;                          // 0x230(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<enum class ERarity, struct Valhalla_EquipmentModParamsList> SpecialtyRarityModParams;                          // 0x280(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<enum class ERarity, struct Valhalla_EquipmentAssetParams> ChildAssetParams;                                  // 0x2D0(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                AvailableStackSizes;                               // 0x320(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_EquipmentPassiveEffect> PassiveEffectInfo;                                 // 0x330(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<enum class EPlayerProperty, int32>      PlayerPropertyUnlockRequirements;                  // 0x340(0x50)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	enum class EAbilityType                      AbilityType;                                       // 0x390(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4725[0x7];                                     // Fixing Size After Last Property  
	TArray<TSoftObjectPtr<class UDataAsset>>     ChildAssets;                                       // 0x398(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<struct GameplayTags_GameplayTag, struct Valhalla_ValAbilityPropertyModContainer> AbilityPropertyMods;                               // 0x3A8(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                        BuyPrice;                                          // 0x3F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SellPrice;                                         // 0x3FC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bOnlyBuyInBundles;                                 // 0x400(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4727[0x7];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_VendorItemBundle>     AvailableBundles;                                  // 0x408(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                        PriceMultipliersPerRarity[0x8];                    // 0x418(0x20)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_CraftingRecipeComponent> CraftingRecipe;                                    // 0x438(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_CraftingRecipeComponent> SalvageRecipe;                                     // 0x448(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValEquipmentAsset* GetDefaultObj();

	bool OnlyBuyInBundles();
	int32 GetBuyPrice(enum class ERarity InRarity);
	void GetAvailableBundles(TArray<struct Valhalla_VendorItemBundle>* OutAvailableBundles, enum class ERarity InRarity);
};

// 0x8 (0x460 - 0x458)
// Class Valhalla.ValItemAsset
class UValItemAsset : public UValEquipmentAsset
{
public:
	float                                        StackWeight;                                       // 0x458(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_472D[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValItemAsset* GetDefaultObj();

};

// 0x78 (0x138 - 0xC0)
// Class Valhalla.ValEquipmentModAsset
class UValEquipmentModAsset : public URH_ItemAsset
{
public:
	float                                        AbilityValue;                                      // 0xC0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_472E[0x4];                                     // Fixing Size After Last Property  
	TSubclassOf<class UGameplayAbility>          AbilityClass;                                      // 0xC8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_EquipmentEffect>      AbilityEffects;                                    // 0xD0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<struct GameplayTags_GameplayTag, struct Valhalla_ValAbilityPropertyModContainer> AbilityPropertyMods;                               // 0xE0(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	enum class EMagnitudeValueType               ValueType;                                         // 0x130(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4731[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValEquipmentModAsset* GetDefaultObj();

};

// 0x0 (0x138 - 0x138)
// Class Valhalla.ValItemModAsset
class UValItemModAsset : public UValEquipmentModAsset
{
public:

	static class UClass* StaticClass();
	static class UValItemModAsset* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Valhalla.ValActivityPrerequisite
class UValActivityPrerequisite : public UDataAsset
{
public:

	static class UClass* StaticClass();
	static class UValActivityPrerequisite* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Valhalla.ValActivityRequirement
class UValActivityRequirement : public UDataAsset
{
public:

	static class UClass* StaticClass();
	static class UValActivityRequirement* GetDefaultObj();

};

// 0x120 (0x3B8 - 0x298)
// Class Valhalla.ValAttributeActorBase
class AValAttributeActorBase : public AActor
{
public:
	uint8                                        Pad_4754[0x30];                                    // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnHealthChanged;                                   // 0x2C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHealthMaxChanged;                                // 0x2D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHealthPercentChanged;                            // 0x2E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAttributesInitialized;                           // 0x2F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDied;                                            // 0x308(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UValAbilitySystemComponent*            AbilitySystemComponent;                            // 0x318(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValAttributeSet*                      Attributes;                                        // 0x320(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>           DefaultAttributeEffect;                            // 0x328(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UValGameplayAbility>> DefaultAbilities;                                  // 0x330(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct CoreUObject_Vector                    DefaultTargetOffset;                               // 0x340(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValPlayerState*                       MostRecentDamager;                                 // 0x358(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAlwaysDamageable;                                 // 0x360(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDoesNotDie;                                       // 0x361(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAwardOnDeath;                                     // 0x362(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4759[0x5];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnDamagedDel;                                      // 0x368(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bCanBeHealedByRepairTool;                          // 0x378(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_475B[0x3];                                     // Fixing Size After Last Property  
	int32                                        R_TeamId;                                          // 0x37C(0x4)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<FDelegateProperty_>                   TeamChangedDelegates;                              // 0x380(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	bool                                         bShowTeamColor;                                    // 0x390(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EAttributeActorTeamMode           TeamMode;                                          // 0x391(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_475E[0x2];                                     // Fixing Size After Last Property  
	struct CoreUObject_LinearColor               FriendlyTeamColor;                                 // 0x394(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_LinearColor               EnemyTeamColor;                                    // 0x3A4(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4760[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValAttributeActorBase* GetDefaultObj();

	void UpdateTeamColor();
	void SetHealth(float Value);
	void OnRep_TeamId(int32 OldTeamId);
	void OnDamaged(const struct Valhalla_DamageData& DamageData);
	bool IsAlive();
	void GiveDefaultAbilities();
	int32 GetTemporaryShields();
	int32 GetTemporaryHealth();
	int32 GetShieldsMax();
	int32 GetShields();
	float GetShieldPercent();
	float GetHealthPercent();
	int32 GetHealthMax();
	int32 GetHealth();
	class UValAttributeSet* GetAttributes();
	void EventTornOff();
	void EventDied();
	void Die();
	bool CanBeHealed();
	bool CanBeDamaged();
	bool AlwaysDamageable();
};

// 0x18 (0x3D0 - 0x3B8)
// Class Valhalla.ValAttributeActor
class AValAttributeActor : public AValAttributeActorBase
{
public:
	class USkeletalMeshComponent*                DefaultMesh;                                       // 0x3B8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCapsuleComponent*                     CapsuleComponent;                                  // 0x3C0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIgnoreCollisionWithTeammates;                     // 0x3C8(0x1)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4772[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValAttributeActor* GetDefaultObj();

	void UpdateCollisionMask();
	class USkeletalMeshComponent* GetMesh();
	class UCapsuleComponent* GetCapsuleComponent();
};

// 0x8 (0x3C0 - 0x3B8)
// Class Valhalla.ValAttributeActor_StaticMesh
class AValAttributeActor_StaticMesh : public AValAttributeActorBase
{
public:
	class UStaticMeshComponent*                  DefaultMesh;                                       // 0x3B8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValAttributeActor_StaticMesh* GetDefaultObj();

};

// 0x960 (0x990 - 0x30)
// Class Valhalla.ValAttributeSet
class UValAttributeSet : public UAttributeSet
{
public:
	struct GameplayAbilities_GameplayAttributeData Health;                                            // 0x30(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData HealthMax;                                         // 0x40(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData TemporaryHealth;                                   // 0x50(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData Shield;                                            // 0x60(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ShieldMax;                                         // 0x70(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData TemporaryShield;                                   // 0x80(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData HealthRegenAmount;                                 // 0x90(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData HealReductionModifier;                             // 0xA0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ShieldRegenAmount;                                 // 0xB0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData BlockTime;                                         // 0xC0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData AttackSpreadReductionModifier;                     // 0xD0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData AttackSpread;                                      // 0xE0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData AimingSpread;                                      // 0xF0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData MovingSpread;                                      // 0x100(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData CrouchingSpread;                                   // 0x110(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData FallingSpread;                                     // 0x120(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData AttackSpreadIncrement;                             // 0x130(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData AttackSpreadMax;                                   // 0x140(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData AttackSpreadRecovery;                              // 0x150(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData AttackDamage;                                      // 0x160(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData AttackDamagePerEnergy;                             // 0x170(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData GlobalDamageMultiplier;                            // 0x180(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData GlobalPrimaryDamageMultiplier;                     // 0x190(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData GlobalSecondaryDamageMultiplier;                   // 0x1A0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData GlobalMeleeDamageMultiplier;                       // 0x1B0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData GlobalAOEDamageMultiplier;                         // 0x1C0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData GlobalStaggerMultiplier;                           // 0x1D0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ItemRarityDamageMultiplier;                        // 0x1E0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ItemRarityMitigationMultiplier;                    // 0x1F0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData AOEDamageMitigationModifier;                       // 0x200(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData RangedDamageMitigationModifier;                    // 0x210(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData MeleeDamageMitigationModifier;                     // 0x220(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData HeadshotDamageMitigationMultiplier;                // 0x230(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ShieldPenetrationMitigationMultiplier;             // 0x240(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData TrapDamageMitigationMultiplier;                    // 0x250(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData CybridDamageMitigationModifier;                    // 0x260(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData SelfDamageMitigationModifier;                      // 0x270(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData AttackRate;                                        // 0x280(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData PrefireTime;                                       // 0x290(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData TimeBetweenBursts;                                 // 0x2A0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ReloadSpeed;                                       // 0x2B0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ReloadMinimum;                                     // 0x2C0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData TimeUntilPassiveReload;                            // 0x2D0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ADSTime;                                           // 0x2E0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ADSTimeMultiplier;                                 // 0x2F0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ReloadTimeMultiplier;                              // 0x300(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData DrawSpeedMultiplier;                               // 0x310(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData HolsterSpeedMultiplier;                            // 0x320(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData BurstShots;                                        // 0x330(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ShotsPerFire;                                      // 0x340(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ThrownSpeedMultiplier;                             // 0x350(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ShieldPenetration;                                 // 0x360(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData MovementSpeed;                                     // 0x370(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData BackwardMovementSpeedReductionMultiplier;          // 0x380(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData HitDebuffGroundSpeedMultiplier;                    // 0x390(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData CharacterMass;                                     // 0x3A0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData SkiInitialImpulse;                                 // 0x3B0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData EnergyRegenRate;                                   // 0x3C0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData EnergyMax;                                         // 0x3D0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData AirControl;                                        // 0x3E0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData StimSpeedMultiplier;                               // 0x3F0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData MaxGroundSpeedMultiplier;                          // 0x400(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData SprintSpeedMultiplier;                             // 0x410(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData SlideSpeedMultiplier;                              // 0x420(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData JumpHeightMultiplier;                              // 0x430(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData CharacterMassModifier;                             // 0x440(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ClipAmmoMax;                                       // 0x450(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ReserveAmmoMax;                                    // 0x460(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData StartingReserveAmmo;                               // 0x470(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData StartingClipAmmo;                                  // 0x480(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData PrimaryAmmoPickupMultiplier;                       // 0x490(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData SpecialtyAmmoPickupMultiplier;                     // 0x4A0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData AmmoUsedPerShot;                                   // 0x4B0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ScrapPickupMultiplier;                             // 0x4C0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData LootUpgradeChance;                                 // 0x4D0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ProjectileSpeedMultiplier;                         // 0x4E0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData JetpackVerticalBoost;                              // 0x4F0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData JetpackEnergyConsumptionRate;                      // 0x500(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData StealthEnergyConsumptionRate;                      // 0x510(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData HeavyShieldEnergyConsumptionRate;                  // 0x520(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData MediumShieldEnergyConsumptionRate;                 // 0x530(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData JetpackOverburnDuration;                           // 0x540(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData AimingMaxSpeedMultiplier;                          // 0x550(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData HeadshotDamageModifier;                            // 0x560(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData DirectHitDamageModifier;                           // 0x570(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData CybridDamageModifier;                              // 0x580(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData BackstabDamageModifier;                            // 0x590(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ShieldBroke;                                       // 0x5A0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData FlinchPitchIntensity;                              // 0x5B0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData FlinchRollIntensity;                               // 0x5C0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ShieldDamageOutputModifier;                        // 0x5D0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData KickbackModifier;                                  // 0x5E0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData FalloffModifier;                                   // 0x5F0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ChargeTimeModifier;                                // 0x600(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData AimSwayModifier;                                   // 0x610(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData AimFOVModifier;                                    // 0x620(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData AOEModifier;                                       // 0x630(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData AbilityAOEModifier;                                // 0x640(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData EMPStunModifier;                                   // 0x650(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData AbilityDamageMultiplier;                           // 0x660(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData GrenadeDamageMultiplier;                           // 0x670(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData FlagHolderDamageMultiplier;                        // 0x680(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData NonPlayerDamageModifier;                           // 0x690(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData SoundDetectableRange;                              // 0x6A0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData GlobalMitigationModifier;                          // 0x6B0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData OverallDamageModifier;                             // 0x6C0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData HealthPackMax;                                     // 0x6D0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData HealthPackModifier;                                // 0x6E0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ShieldPackModifier;                                // 0x6F0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ShieldPackMax;                                     // 0x700(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData QuickMeleeDamage;                                  // 0x710(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData StaggerImpact;                                     // 0x720(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData StaggerResistance;                                 // 0x730(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData DetectionRadius;                                   // 0x740(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData PendingBoostMax;                                   // 0x750(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData PrimaryFireInputBufferTime;                        // 0x760(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData FabricatorCostMultiplier;                          // 0x770(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData InteractTimeMultiplier;                            // 0x780(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData DoorInteractTimeMultiplier;                        // 0x790(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ItemEquipTimeMultiplier;                           // 0x7A0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData OxygenMaximum;                                     // 0x7B0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData OxygenConsumeRate;                                 // 0x7C0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData OxygenConsumeRateMultiplier;                       // 0x7D0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData MarkedDamageModifier;                              // 0x7E0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData AIAcquireTargetTime;                               // 0x7F0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData PerceptionSightDistance;                           // 0x800(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData PerceptionHearingDistance;                         // 0x810(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData PerceptionPeripheralVisionHalfAngle;               // 0x820(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData PerceptionLoseSightDistance;                       // 0x830(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData CybridBeamDistance;                                // 0x840(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData CybridAlertStateTime;                              // 0x850(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData CybridTetherStateTime;                             // 0x860(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData CybridDriveByDistance;                             // 0x870(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData CybridLatchDuration;                               // 0x880(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData CybridCriticalHealthThresholdPct;                  // 0x890(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData TauntAggroRange;                                   // 0x8A0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData HealthPackUseSpeedModifier;                        // 0x8B0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ShieldPackUseSpeedModifier;                        // 0x8C0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData DamageBoostUseSpeedModifier;                       // 0x8D0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData FlashlightIntensityModifier;                       // 0x8E0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData FlashlightRangeModifier;                           // 0x8F0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData StealthDurationModifier;                           // 0x900(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData PickupRangeMultiplier;                             // 0x910(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData PortalInteractTimeMultiplier;                      // 0x920(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData ChestInteractTimeMultiplier;                       // 0x930(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData RespawnPointInteractTimeMultiplier;                // 0x940(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData UniversalAbilityCooldownModifier;                  // 0x950(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData GlobalCybridDamageModifier;                        // 0x960(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData IncomingKnockbackModifier;                         // 0x970(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct GameplayAbilities_GameplayAttributeData DamageToEnergyConversionRate;                      // 0x980(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValAttributeSet* GetDefaultObj();

	void OnRep_UniversalAbilityCooldownModifier(struct GameplayAbilities_GameplayAttributeData& OldUniversalAbilityCooldownModifier);
	void OnRep_TrapDamageMitigationMultiplier(struct GameplayAbilities_GameplayAttributeData& OldTrapDamageMitigationMultiplier);
	void OnRep_TimeUntilPassiveReload(struct GameplayAbilities_GameplayAttributeData& OldTimeUntilPassiveReload);
	void OnRep_TimeBetweenBursts(struct GameplayAbilities_GameplayAttributeData& OldTimeBetweenBursts);
	void OnRep_ThrownSpeedMultiplier(struct GameplayAbilities_GameplayAttributeData& OldThrowSpeed);
	void OnRep_TemporaryShield(struct GameplayAbilities_GameplayAttributeData& OldTemporaryShield);
	void OnRep_TemporaryHealth(struct GameplayAbilities_GameplayAttributeData& OldTemporaryHealth);
	void OnRep_TauntAggroRange(struct GameplayAbilities_GameplayAttributeData& OldTauntAggroRange);
	void OnRep_StimSpeedMultiplier(struct GameplayAbilities_GameplayAttributeData& OldStimSpeedMultiplier);
	void OnRep_StealthEnergyConsumptionRate(struct GameplayAbilities_GameplayAttributeData& OldStealthEnergyConsumptionRate);
	void OnRep_StealthDurationModifier(struct GameplayAbilities_GameplayAttributeData& OldStealthDurationModifier);
	void OnRep_StartingReserveAmmo(struct GameplayAbilities_GameplayAttributeData& OldStartingReserveAmmo);
	void OnRep_StartingClipAmmo(struct GameplayAbilities_GameplayAttributeData& OldStartingClipAmmo);
	void OnRep_StaggerResistance(struct GameplayAbilities_GameplayAttributeData& OldStaggerResistance);
	void OnRep_StaggerImpact(struct GameplayAbilities_GameplayAttributeData& OldStaggerImpact);
	void OnRep_SprintSpeedMultiplier(struct GameplayAbilities_GameplayAttributeData& OldSprintSpeedMultiplier);
	void OnRep_SpecialtyAmmoPickupMultiplier(struct GameplayAbilities_GameplayAttributeData& OldSpecialtyAmmoPickupMultiplier);
	void OnRep_SoundDetectableRange(struct GameplayAbilities_GameplayAttributeData& OldSoundDetectableRange);
	void OnRep_SlideSpeedMultiplier(struct GameplayAbilities_GameplayAttributeData& OldSlideSpeedMultiplier);
	void OnRep_SkiInitialImpulse(struct GameplayAbilities_GameplayAttributeData& OldSkiInitialImpulse);
	void OnRep_ShotsPerFire(struct GameplayAbilities_GameplayAttributeData& OldShotsPerFire);
	void OnRep_ShieldRegenAmount(struct GameplayAbilities_GameplayAttributeData& OldShieldRegenAmount);
	void OnRep_ShieldPenetrationMitigationMultiplier(struct GameplayAbilities_GameplayAttributeData& OldShieldPenetrationMitigationMultiplier);
	void OnRep_ShieldPenetration(struct GameplayAbilities_GameplayAttributeData& OldShieldPenetrationMultiplier);
	void OnRep_ShieldPackUseSpeedModifier(struct GameplayAbilities_GameplayAttributeData& OldShieldPackUseSpeedModifier);
	void OnRep_ShieldPackModifier(struct GameplayAbilities_GameplayAttributeData& OldShieldPackModifier);
	void OnRep_ShieldPackMax(struct GameplayAbilities_GameplayAttributeData& OldShieldPackMax);
	void OnRep_ShieldMax(struct GameplayAbilities_GameplayAttributeData& OldShieldMax);
	void OnRep_ShieldDamageOutputModifier(struct GameplayAbilities_GameplayAttributeData& OldShieldDamageOutputModifier);
	void OnRep_ShieldBroke(struct GameplayAbilities_GameplayAttributeData& OldShieldBroke);
	void OnRep_Shield(struct GameplayAbilities_GameplayAttributeData& OldShield);
	void OnRep_SelfDamageMitigationModifier(struct GameplayAbilities_GameplayAttributeData& OldSelfDamageMitigationModifier);
	void OnRep_ScrapPickupMultiplier(struct GameplayAbilities_GameplayAttributeData& OldScrapPickupMultiplier);
	void OnRep_RespawnPointInteractTimeMultiplier(struct GameplayAbilities_GameplayAttributeData& OldRespawnPointInteractTimeMultiplier);
	void OnRep_ReserveAmmoMax(struct GameplayAbilities_GameplayAttributeData& OldReserveAmmoMax);
	void OnRep_ReloadTimeMultiplier(struct GameplayAbilities_GameplayAttributeData& OldReloadTimeMultiplier);
	void OnRep_ReloadSpeed(struct GameplayAbilities_GameplayAttributeData& OldReloadSpeed);
	void OnRep_ReloadMinimum(struct GameplayAbilities_GameplayAttributeData& OldReloadMinimum);
	void OnRep_RangedDamageMitigationModifier(struct GameplayAbilities_GameplayAttributeData& OldRangedDamageMitigationModifier);
	void OnRep_QuickMeleeDamage(struct GameplayAbilities_GameplayAttributeData& OldQuickMeleeDamage);
	void OnRep_ProjectileSpeedMultiplier(struct GameplayAbilities_GameplayAttributeData& OldProjectileSpeedMultiplier);
	void OnRep_PrimaryFireInputBufferTime(struct GameplayAbilities_GameplayAttributeData& OldPrimaryFireInputBufferTime);
	void OnRep_PrimaryAmmoPickupMultiplier(struct GameplayAbilities_GameplayAttributeData& OldPrimaryAmmoPickupMultiplier);
	void OnRep_PrefireTime(struct GameplayAbilities_GameplayAttributeData& OldPrefireTime);
	void OnRep_PortalInteractTimeMultiplier(struct GameplayAbilities_GameplayAttributeData& OldInteractTimeMultiplier);
	void OnRep_PickupRangeMultiplier(struct GameplayAbilities_GameplayAttributeData& OldPickupRangeMultiplier);
	void OnRep_PerceptionSightDistance(struct GameplayAbilities_GameplayAttributeData& OldPerceptionSightDistance);
	void OnRep_PerceptionPeripheralVisionHalfAngle(struct GameplayAbilities_GameplayAttributeData& OldPerceptionPeripheralVisionHalfAngle);
	void OnRep_PerceptionLoseSightDistance(struct GameplayAbilities_GameplayAttributeData& OldPerceptionLoseSightDistance);
	void OnRep_PerceptionHearingDistance(struct GameplayAbilities_GameplayAttributeData& OldPerceptionHearingDistance);
	void OnRep_PendingBoostMax(struct GameplayAbilities_GameplayAttributeData& OldPendingBoostMax);
	void OnRep_OxygenMaximum(struct GameplayAbilities_GameplayAttributeData& OldOxygenMaximum);
	void OnRep_OxygenConsumeRateMultiplier(struct GameplayAbilities_GameplayAttributeData& OldOxygenConsumeRateMultiplier);
	void OnRep_OxygenConsumeRate(struct GameplayAbilities_GameplayAttributeData& OldOxygenConsumeRate);
	void OnRep_OverallDamageModifier(struct GameplayAbilities_GameplayAttributeData& OldOverallDamageModifier);
	void OnRep_NonPlayerDamageModifier(struct GameplayAbilities_GameplayAttributeData& OldNonPlayerDamageModifier);
	void OnRep_MovingSpread(struct GameplayAbilities_GameplayAttributeData& OldMovingSpread);
	void OnRep_MovementSpeed(struct GameplayAbilities_GameplayAttributeData& OldMovementSpeed);
	void OnRep_MeleeDamageMitigationModifier(struct GameplayAbilities_GameplayAttributeData& OldMeleeDamageMitigationModifier);
	void OnRep_MediumShieldEnergyConsumptionRate(struct GameplayAbilities_GameplayAttributeData& OldMediumShieldEnergyConsumptionRate);
	void OnRep_MaxGroundSpeedMultiplier(struct GameplayAbilities_GameplayAttributeData& OldMaxGroundSpeedMultiplier);
	void OnRep_MarkedDamageModifier(struct GameplayAbilities_GameplayAttributeData& OldMarkedDamageModifier);
	void OnRep_LootUpgradeChance(struct GameplayAbilities_GameplayAttributeData& OldLootUpgradeChance);
	void OnRep_KickbackModifier(struct GameplayAbilities_GameplayAttributeData& OldKickbackModifier);
	void OnRep_JumpHeightMultiplier(struct GameplayAbilities_GameplayAttributeData& OldJumpHeightMultiplier);
	void OnRep_JetpackVerticalBoost(struct GameplayAbilities_GameplayAttributeData& OldJetpackVerticalBoost);
	void OnRep_JetpackOverburnDuration(struct GameplayAbilities_GameplayAttributeData& OldJetpackOverburnDuration);
	void OnRep_JetpackEnergyConsumptionRate(struct GameplayAbilities_GameplayAttributeData& OldJetpackEnergyConsumptionRate);
	void OnRep_ItemRarityMitigationMultiplier(struct GameplayAbilities_GameplayAttributeData& OldItemRarityMitigationMultiplier);
	void OnRep_ItemRarityDamageMultiplier(struct GameplayAbilities_GameplayAttributeData& OldItemRarityDamageMultiplier);
	void OnRep_ItemEquipTimeMultiplier(struct GameplayAbilities_GameplayAttributeData& OldItemEquipTimeMultiplier);
	void OnRep_InteractTimeMultiplier(struct GameplayAbilities_GameplayAttributeData& OldInteractTimeMultiplier);
	void OnRep_IncomingKnockbackModifier(struct GameplayAbilities_GameplayAttributeData& OldIncomingKnockbackModifier);
	void OnRep_HolsterSpeedMultiplier(struct GameplayAbilities_GameplayAttributeData& OldHolsterSpeedMultiplier);
	void OnRep_HitDebuffGroundSpeedMultiplier(struct GameplayAbilities_GameplayAttributeData& OldHitDebuffGroundSpeedMultiplier);
	void OnRep_HeavyShieldEnergyConsumptionRate(struct GameplayAbilities_GameplayAttributeData& OldHeavyShieldEnergyConsumptionRate);
	void OnRep_HealthRegenAmount(struct GameplayAbilities_GameplayAttributeData& OldHealthRegenAmount);
	void OnRep_HealthPackUseSpeedModifier(struct GameplayAbilities_GameplayAttributeData& OldHealthPackUseSpeedModifier);
	void OnRep_HealthPackModifier(struct GameplayAbilities_GameplayAttributeData& OldHealthPackModifier);
	void OnRep_HealthPackMax(struct GameplayAbilities_GameplayAttributeData& OldHealthPackMax);
	void OnRep_HealthMax(struct GameplayAbilities_GameplayAttributeData& OldHealthMax);
	void OnRep_Health(struct GameplayAbilities_GameplayAttributeData& OldHealth);
	void OnRep_HealReductionModifier(struct GameplayAbilities_GameplayAttributeData& OldHealReductionModifier);
	void OnRep_HeadshotDamageModifier(struct GameplayAbilities_GameplayAttributeData& OldHeadshotDamageModifier);
	void OnRep_HeadshotDamageMitigationMultiplier(struct GameplayAbilities_GameplayAttributeData& OldHeadshotDamageMitigationMultiplier);
	void OnRep_GrenadeDamageMultiplier(struct GameplayAbilities_GameplayAttributeData& OldGrenadeDamageMultiplier);
	void OnRep_GlobalStaggerMultiplier(struct GameplayAbilities_GameplayAttributeData& OldGlobalStaggerMultiplier);
	void OnRep_GlobalSecondaryDamageMultiplier(struct GameplayAbilities_GameplayAttributeData& OldGlobalSecondaryDamageMultiplier);
	void OnRep_GlobalPrimaryDamageMultiplier(struct GameplayAbilities_GameplayAttributeData& OldGlobalPrimaryDamageMultiplier);
	void OnRep_GlobalMitigationModifier(struct GameplayAbilities_GameplayAttributeData& OldGlobalMitigationModifier);
	void OnRep_GlobalMeleeDamageMultiplier(struct GameplayAbilities_GameplayAttributeData& OldGlobalMeleeDamageMultiplier);
	void OnRep_GlobalDamageMultiplier(struct GameplayAbilities_GameplayAttributeData& OldGlobalDamageMultiplier);
	void OnRep_GlobalCybridDamageModifier(struct GameplayAbilities_GameplayAttributeData& OldGlobalCybridDamageModifier);
	void OnRep_GlobalAOEDamageMultiplier(struct GameplayAbilities_GameplayAttributeData& OldGlobalAOEDamageMultiplier);
	void OnRep_FlinchRollIntensity(struct GameplayAbilities_GameplayAttributeData& OldFlinchRollIntensity);
	void OnRep_FlinchPitchIntensity(struct GameplayAbilities_GameplayAttributeData& OldFlinchPitchIntensity);
	void OnRep_FlashlightRangeModifier(struct GameplayAbilities_GameplayAttributeData& OldFlashlightRangeModifier);
	void OnRep_FlashlightIntensityModifier(struct GameplayAbilities_GameplayAttributeData& OldFlashlightIntensityModifier);
	void OnRep_FlagHolderDamageMultiplier(struct GameplayAbilities_GameplayAttributeData& OldFlagHolderDamageMultiplier);
	void OnRep_FalloffModifier(struct GameplayAbilities_GameplayAttributeData& OldFalloffModifier);
	void OnRep_FallingSpread(struct GameplayAbilities_GameplayAttributeData& OldFallingSpread);
	void OnRep_FabricatorCostMultiplier(struct GameplayAbilities_GameplayAttributeData& OldFabricatorCostMultiplier);
	void OnRep_EnergyRegenRate(struct GameplayAbilities_GameplayAttributeData& OldEnergyRegenRate);
	void OnRep_EnergyMax(struct GameplayAbilities_GameplayAttributeData& OldEnergyMax);
	void OnRep_EmpStunModifier(struct GameplayAbilities_GameplayAttributeData& OldEMPStunModifier);
	void OnRep_DrawSpeedMultiplier(struct GameplayAbilities_GameplayAttributeData& OldDrawSpeedMultiplier);
	void OnRep_DoorInteractTimeMultiplier(struct GameplayAbilities_GameplayAttributeData& OldDoorInteractTimeMultiplier);
	void OnRep_DirectHitDamageModifier(struct GameplayAbilities_GameplayAttributeData& OldDirectHitDamageModifier);
	void OnRep_DetectionRadius(struct GameplayAbilities_GameplayAttributeData& OldDetectionRadius);
	void OnRep_DamageToEnergyConversionRate(struct GameplayAbilities_GameplayAttributeData& OldDamageToEnergyConversionRate);
	void OnRep_DamageBoostUseSpeedModifier(struct GameplayAbilities_GameplayAttributeData& OldDamageBoostUseSpeedModifier);
	void OnRep_CybridTetherStateTime(struct GameplayAbilities_GameplayAttributeData& OldCybridTetherStateTime);
	void OnRep_CybridLatchDuration(struct GameplayAbilities_GameplayAttributeData& OldCybridLatchDuration);
	void OnRep_CybridDriveByDistance(struct GameplayAbilities_GameplayAttributeData& OldCybridDriveByDistance);
	void OnRep_CybridDamageModifier(struct GameplayAbilities_GameplayAttributeData& OldCybridDamageModifier);
	void OnRep_CybridDamageMitigationModifier(struct GameplayAbilities_GameplayAttributeData& OldCybridDamageMitigationModifier);
	void OnRep_CybridCriticalHealthThresholdPct(struct GameplayAbilities_GameplayAttributeData& OldCybridCriticalHealthThresholdPct);
	void OnRep_CybridBeamDistance(struct GameplayAbilities_GameplayAttributeData& OldCybridBeamDistance);
	void OnRep_CybridAlertStateTime(struct GameplayAbilities_GameplayAttributeData& OldCybridAlertStateTime);
	void OnRep_CrouchingSpread(struct GameplayAbilities_GameplayAttributeData& OldCrouchingSpread);
	void OnRep_ClipAmmoMax(struct GameplayAbilities_GameplayAttributeData& OldClipAmmoMax);
	void OnRep_ChestInteractTimeMultiplier(struct GameplayAbilities_GameplayAttributeData& OldChestInteractTimeMultiplier);
	void OnRep_ChargeTimeModifier(struct GameplayAbilities_GameplayAttributeData& OldChargeTimeModifier);
	void OnRep_CharacterMassModifier(struct GameplayAbilities_GameplayAttributeData& OldCharacterMassModifier);
	void OnRep_CharacterMass(struct GameplayAbilities_GameplayAttributeData& OldCharacterMass);
	void OnRep_BurstShots(struct GameplayAbilities_GameplayAttributeData& OldBurstShots);
	void OnRep_BlockTime(struct GameplayAbilities_GameplayAttributeData& OldBlockTime);
	void OnRep_BackwardMovementSpeedReductionMultiplier(struct GameplayAbilities_GameplayAttributeData& OldBackwardMovementSpeedReductionMultiplier);
	void OnRep_BackstabDamageModifier(struct GameplayAbilities_GameplayAttributeData& OldBackstabDamageModifier);
	void OnRep_AttackSpreadReductionModifier(struct GameplayAbilities_GameplayAttributeData& OldAttackSpreadReductionModifier);
	void OnRep_AttackSpreadRecovery(struct GameplayAbilities_GameplayAttributeData& OldAttackSpreadRecovery);
	void OnRep_AttackSpreadMax(struct GameplayAbilities_GameplayAttributeData& OldAttackSpreadMax);
	void OnRep_AttackSpreadIncrement(struct GameplayAbilities_GameplayAttributeData& OldAttackSpreadIncrement);
	void OnRep_AttackSpread(struct GameplayAbilities_GameplayAttributeData& OldAttackSpread);
	void OnRep_AttackRate(struct GameplayAbilities_GameplayAttributeData& OldAttackRate);
	void OnRep_AttackDamagePerEnergy(struct GameplayAbilities_GameplayAttributeData& OldAttackDamagePerEnergy);
	void OnRep_AttackDamage(struct GameplayAbilities_GameplayAttributeData& OldAttackDamage);
	void OnRep_AOEModifier(struct GameplayAbilities_GameplayAttributeData& OldAOEModifier);
	void OnRep_AOEDamageMitigationModifier(struct GameplayAbilities_GameplayAttributeData& OldAOEDamageMitigationModifier);
	void OnRep_AmmoUsedPerShot(struct GameplayAbilities_GameplayAttributeData& OldAmmoUsedPerShot);
	void OnRep_AirControl(struct GameplayAbilities_GameplayAttributeData& OldAirControl);
	void OnRep_AimSwayModifier(struct GameplayAbilities_GameplayAttributeData& OldAimSwayModifier);
	void OnRep_AimingSpread(struct GameplayAbilities_GameplayAttributeData& OldAimingSpread);
	void OnRep_AimingMaxSpeedMultiplier(struct GameplayAbilities_GameplayAttributeData& OldAimingMaxSpeedMultiplier);
	void OnRep_AimFOVModifier(struct GameplayAbilities_GameplayAttributeData& OldAimFOVModifier);
	void OnRep_AIAcquireTargetTime(struct GameplayAbilities_GameplayAttributeData& OldAIAcquireTargetTime);
	void OnRep_ADSTimeMultiplier(struct GameplayAbilities_GameplayAttributeData& OldADSTimeMultiplier);
	void OnRep_ADSTime(struct GameplayAbilities_GameplayAttributeData& OldADSTime);
	void OnRep_AbilityDamageMultiplier(struct GameplayAbilities_GameplayAttributeData& OldAbilityDamageMultiplier);
	void OnRep_AbilityAOEModifier(struct GameplayAbilities_GameplayAttributeData& OldAbilityAOEModifier);
	void GetPlayerType(class AValCharacter* Character, enum class EPlayerType* PlayerType);
	void GetPlayerStatus(class AValCharacter* Character, struct Valhalla_PlayerStatus* PlayerStatus);
	void GetPlayerId(class AValCharacter* Character, int32* PlayerId);
};

// 0x70 (0xA0 - 0x30)
// Class Valhalla.ValAT_CooldownChanged
class UValAT_CooldownChanged : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_            OnCooldownBegin;                                   // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCooldownEnd;                                     // 0x40(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCooldownModified;                                // 0x50(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCooldownActive;                                  // 0x60(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*               ASC;                                               // 0x70(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4AE0[0x28];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValAT_CooldownChanged* GetDefaultObj();

	void OnActiveEffectDurationChange(struct GameplayAbilities_ActiveGameplayEffect& Effect);
	class UValAT_CooldownChanged* ListenForCooldownChange(class UAbilitySystemComponent* AbilitySystemComponent, const struct GameplayTags_GameplayTagContainer& CooldownTags, bool UseServerCooldown);
	void EndTask();
};

// 0x48 (0x78 - 0x30)
// Class Valhalla.ValAT_GameplayTagAddedRemoved
class UValAT_GameplayTagAddedRemoved : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_            OnTagAdded;                                        // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTagRemoved;                                      // 0x40(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*               ASC;                                               // 0x50(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4AF4[0x20];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValAT_GameplayTagAddedRemoved* GetDefaultObj();

	class UValAT_GameplayTagAddedRemoved* ListenForGameplayTagAddedOrRemoved(class UAbilitySystemComponent* AbilitySystemComponent, const struct GameplayTags_GameplayTagContainer& Tags);
	void EndTask();
};

// 0xD0 (0x150 - 0x80)
// Class Valhalla.ValAT_PlayMontageForMeshAndWait
class UValAT_PlayMontageForMeshAndWait : public UAbilityTask
{
public:
	FMulticastInlineDelegateProperty_            OnCompleted;                                       // 0x80(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBlendOut;                                        // 0x90(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnInterrupted;                                     // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCancelled;                                       // 0xB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            EventReceived;                                     // 0xC0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                Mesh;                                              // 0xD0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimMontage*                          MontageToPlay;                                     // 0xD8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct GameplayTags_GameplayTagContainer     EventTags;                                         // 0xE0(0x20)(NativeAccessSpecifierPrivate)
	float                                        Rate;                                              // 0x100(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  StartSection;                                      // 0x104(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        AnimRootMotionTranslationScale;                    // 0x10C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bStopWhenAbilityEnds;                              // 0x110(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bReplicateMontage;                                 // 0x111(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_4B02[0x2];                                     // Fixing Size After Last Property  
	float                                        OverrideBlendOutTimeForCancelAbility;              // 0x114(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        OverrideBlendOutTimeForStopWhenEndAbility;         // 0x118(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_4B03[0x34];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValAT_PlayMontageForMeshAndWait* GetDefaultObj();

	class UValAT_PlayMontageForMeshAndWait* PlayMontageForMeshAndWait(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, class USkeletalMeshComponent* Mesh, class UAnimMontage* MontageToPlay, const struct GameplayTags_GameplayTagContainer& EventTags, float Rate, class FName StartSection, bool bStopWhenAbilityEnds, float AnimRootMotionTranslationScale, bool bReplicateMontage, float OverrideBlendOutTimeForCancelAbility, float OverrideBlendOutTimeForStopWhenEndAbility);
};

// 0x18 (0x98 - 0x80)
// Class Valhalla.ValAT_ServerWaitForClientTargetData
class UValAT_ServerWaitForClientTargetData : public UAbilityTask
{
public:
	FMulticastInlineDelegateProperty_            ValidData;                                         // 0x80(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_4B11[0x8];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValAT_ServerWaitForClientTargetData* GetDefaultObj();

	class UValAT_ServerWaitForClientTargetData* ServerWaitForClientTargetData(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, bool TriggerOnce);
	void OnTargetDataReplicatedCallback(struct GameplayAbilities_GameplayAbilityTargetDataHandle& Data, const struct GameplayTags_GameplayTag& ActivationTag);
};

// 0x20 (0xA0 - 0x80)
// Class Valhalla.ValAT_WaitAiming
class UValAT_WaitAiming : public UAbilityTask
{
public:
	FMulticastInlineDelegateProperty_            OnAimingFinished;                                  // 0x80(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_4B24[0x10];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValAT_WaitAiming* GetDefaultObj();

	class UValAT_WaitAiming* WaitAiming(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, class AValCharacter* Character, bool bWantsToAim);
};

// 0x38 (0xB8 - 0x80)
// Class Valhalla.ValAT_WaitTargetDataUsingActor
class UValAT_WaitTargetDataUsingActor : public UAbilityTask
{
public:
	FMulticastInlineDelegateProperty_            ValidData;                                         // 0x80(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            Cancelled;                                         // 0x90(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AGameplayAbilityTargetActor*           TargetActor;                                       // 0xA0(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4B5D[0x10];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValAT_WaitTargetDataUsingActor* GetDefaultObj();

	class UValAT_WaitTargetDataUsingActor* WaitTargetDataWithReusableActor(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, enum class EGameplayTargetingConfirmation ConfirmationType, class AGameplayAbilityTargetActor* InTargetActor, bool bCreateKeyIfNotValidForMorePredicting);
	void OnTargetDataReplicatedCancelledCallback();
	void OnTargetDataReplicatedCallback(struct GameplayAbilities_GameplayAbilityTargetDataHandle& Data, const struct GameplayTags_GameplayTag& ActivationTag);
	void OnTargetDataReadyCallback(struct GameplayAbilities_GameplayAbilityTargetDataHandle& Data);
	void OnTargetDataCancelledCallback(struct GameplayAbilities_GameplayAbilityTargetDataHandle& Data);
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValAudioRoomCollection
class IValAudioRoomCollection : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IValAudioRoomCollection* GetDefaultObj();

	void SetRoomAkEvent(struct CoreUObject_Vector& Location, class UAkAudioEvent* Event);
	void OnAudioRoomRequestUnLoad(bool bDisableOnlyObjects);
	void OnAudioRoomRequestLoad(bool bEnableObjects);
	void GetAkRooms(TArray<class AValAkRoom*>* OutRooms);
	class AValAkRoom* GetAkRoomAtLocation(struct CoreUObject_Vector& Location);
	void AddAkRoom(class AValAkRoom* Room);
	void AddAkObject(class UObject* Object);
};

// 0x0 (0x38 - 0x38)
// Class Valhalla.ValBackendScripting
class UValBackendScripting : public UBSScripting
{
public:

	static class UClass* StaticClass();
	static class UValBackendScripting* GetDefaultObj();

};

// 0x0 (0x70 - 0x70)
// Class Valhalla.ValBackendService
class UValBackendService : public UBackendService
{
public:

	static class UClass* StaticClass();
	static class UValBackendService* GetDefaultObj();

	class UValBackendScripting* GetValScriptingInterface();
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValBlueprintLibrary
class UValBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UValBlueprintLibrary* GetDefaultObj();

	struct GameplayAbilities_GameplayAbilityTargetDataHandle ValidateMeleeHitList(class AActor* OwningActor, enum class ECollisionChannel TestCollisionChannel, TArray<struct Engine_HitResult>& InputHits, bool bDrawDebug);
	void UpdateContractTaskProgress(class UObject* WorldContextObject, const class FString& ContractId, class FName& TaskId, int32 Progress);
	bool TryComputeBotJumpVector(class UObject* WorldContextObject, struct Valhalla_JumpTrajectoryPredictionParams& JumpParams, struct CoreUObject_Vector* OutJumpVector);
	bool SphereOverlapHitResults(class UObject* WorldContextObject, TArray<struct Engine_HitResult>* OutHitResults, const struct CoreUObject_Vector& Origin, const struct CoreUObject_Rotator& Rotation, const struct Engine_CollisionProfileName& InTraceProfile, class AActor* Instigator, TArray<class AActor*>& ActorsToIgnore, bool bIgnoreFriendly, int32 MaxHitResults, bool bDrawDebug, float SphereRadius, float SphereRange);
	class AValProjectile* SpawnProjectileDeferred(class UClass* Class, struct CoreUObject_Transform& SpawnTransform, class AActor* Owner, struct Valhalla_ValGameplayEffectContainerSpec& EffectSpec, struct CoreUObject_Vector& ProjectileOrigin, float ExplosionRadius, float ProjectileSpeedModify, int32 BotMuzzleSocketIndex, class AController* InstigatorController, int32 PredictionID, class APawn* Instigator);
	class AValPickup_Item* SpawnPickupItemWithData(class UObject* WorldContextObject, TSubclassOf<class AValPickup_Item> PickupClass, struct Valhalla_PendingItem& ItemData, struct CoreUObject_Transform& SpawnTransform, class AActor* Owner, class APawn* Instigator);
	void SortContracts(TArray<struct Valhalla_ContractSortData>& Contracts, TArray<struct Valhalla_ContractSortData>* SortedContracts);
	void SortAbilities(TArray<struct Valhalla_AbilitySortData>& Abilities, TArray<struct Valhalla_AbilitySortData>* SortedAbilities);
	void SetCullDistanceVolumeEnabled(class ACullDistanceVolume* Volume, bool bEnabled);
	void SetComponentNetAddressable(class UActorComponent* Comp);
	void SetComponentIsNetStartup(class UActorComponent* Comp, bool bNewIsNetStartup);
	void SetCollisionMaskForPrimitiveByTeam(class UPrimitiveComponent* Primitive, int32 TeamNum);
	void SetActorIsNetStartup(class AActor* A, bool bNewIsNetStartup, const class FString& RenameSuffix);
	void RemovePlayerContract(class UObject* WorldContextObject, class FName& ContractId);
	void PrintToVerboseLogTemp(class UObject* WorldContextObject, const class FString& InString);
	void PrintStringInShipping(class UObject* WorldContextObject, const class FString& InString, bool bPrintToScreen, bool bPrintToLog, const struct CoreUObject_LinearColor& TextColor, float Duration, bool bPrintOnlyInHighVerbosity);
	void OnStoreContractsLoaded(class UObject* WorldContextObject, TArray<struct Valhalla_ContractData>& ShopContracts, const struct CoreUObject_DateTime& ShopRerollTime);
	void OnShopRerolled(class UObject* WorldContextObject, TArray<struct Valhalla_ContractData>& ShopContracts);
	void OnPlayerContractsLoaded(class UObject* WorldContextObject, TArray<struct Valhalla_ContractData>& Contracts);
	void OnContractPurchased(class UObject* WorldContextObject, struct Valhalla_ContractData& ContractId);
	void MarkQuadrantAsUsed(const struct CoreUObject_IntPoint& CellCount, const struct CoreUObject_IntPoint& QuadrantCellSize, const struct CoreUObject_IntPoint& Quadrant, TArray<struct CoreUObject_IntPoint>& UsedCoordinates);
	void LogTimeOfDay(float TimeOfDay, float RepTimeOfDay);
	void LineOfSightMultiTrace(class UObject* WorldContextObject, const struct CoreUObject_Vector& StartPoint, TArray<struct CoreUObject_Vector>& EndPoints, enum class ECollisionChannel TraceChannel, class AActor* IgnoreActor, bool* OutFoundClearLoS);
	bool JetpackCheck(class UObject* WorldContextObject, enum class ECollisionChannel TraceChannel, class AActor* SourceActor, const struct CoreUObject_Vector& TargetLocation, float SearchDistance, int32 Iterations, float HeightInterval, TArray<class AActor*>& IngoreActors, struct CoreUObject_Vector* OutJetpackTarget);
	bool IsTargetDataValidForSpawn(class AValCharacter* Character, struct GameplayAbilities_GameplayAbilityTargetDataHandle& TargetData, float ValidationDistanceLeeway, bool bDisallowFriendlyHit, uint8 ShotsPerFire, float MinSpread);
	bool IsOfflineMode(class UObject* WorldContextObject);
	bool IsNVIDIA();
	bool IsEditorWorld(class UObject* WorldContextObject);
	bool IsEditorBuild();
	bool IsDemoMode();
	bool IsContractComplete(class UObject* WorldContextObject, const class FString& ContractId);
	bool IsAMD();
	bool IsActorBehindOtherActor(class AActor* Source, class AActor* Target);
	bool HaveContractRequiredCurrency(class UObject* WorldContextObject, struct Valhalla_ContractData& ContractId);
	void GetStoreContracts(class UObject* WorldContextObject, TArray<struct Valhalla_ContractData>* ShopContracts, struct CoreUObject_DateTime* ShopRerollTime);
	void GetPlayerCurrencyValue(class UObject* WorldContextObject, enum class ECurrencyType Type, int32* Value);
	void GetPlayerContracts(class UObject* WorldContextObject, TArray<struct Valhalla_ContractData>* Contracts);
	class UPlayerAttributeConfig* GetPlayerAttributeConfig(class UObject* WorldContextObject);
	class AValPing* GetPingOnActor(class AActor* ActorToCheck);
	void GetPersistentLoadoutSlotTagContainer(class UObject* WorldContextObject, struct GameplayTags_GameplayTagContainer* OutTagContainer);
	float GetNextPatrolLocation(class APawn* PawnActor, class USplineComponent* SplineComponent, float DistanceAlongSpline, struct CoreUObject_Vector* OutNextLocation);
	void GetNetTimeoutStatus(class UObject* WorldContextObject, float* CompareTime, float* TimeoutDelay);
	void GetMetadata(class UAnimationAsset* AnimationAsset, TArray<class UAnimMetaData*>* MetaData);
	TArray<class UMaterialInterface*> GetMaterialsFromNiagaraComponent(class UNiagaraComponent* NiagaraComp);
	void GetLocalStoreContracts(class UObject* WorldContextObject, TArray<struct Valhalla_ContractData>* ShopContracts, struct CoreUObject_DateTime* ShopRerollTime);
	class UValSettingsSubsystem* GetLocalSettingsSubsystem(class UObject* WorldContextObject);
	class UValPlayerInventory* GetLocalPlayerInventory(class UObject* WorldContextObject);
	void GetLocalPlayerContracts(class UObject* WorldContextObject, TArray<struct Valhalla_ContractData>* Contracts);
	bool GetLocalPlayerContract(class UObject* WorldContextObject, const class FString& ContractId, struct Valhalla_ContractData* Contract);
	class AValPlayerController* GetLocalClientValPlayerController(class UObject* WorldContextObject);
	void GetJitteredCellLocations(class UObject* WorldContextObject, bool bVisualize, struct CoreUObject_IntPoint& CachedCellCount, struct CoreUObject_Vector2D& CachedCellSize, struct CoreUObject_Vector& CachedWorldLocation, struct CoreUObject_IntPoint& CachedRandomCell, float MaxJitter, int32 Retries, struct CoreUObject_RandomStream& JitterRandomStream, float MinZ, float POIRadius, float TerrainRadius, TMap<struct CoreUObject_IntPoint, struct CoreUObject_Vector>& CellJitteredLocations, float DrawDebugDuration);
	class UValItemModAsset* GetItemModAssetById(int32 ItemId);
	class UValItemAsset* GetItemAssetById(int32 ItemId);
	class AValInventoryManager* GetInventoryManager(class UObject* WorldContextObject);
	class UValDataTableManager* GetDataTableManager(class UObject* WorldContextObject);
	int32 GetCurrencyValue(class UObject* WorldContextObject, struct Valhalla_ContractData& ShopContract, enum class ECurrencyType Type);
	float GetContractTaskProgressPercent(class UObject* WorldContextObject, const class FString& ContractId, class FName& TaskId);
	int32 GetContractTaskProgress(class UObject* WorldContextObject, const class FString& ContractId, class FName& TaskId);
	float GetContractTaskDataProgressPercent(class UObject* WorldContextObject, struct Valhalla_ContractTaskData& TaskData);
	enum class ERarity GetContractRarity(class UObject* WorldContextObject, struct Valhalla_Contract& Contract);
	float GetContractProgressPercent(class UObject* WorldContextObject, const class FString& ContractId);
	class FText GetContractDisplayName(class UObject* WorldContextObject, struct Valhalla_ContractData& Contract);
	float GetContractDataProgressPercent(class UObject* WorldContextObject, struct Valhalla_ContractData& ContractData);
	class UObject* GetClassDefaultObject(TSubclassOf<class UObject> Class);
	class FName GetCharacterClosest3PSocketName(class AValCharacter* Character, const struct CoreUObject_Vector& Location);
	TArray<class UObject*> GetCachedArray(TArray<class UObject*>& InArray);
	class UValAgentConfig* GetAgentConfigByTag(class UObject* WorldContextObject, const struct GameplayTags_GameplayTag& AgentGameplayTag);
	class AValProjectile* FinishSpawningProjectile(class AValProjectile* Projectile, struct CoreUObject_Transform& Transform);
	bool FindTeleportSpot(class UObject* WorldContextObject, class AActor* TestActor, const struct CoreUObject_Rotator& TestRotation, const struct CoreUObject_Vector& TestLocation, struct CoreUObject_Vector* AdjustedLocation);
	void ExportMontageBonePositionToCurve(class UAnimMontage* AnimMontage, class FName& InBoneName, class UCurveVector* Curve);
	void ExportAnimBonePositionToCurve(class UAnimSequence* AnimSequence, class FName& InBoneName, class UCurveVector* Curve);
	void DebugCookBreak(class FString& bpName);
	enum class EObjectTypeQuery ConvertCollisionChannelToObjectType(enum class ECollisionChannel Channel);
	bool ConeOverlapHitResults(class UObject* WorldContextObject, TArray<struct Engine_HitResult>* OutHitResults, const struct CoreUObject_Vector& Origin, const struct CoreUObject_Rotator& Rotation, float Radius, float Angle, const TArray<enum class EObjectTypeQuery>& ObjectTypes, class AActor* Instigator, TArray<class AActor*>& ActorsToIgnore, bool bIgnoreFriendly, int32 MaxHitResults, enum class ECollisionChannel TestCollisionChannel, bool bDrawDebug);
	bool ConeOverlapActors(class UObject* WorldContextObject, TArray<class AActor*>* OutActors, const struct CoreUObject_Vector& Origin, const struct CoreUObject_Rotator& Rotation, float Radius, float Angle, const TArray<enum class EObjectTypeQuery>& ObjectTypes, class AActor* Instigator, TArray<class AActor*>& ActorsToIgnore, bool bIgnoreFriendly, int32 MaxHitResults, bool bDrawDebug);
	struct CoreUObject_IntPoint ComputeQuadrantFromCellCoord(const struct CoreUObject_IntPoint& Coord, const struct CoreUObject_IntPoint& QuadrantCellSize);
	bool ComputeJitteredCellLocation(class UObject* WorldContextObject, struct CoreUObject_IntPoint& CachedCellCount, struct CoreUObject_Vector2D& CachedCellSize, struct CoreUObject_Vector& POIExtent, TArray<struct CoreUObject_IntPoint>& UsedCoordinates, struct CoreUObject_RandomStream& JitterRandomStream, float MaxJitter, int32 Retries, float MinZ, float POIRadius, float TerrainRadius, bool bVisualize, float DrawDebugDuration, struct CoreUObject_Vector* OutLocation);
	int32 CleanShieldValue(float Shield);
	int32 CleanShieldMaxValue(float ShieldMax);
	int32 CleanHealthValue(float Health);
	int32 CleanHealthMaxValue(float HealthMax);
	bool ClaimShopContract(class UObject* WorldContextObject, struct Valhalla_ContractData& StoreContractID);
	struct CoreUObject_Vector CellToWorldLocation(struct CoreUObject_IntPoint& Cell, struct CoreUObject_Vector2D& CellSize, float TerrainRadius);
	int32 CalculateEntryCost(class UObject* WorldContextObject, int32 Reputation);
	int32 CalculateDisplayEntryCost(class UObject* WorldContextObject, int32 Reputation);
	bool BoxOverlapHitResults(class UObject* WorldContextObject, TArray<struct Engine_HitResult>* OutHitResults, const struct CoreUObject_Vector& Origin, const struct CoreUObject_Rotator& Rotation, const TArray<enum class EObjectTypeQuery>& ObjectTypes, class AActor* Instigator, TArray<class AActor*>& ActorsToIgnore, bool bIgnoreFriendly, int32 MaxHitResults, bool bDrawDebug, const struct CoreUObject_Vector& BoxExtent, const struct CoreUObject_Vector& BoxOffset);
	bool BoxOverlapActors(class UObject* WorldContextObject, TArray<class AActor*>* OutActors, const struct CoreUObject_Vector& Origin, const struct CoreUObject_Rotator& Rotation, const TArray<enum class EObjectTypeQuery>& ObjectTypes, class AActor* Instigator, TArray<class AActor*>& ActorsToIgnore, bool bIgnoreFriendly, int32 MaxHitResults, bool bDrawDebug, const struct CoreUObject_Vector& BoxExtent, const struct CoreUObject_Vector& BoxOffset);
	void ApplyDirectDamage(class AActor* SourceActor, class AActor* TargetActor, struct GameplayAbilities_GameplayEffectSpecHandle& DamageSpec);
};

// 0x140 (0x1E0 - 0xA0)
// Class Valhalla.ValThreatComponent
class UValThreatComponent : public UActorComponent
{
public:
	uint8                                        Pad_4DE0[0x10];                                    // Fixing Size After Last Property  
	struct GameplayTags_GameplayTagContainer     BotIgnoreTags;                                     // 0xB0(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AActor>>            BotIgnoreClasses;                                  // 0xD0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                         bRunThreatSystem;                                  // 0xE0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bSetTargetActor;                                   // 0xE1(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4DE1[0x2];                                     // Fixing Size After Last Property  
	int32                                        MaxThreatCount;                                    // 0xE4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        UpdateThreatsTimer;                                // 0xE8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ForgetThreatTimer;                                 // 0xEC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LostSightDelayTimer;                               // 0xF0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        StartOfMatchDelayTiming;                           // 0xF4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCheckForThreatReachability;                       // 0xF8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4DE2[0x3];                                     // Fixing Size After Last Property  
	float                                        NonReachabilityThreatPenalty;                      // 0xFC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCheckForInCover;                                  // 0x100(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4DE3[0x3];                                     // Fixing Size After Last Property  
	float                                        InCoverThreatPenalty;                              // 0x104(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        InCoverTimeout;                                    // 0x108(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4DE4[0x4];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_Threat>               ThreatList;                                        // 0x110(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	bool                                         bLockTarget;                                       // 0x120(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4DE5[0x3];                                     // Fixing Size After Last Property  
	float                                        TetherRadius;                                      // 0x124(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4DE6[0x68];                                    // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnTargetActorUpdated;                              // 0x190(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnThreatSeenUpdated;                               // 0x1A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnThreatHeardUpdated;                              // 0x1B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnThreatDamagedUpdated;                            // 0x1C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnThreatCoverTagsChanged;                          // 0x1D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValThreatComponent* GetDefaultObj();

	void UpdateThreats();
	void UpdateThreatLevel(int32 ThreatIndex);
	void UpdateBlackboard(struct Valhalla_Threat* ThreatStruct);
	void ToggleSetTargetActor();
	void StopThreatSystem(bool bClearBlackboard);
	void StartThreatSystem();
	void SortThreatList();
	bool ShouldIgnoreThreat(class AActor* ThreatActor);
	void SetTetherRadius(float NewTetherRadius);
	void RemoveThreat(class AActor* ThreatActor);
	void RemoveCurrentInCoverTarget();
	void PrioritizeThreat(class AActor* ThreatActor);
	void OnThreatListEmptied();
	void OnOwnerAttackingUpdated(const struct GameplayTags_GameplayTag& InTag, int32 NewCount);
	void OnMatchStateChanged();
	void OnCurrentThreatTagChanged(const struct GameplayTags_GameplayTag& InTag, int32 NewCount);
	void OnCoverTagChanged(const struct GameplayTags_GameplayTag& Tag, int32 NewCount);
	void OnCharacterThreatDied(float TimeToRespawn, class AValCharacter* Pawn);
	void OnAttributeActorThreatDied(class AValAttributeActorBase* Pawn);
	bool IsThreatValid(struct Valhalla_Threat& ThreatStruct);
	bool IsThreatSeen(class AActor* ThreatActor);
	bool IsThreatReachable(class AActor* ThreatActor);
	bool IsThreatInCover(class AActor* ThreatActor);
	bool IsThreatHeard(class AActor* ThreatActor);
	bool HasThreat(class AActor* ThreatActor);
	bool HasEnemyThreat();
	bool HasAnyThreats();
	int32 GetThreatIndex(class AActor* ThreatActor);
	int32 GetThreatCount();
	int32 GetOrAddThreat(class AActor* ThreatActor);
	class AActor* GetCurrentThreat();
	void ForceUpdateThreats();
	void DebugDump();
	void ClearGameplayTagEvents(class AActor* PreviousTarget);
	void BindGameplayTagEvents(class AActor* NewTarget);
	void AddOrUpdateThreatSeen(class AActor* ThreatActor, bool bIsSeen);
	void AddOrUpdateThreatHeard(class AActor* ThreatActor, bool bIsHeard);
	void AddOrUpdateThreatFlashlighting(class AActor* ThreatActor);
	void AddOrUpdateThreatDamage(class AActor* ThreatActor, float DamageAmount);
};

// 0x30 (0x210 - 0x1E0)
// Class Valhalla.ValBossThreatComponent
class UValBossThreatComponent : public UValThreatComponent
{
public:
	bool                                         bOnlyTargetPlayers;                                // 0x1E0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4DEA[0x7];                                     // Fixing Size After Last Property  
	struct GameplayTags_GameplayTagContainer     EnemyUntargetableTags;                             // 0x1E8(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int32                                        UntargetableThreatCount;                           // 0x208(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4DEB[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValBossThreatComponent* GetDefaultObj();

	bool HasOnlyUntargetableEnemies();
	void AddThreat(class AActor* ThreatActor);
};

// 0x2D0 (0x300 - 0x30)
// Class Valhalla.ValBotData
class UValBotData : public UPrimaryDataAsset
{
public:
	class FText                                  BotDisplayName;                                    // 0x30(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct GameplayTags_GameplayTag              BotType;                                           // 0x48(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRestrictSpawnType;                                // 0x50(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4DEF[0x7];                                     // Fixing Size After Last Property  
	TSoftClassPtr<class AAIController>           BotController;                                     // 0x58(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class APawn>                   BotPawnClass;                                      // 0x80(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>           DefaultAttributeEffect;                            // 0xA8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        QueueBotDataId;                                    // 0xB0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUsePersonality;                                   // 0xB4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4DF0[0x3];                                     // Fixing Size After Last Property  
	TSoftObjectPtr<class UValBotPersonality>     Personality;                                       // 0xB8(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBehaviorTree>          BotNonCombatBehaviorTree;                          // 0xE0(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBehaviorTree>          BotCombatBehaviorTree;                             // 0x108(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanSee;                                           // 0x130(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanHear;                                          // 0x131(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4DF2[0x6];                                     // Fixing Size After Last Property  
	struct GameplayTags_GameplayTagContainer     Flags;                                             // 0x138(0x20)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	float                                        DropLootChance;                                    // 0x158(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BaseAccuracy;                                      // 0x15C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BaseReactionTime;                                  // 0x160(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        IdealCombatRangeMin;                               // 0x164(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        IdealCombatRangeMax;                               // 0x168(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bCanSnapToTarget;                                  // 0x16C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4DF4[0x3];                                     // Fixing Size After Last Property  
	float                                        TimeBeforeSnapToTarget;                            // 0x170(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ENavLinkAgentType                 NavLinkAgentType;                                  // 0x174(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4DF5[0x3];                                     // Fixing Size After Last Property  
	class USkeletalMesh*                         Mesh;                                              // 0x178(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                    MaterialOverride;                                  // 0x180(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UAnimInstance>           CustomABP;                                         // 0x188(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_Vector                    CustomMeshScale;                                   // 0x1B0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UValLoadoutAsset>       LoadoutAsset;                                      // 0x1C8(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct GameplayTags_GameplayTag, bool>  PredictiveAimingOverride;                          // 0x1F0(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<struct GameplayTags_GameplayTag, TSubclassOf<class UGameplayEffect>> SpreadOverride;                                    // 0x240(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                         bAmbushes;                                         // 0x290(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4DF8[0x3];                                     // Fixing Size After Last Property  
	float                                        AmbushPerceptionRange;                             // 0x294(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AmbushMinWaitTime;                                 // 0x298(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AmbushMaxWaitTime;                                 // 0x29C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StalkMinTimeInState;                               // 0x2A0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StalkMaxTimeInState;                               // 0x2A4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StalkTimeInStateVariance;                          // 0x2A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FleeMinTimeInState;                                // 0x2AC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FleeMaxTimeInState;                                // 0x2B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FleeTimeInStateVariance;                           // 0x2B4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSpawnAlarmWaveOnDeath;                            // 0x2B8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4DF9[0x7];                                     // Fixing Size After Last Property  
	TSoftObjectPtr<class UEnvQuery>              LocationQueryTemplate;                             // 0x2C0(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Valhalla_ValBotWaveSet                AlarmWaveSetOverride;                              // 0x2E8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                        RespawnTimerOverride;                              // 0x2F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4DFA[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValBotData* GetDefaultObj();

	bool ShouldUsePredictiveAimingForSlot(const struct GameplayTags_GameplayTag& EquipSlot, bool* bFoundDefinition);
	bool HasFlag(const struct GameplayTags_GameplayTag& TagToCheck, bool bExactMatch);
	TSubclassOf<class UGameplayEffect> GetSpreadOverrideForSlot(const struct GameplayTags_GameplayTag& EquipSlot);
	float GetIdealCombatRangeMin();
	float GetIdealCombatRangeMax();
	struct GameplayTags_GameplayTagContainer GetFlags();
};

// 0x78 (0xA0 - 0x28)
// Class Valhalla.ValBotTierData
class UValBotTierData : public UObject
{
public:
	TMap<struct GameplayTags_GameplayTag, TSoftObjectPtr<class UValBotData>> BotConfiguration;                                  // 0x28(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UGameplayEffect>> AttributeEffectModifier;                           // 0x78(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                        ApplyAffixPercentChance;                           // 0x88(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4E06[0x4];                                     // Fixing Size After Last Property  
	TArray<TSoftClassPtr<class UGameplayEffect>> Affixes;                                           // 0x90(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValBotTierData* GetDefaultObj();

	TSoftClassPtr<class UGameplayEffect> SelectAffix(struct CoreUObject_RandomStream* Stream);
	TSoftObjectPtr<class UValBotData> GetBotClassData(struct GameplayTags_GameplayTag& Type);
};

// 0x78 (0xA8 - 0x30)
// Class Valhalla.ValBotPersonality
class UValBotPersonality : public UPrimaryDataAsset
{
public:
	struct GameplayTags_GameplayTagContainer     PersonalityFlags;                                  // 0x30(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<struct GameplayTags_GameplayTag, TSoftObjectPtr<class UBehaviorTree>> BehaviorTrees;                                     // 0x50(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                        IdealCombatRangeMinOverride;                       // 0xA0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        IdealCombatRangeMaxOverride;                       // 0xA4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValBotPersonality* GetDefaultObj();

};

// 0x38 (0x2D0 - 0x298)
// Class Valhalla.ValBotSpawner
class AValBotSpawner : public AActor
{
public:
	float                                        MinSpawnDelayTimingInSec;                          // 0x298(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxSpawnDelayTimingInSec;                          // 0x29C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct CoreUObject_Transform>         SpawnPointTransforms;                              // 0x2A0(0x10)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UBotInitData*>                  BotList;                                           // 0x2B0(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnBotSpawnedDel;                                   // 0x2C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValBotSpawner* GetDefaultObj();

	bool Spawn(class UValBotWaveConfig* InBotSpawnData, class AActor* TriggerActor, class AValBotSpawnVolume* OwningVolume);
	void OnBotSpawned(class UBotInitData* BotInitData);
	void HandleSpawnUX(class UBotInitData* BotInitData);
	void HandleActivatedUX();
	void ClientHandleActivatedUX();
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValBotSpawnerBlueprintLibrary
class UValBotSpawnerBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UValBotSpawnerBlueprintLibrary* GetDefaultObj();

	bool SpawnAtNearestBotSpawnerWithChance(class UObject* WorldContextObject, const struct CoreUObject_Vector& Location, float Chance, class UValBotWaveConfig* Config, class AActor* TriggerActor, class AValUtopiaConstructor* Constructor, class AValBotSpawnVolume* OwningVolume);
	bool SpawnAtNearestBotSpawner(class UObject* WorldContextObject, const struct CoreUObject_Vector& Location, class UValBotWaveConfig* Config, class AActor* TriggerActor, class AValUtopiaConstructor* Constructor, class AValBotSpawnVolume* OwningVolume);
	class AValBotSpawner* GetNearestBotSpawner(class UObject* WorldContextObject, const struct CoreUObject_Vector& Location, class AValUtopiaConstructor* Constructor, float MaxDistance);
};

// 0x1F8 (0x220 - 0x28)
// Class Valhalla.BotInitData
class UBotInitData : public UObject
{
public:
	class UValBotData*                           BotData;                                           // 0x28(0x8)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_Vector                    Location;                                          // 0x30(0x18)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_Rotator                   Rotation;                                          // 0x48(0x18)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class AValBotSpawnVolume*                    SpawnVolume;                                       // 0x60(0x8)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                TriggerActor;                                      // 0x68(0x8)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValCharacter>          ActiveActor;                                       // 0x70(0x8)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHasSpawned;                                       // 0x78(0x1)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHasDied;                                          // 0x79(0x1)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bFinishedLoading;                                  // 0x7A(0x1)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bSpawnAfterLoad;                                   // 0x7B(0x1)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4E34[0x4];                                     // Fixing Size After Last Property  
	class UClass*                                BotController;                                     // 0x80(0x8)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UClass*                                BotPawnClass;                                      // 0x88(0x8)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBehaviorTree*                         BotNonCombatBehaviorTree;                          // 0x90(0x8)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBehaviorTree*                         BotCombatBehaviorTree;                             // 0x98(0x8)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UClass*                                CustomABP;                                         // 0xA0(0x8)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UGameplayEffect>         AttributeModPtr;                                   // 0xA8(0x28)(Edit, Transient, EditConst, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UClass*                                AttributeMod;                                      // 0xD0(0x8)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UGameplayEffect>         RandomAffixPtr;                                    // 0xD8(0x28)(Edit, Transient, EditConst, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UClass*                                RandomAffix;                                       // 0x100(0x8)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValLoadoutAsset*                      LoadoutAsset;                                      // 0x108(0x8)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4E37[0x110];                                   // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UBotInitData* GetDefaultObj();

	void SpawnBot();
	void OnPrecacheComplete();
	void OnBotDied(float TimeToRespawn, class AValCharacter* Pawn);
	bool IsPendingSpawn();
	bool IsDespawned();
	bool IsAlive();
	bool HasSpawned();
	class AValCharacter* GetCharacter();
	void FinishPrecache();
};

// 0x1E8 (0x480 - 0x298)
// Class Valhalla.ValBotSpawnVolume
class AValBotSpawnVolume : public AActor
{
public:
	class UShapeComponent*                       BotSpawnComponent;                                 // 0x298(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4E49[0x18];                                    // Fixing Size After Last Property  
	enum class EComponentShape                   BotSpawnShape;                                     // 0x2B8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4E4B[0x3];                                     // Fixing Size After Last Property  
	int32                                        NumPlayersInVolume;                                // 0x2BC(0x4)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValBotTierData*                       BotSpawnData;                                      // 0x2C0(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4E4C[0xF0];                                    // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnBotSpawnVolumeEntered;                           // 0x3B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBotSpawnVolumeThreatEntered;                     // 0x3C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBotSpawnVolumeThreatExited;                      // 0x3D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBotsTriggered;                                   // 0x3E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBotsRecalled;                                    // 0x3F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBotsSpawned;                                     // 0x408(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBotKilled;                                       // 0x418(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAlarmTriggered;                                  // 0x428(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_4E4D[0x8];                                     // Fixing Size After Last Property  
	int32                                        MaxToSpawnAtATime;                                 // 0x440(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        InvalidSpawnPointDistance;                         // 0x444(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UBotInitData*>                  BotsToInitialize;                                  // 0x448(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                         bPOIBotsSpawned;                                   // 0x458(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bPendingSpawn;                                     // 0x459(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHasAlarmBeenTriggered;                            // 0x45A(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4E4E[0x5];                                     // Fixing Size After Last Property  
	class AValUtopiaConstructor*                 OwningConstructor;                                 // 0x460(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MaxPatrolPoints;                                   // 0x468(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MinPatrolPointDistance;                            // 0x46C(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct CoreUObject_Vector>            PatrolPoints;                                      // 0x470(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValBotSpawnVolume* GetDefaultObj();

	void TriggerAlarm();
	void SpawnStreamedBots();
	void SetPatrolForOverlappingBot(class AValCharacter* Bot);
	void SetOwningConstructor(class AValUtopiaConstructor* InConstructor);
	void OnShapeComponentOverlapped(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct Engine_HitResult& SweepResult);
	void OnShapeComponentEndOverlapped(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnBotDataAvailable();
	bool HaveBotsSpawned();
	void GetSpawnedBots(TArray<class AValCharacter*>* OutCharacters);
	void GetSafeSpawns(TMap<struct GameplayTags_GameplayTag, struct Valhalla_BotTransformData>& OutMap);
	TArray<struct CoreUObject_Vector> GetPatrolPoints();
	class AValUtopiaConstructor* GetOwningConstructor();
	class UValBotTierData* GetBotSpawnData();
	void FinishDestroyBot(class AValCharacter* Bot);
};

// 0x0 (0x80 - 0x80)
// Class Valhalla.ValBTComposite_ParallelSequence
class UValBTComposite_ParallelSequence : public UBTCompositeNode
{
public:

	static class UClass* StaticClass();
	static class UValBTComposite_ParallelSequence* GetDefaultObj();

};

// 0x10 (0x90 - 0x80)
// Class Valhalla.ValBTComposite_Random
class UValBTComposite_Random : public UBTCompositeNode
{
public:
	TArray<float>                                Probabilities;                                     // 0x80(0x10)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValBTComposite_Random* GetDefaultObj();

};

// 0x0 (0x90 - 0x90)
// Class Valhalla.ValBTComposite_Random_Selector
class UValBTComposite_Random_Selector : public UValBTComposite_Random
{
public:

	static class UClass* StaticClass();
	static class UValBTComposite_Random_Selector* GetDefaultObj();

};

// 0x0 (0x90 - 0x90)
// Class Valhalla.ValBTComposite_Random_Sequence
class UValBTComposite_Random_Sequence : public UValBTComposite_Random
{
public:

	static class UClass* StaticClass();
	static class UValBTComposite_Random_Sequence* GetDefaultObj();

};

// 0x60 (0xC8 - 0x68)
// Class Valhalla.ValBTDecorator_ActorHasTags
class UValBTDecorator_ActorHasTags : public UBTDecorator
{
public:
	struct AIModule_BlackboardKeySelector        ActorToCheck;                                      // 0x68(0x28)(Edit, Protected, NativeAccessSpecifierProtected)
	enum class EGameplayContainerMatchType       TagsToMatch;                                       // 0x90(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4E66[0x7];                                     // Fixing Size After Last Property  
	struct GameplayTags_GameplayTagContainer     GameplayTags;                                      // 0x98(0x20)(Edit, Protected, NativeAccessSpecifierProtected)
	class FString                                CachedDescription;                                 // 0xB8(0x10)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValBTDecorator_ActorHasTags* GetDefaultObj();

};

// 0x28 (0x90 - 0x68)
// Class Valhalla.ValBTDecorator_IsInShip
class UValBTDecorator_IsInShip : public UBTDecorator
{
public:
	struct AIModule_BlackboardKeySelector        DirectiveKey;                                      // 0x68(0x28)(Edit, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValBTDecorator_IsInShip* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValBTFunctionLibrary
class UValBTFunctionLibrary : public UBTFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UValBTFunctionLibrary* GetDefaultObj();

	struct CoreUObject_Vector GetLocationFromBlackboardValue(class UBTNode* NodeOwner, struct AIModule_BlackboardKeySelector& Key);
};

// 0x8 (0x78 - 0x70)
// Class Valhalla.ValBTService_ApplyTempEffect
class UValBTService_ApplyTempEffect : public UBTService
{
public:
	TSubclassOf<class UGameplayEffect>           EffectToApply;                                     // 0x70(0x8)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValBTService_ApplyTempEffect* GetDefaultObj();

};

// 0x8 (0x78 - 0x70)
// Class Valhalla.ValBTTask_AlwaysReturn
class UValBTTask_AlwaysReturn : public UBTTaskNode
{
public:
	enum class EBTNodeResult                     AlwaysReturn;                                      // 0x70(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4E6E[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValBTTask_AlwaysReturn* GetDefaultObj();

};

// 0x8 (0x78 - 0x70)
// Class Valhalla.ValBTTask_ApplyEffect
class UValBTTask_ApplyEffect : public UBTTaskNode
{
public:
	TSubclassOf<class UGameplayEffect>           EffectToApply;                                     // 0x70(0x8)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValBTTask_ApplyEffect* GetDefaultObj();

};

// 0x0 (0x98 - 0x98)
// Class Valhalla.ValBTTask_ClearBlackboardKey
class UValBTTask_ClearBlackboardKey : public UBTTask_BlackboardBase
{
public:

	static class UClass* StaticClass();
	static class UValBTTask_ClearBlackboardKey* GetDefaultObj();

};

// 0x58 (0xC8 - 0x70)
// Class Valhalla.ValBTTask_EnterPOI
class UValBTTask_EnterPOI : public UBTTaskNode
{
public:
	struct AIModule_BlackboardKeySelector        POIActorKey;                                       // 0x70(0x28)(Edit, NativeAccessSpecifierPublic)
	struct AIModule_BlackboardKeySelector        InPOISuccessKey;                                   // 0x98(0x28)(Edit, NativeAccessSpecifierPublic)
	float                                        GoalAcceptanceRadiusSqr;                           // 0xC0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowDebugLines;                                   // 0xC4(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4E73[0x3];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValBTTask_EnterPOI* GetDefaultObj();

};

// 0x30 (0xA0 - 0x70)
// Class Valhalla.ValBTTask_SetBoolKey
class UValBTTask_SetBoolKey : public UBTTaskNode
{
public:
	struct AIModule_BlackboardKeySelector        BoolKey;                                           // 0x70(0x28)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                         bBoolValue;                                        // 0x98(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4E74[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValBTTask_SetBoolKey* GetDefaultObj();

};

// 0x30 (0xA0 - 0x70)
// Class Valhalla.ValBTTask_SetDirective
class UValBTTask_SetDirective : public UBTTaskNode
{
public:
	struct AIModule_BlackboardKeySelector        DirectiveKey;                                      // 0x70(0x28)(Edit, Protected, NativeAccessSpecifierProtected)
	enum class EBotDirective                     DirectiveValue;                                    // 0x98(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4E77[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValBTTask_SetDirective* GetDefaultObj();

};

// 0x50 (0xC0 - 0x70)
// Class Valhalla.ValBTTask_SetPatrolLocation
class UValBTTask_SetPatrolLocation : public UBTTaskNode
{
public:
	struct AIModule_BlackboardKeySelector        PatrolRouteIndex;                                  // 0x70(0x28)(Edit, Protected, NativeAccessSpecifierProtected)
	struct AIModule_BlackboardKeySelector        PatrolLocation;                                    // 0x98(0x28)(Edit, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValBTTask_SetPatrolLocation* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValBuildingPOI
class IValBuildingPOI : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IValBuildingPOI* GetDefaultObj();

	enum class EBuildingType GetBuildingType();
};

// 0x60 (0x2F8 - 0x298)
// Class Valhalla.ValCallToActionManager
class AValCallToActionManager : public AActor
{
public:
	FMulticastInlineDelegateProperty_            OnMasteryUnlocked;                                 // 0x298(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMasteryLocked;                                   // 0x2A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCallToActionAdded;                               // 0x2B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCallToActionRemoved;                             // 0x2C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_4E90[0x20];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValCallToActionManager* GetDefaultObj();

	void SaveActiveCTAsToGameUserSettings();
	void RemoveMasteryAbilityCTA(int32 ViewdItemId, enum class EPlayerProperty MasteryType, bool Unequpped);
	void RemoveActivePerkCTA(int32 ViewedItemId);
	void RemoveActiveAbilityCTA(int32 ViewedItemId);
	void PopulateManagerFromGameUserSettings();
	bool HasActivePerkCTAForItemId(int32 ItemToCheck);
	bool HasActivePerkCTA();
	bool HasActiveAbilityCTAForItemId(int32 ItemToCheck);
	bool HasActiveAbilityCTA();
	void ClearAllActiveCTAs();
	void AddActivePerkCTA(int32 UnviewedItemId);
	void AddActiveMasteryCTA(int32 UnviewedItemId, enum class EPlayerProperty MasteryType);
	void AddActiveAbilityCTA(int32 UnviewedItemId);
};

// 0x0 (0x298 - 0x298)
// Class Valhalla.ValCameraHitFeedbackActor
class AValCameraHitFeedbackActor : public AActor
{
public:

	static class UClass* StaticClass();
	static class AValCameraHitFeedbackActor* GetDefaultObj();

};

// 0x20 (0x68 - 0x48)
// Class Valhalla.ValCameraModifier
class UValCameraModifier : public UCameraModifier
{
public:
	bool                                         bOnlyModifyCameraTransforms;                       // 0x48(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4E98[0x7];                                     // Fixing Size After Last Property  
	TArray<struct Engine_WeightedBlendable>      Materials;                                         // 0x50(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class AValCharacter*                         TargetActor;                                       // 0x60(0x8)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValCameraModifier* GetDefaultObj();

	void SetMaterials(TArray<struct Engine_WeightedBlendable>& InMaterials);
	void OnModifierDisabled();
	void OnEnabled();
	void OnAddedToCamera(class APlayerCameraManager* Camera);
};

// 0x0 (0xB0 - 0xB0)
// Class Valhalla.ValCameraModifier_CameraOnlyCameraShake
class UValCameraModifier_CameraOnlyCameraShake : public UCameraModifier_CameraShake
{
public:

	static class UClass* StaticClass();
	static class UValCameraModifier_CameraOnlyCameraShake* GetDefaultObj();

};

// 0x0 (0xE0 - 0xE0)
// Class Valhalla.ValCameraOnlyCameraShakeBase
class UValCameraOnlyCameraShakeBase : public UDefaultCameraShakeBase
{
public:

	static class UClass* StaticClass();
	static class UValCameraOnlyCameraShakeBase* GetDefaultObj();

};

// 0x20 (0x50 - 0x30)
// Class Valhalla.ValCellDestructionConfig
class UValCellDestructionConfig : public UDataAsset
{
public:
	class UNiagaraSystem*                        DestroyedCellVFX;                                  // 0x30(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxVFXDistance;                                    // 0x38(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4E9D[0x4];                                     // Fixing Size After Last Property  
	class UAkAudioEvent*                         DestroyedCellSound;                                // 0x40(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxSoundDistance;                                  // 0x48(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        CellLength;                                        // 0x4C(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValCellDestructionConfig* GetDefaultObj();

};

// 0x28 (0x6A0 - 0x678)
// Class Valhalla.ValCharacterBase
class AValCharacterBase : public ACharacter
{
public:
	uint8                                        Pad_4EA1[0x8];                                     // Fixing Size After Last Property  
	TArray<FDelegateProperty_>                   DelayedTeamRegistrationDelegates;                  // 0x680(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	int32                                        DelayedTeamId;                                     // 0x690(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_4EA2[0xC];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValCharacterBase* GetDefaultObj();

	void OnTeamChanged(int32 OldTeamId, int32 NewTeamId);
};

// 0x40 (0xE0 - 0xA0)
// Class Valhalla.ValCharacterFootprintComponent
class UValCharacterFootprintComponent : public UActorComponent
{
public:
	TSubclassOf<class AValFootprint>             CharacterFootprintTemplate;                        // 0xA0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValCharacter*                         Owner;                                             // 0xA8(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DistanceInterval;                                  // 0xB0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeInterval;                                      // 0xB4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FootprintLifespan;                                 // 0xB8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TickInterval;                                      // 0xBC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DistanceSquare;                                    // 0xC0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LastSpawnTime;                                     // 0xC4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_Vector                    LastSpawnLocation;                                 // 0xC8(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValCharacterFootprintComponent* GetDefaultObj();

	void SpawnNewFootprint();
	bool CanSpawnNewFootprint();
};

// 0x4B8 (0x1400 - 0xF48)
// Class Valhalla.ValCharacterMovementComponent
class UValCharacterMovementComponent : public UCharacterMovementComponent
{
public:
	float                                        RampStepCheckDist;                                 // 0xF48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSprintDisabled;                                   // 0xF4C(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSkiDisabled;                                      // 0xF4D(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsJetpackActive;                                  // 0xF4E(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsSkiBoostAvailable;                              // 0xF4F(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSkiBoostAvailable;                               // 0xF50(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSkiBoostUnavailable;                             // 0xF60(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bSkiIndicatorEnabled;                              // 0xF70(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4EC9[0x7];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnSkiIndicatorEnabled;                             // 0xF78(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSkiIndicatorDisabled;                            // 0xF88(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bRequireSprintToSki;                               // 0xF98(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bWantsToSki;                                       // 0xF99(0x1)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCancelSkiBuffered;                                // 0xF9A(0x1)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bWantsToSprint : 1;                                // Mask: 0x1, PropSize: 0x10xF9B(0x1)(BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bWasSprintInterrupted : 1;                         // Mask: 0x2, PropSize: 0x10xF9B(0x1)(BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsPressingSprint : 1;                             // Mask: 0x4, PropSize: 0x10xF9B(0x1)(BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bWantsToJetpack : 1;                               // Mask: 0x8, PropSize: 0x10xF9B(0x1)(BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsAiming : 1;                                     // Mask: 0x10, PropSize: 0x10xF9B(0x1)(BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsSprinting : 1;                                  // Mask: 0x20, PropSize: 0x10xF9B(0x1)(BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_166 : 2;                                    // Fixing Bit-Field Size  
	bool                                         bShouldSkydive;                                    // 0xF9C(0x1)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSkydiveIsInitialized;                             // 0xF9D(0x1)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4ECA[0x2];                                     // Fixing Size After Last Property  
	float                                        SkydiveAirControlMultiplier;                       // 0xFA0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4ECB[0x4];                                     // Fixing Size After Last Property  
	struct CoreUObject_Rotator                   SkydiveCharacterRotationRate;                      // 0xFA8(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                        SkydiveTransitionTraceDist;                        // 0xFC0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SkydiveLandingTargetSpeed;                         // 0xFC4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxSkydiveSpeed;                                   // 0xFC8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SkydiveLandingRecoveryTime;                        // 0xFCC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BrakingDecelerationJetpacking;                     // 0xFD0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStallZEnabled;                                    // 0xFD4(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4ECC[0x3];                                     // Fixing Size After Last Property  
	float                                        StallZ;                                            // 0xFD8(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShouldCheckSplat;                                 // 0xFDC(0x1)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4ECD[0x3];                                     // Fixing Size After Last Property  
	struct CoreUObject_Vector                    VelocityBeforeSplat;                               // 0xFE0(0x18)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Engine_HitResult                      SplatHitResult;                                    // 0xFF8(0xE8)(BlueprintVisible, Transient, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                        VelocityDiffRequiredToSplat;                       // 0x10E0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4ECE[0x4];                                     // Fixing Size After Last Property  
	class UCurveFloat*                           StallZGravityInfluence;                            // 0x10E8(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           OvershootGroundMovementAcceleration;               // 0x10F0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           OvershootGroundFriction;                           // 0x10F8(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           OvershootBrakingDeceleration;                      // 0x1100(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSprintStarted;                                   // 0x1108(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSprintStopped;                                   // 0x1118(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSkiStarted;                                      // 0x1128(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSkiStopped;                                      // 0x1138(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnJetpackStarted;                                  // 0x1148(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnJetpackStopped;                                  // 0x1158(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSkydiveLandingStopped;                           // 0x1168(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bIsShootingPrimaryWeapon;                          // 0x1178(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4ECF[0x3];                                     // Fixing Size After Last Property  
	float                                        SkiFriction;                                       // 0x117C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SkiBrakingDeceleration;                            // 0x1180(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SkiCatchAirFloorMaxDist;                           // 0x1184(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxSkiDownwardAdjustLength;                        // 0x1188(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SkiDownwardMinAngle;                               // 0x118C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         AlwaysSkiOnCrouch;                                 // 0x1190(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4ED0[0x3];                                     // Fixing Size After Last Property  
	float                                        GroundMovementAccelerationMultiplier;              // 0x1194(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCheckForVault;                                    // 0x1198(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanEverVault;                                     // 0x1199(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsPhaseShifting;                                  // 0x119A(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsStationary;                                     // 0x119B(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4ED1[0x4];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnStationaryStateChanged;                          // 0x11A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHitDebuffStarted;                                // 0x11B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHitDebuffStopped;                                // 0x11C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSpeedometerVisible;                              // 0x11D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        MaxDisplaySpeed;                                   // 0x11E0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PeakSkiControlSpeed;                               // 0x11E4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SkiControlSigmaSquare;                             // 0x11E8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxSkiControlPct;                                  // 0x11EC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SlopeInfluenceExponent;                            // 0x11F0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4ED2[0x4];                                     // Fixing Size After Last Property  
	class UCurveFloat*                           SkiGravityCurve;                                   // 0x11F8(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                           SkiFrictionUphillModifierPct;                      // 0x1200(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SkiGravityZMultiplier;                             // 0x1208(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxSkiSpeed;                                       // 0x120C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        NonBoostedSkiInitialImpulseMultiplier;             // 0x1210(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxSpeedForNonBoostedSkiImpulse;                   // 0x1214(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxSpeedForSkiInitialImpulse;                      // 0x1218(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SkiInitialImpulseUphillMuiltiplier;                // 0x121C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SkiInitialImpulseLockoutTime;                      // 0x1220(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxSkiAcceleration;                                // 0x1224(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LastSkiImpulseTimestamp;                           // 0x1228(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LastStartFallingTimestamp;                         // 0x122C(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SkiInitialImpulseMinAirTime;                       // 0x1230(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinSpeedRequiredToStartSki;                        // 0x1234(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinZSpeedRequiredToStartSki;                       // 0x1238(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinSpeedRequiredToContinueSki;                     // 0x123C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bJustImpactedWallWhileSkiing;                      // 0x1240(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4ED3[0x3];                                     // Fixing Size After Last Property  
	float                                        StimSpeedMultiplier;                               // 0x1244(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SprintSpeedMultiplier;                             // 0x1248(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SlideSpeedMultiplier;                              // 0x124C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxGroundSpeedMultiplier;                          // 0x1250(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CappedMaxSpeedWhileSprinting;                      // 0x1254(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        BackwardWalkThreshold;                             // 0x1258(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        BackwardWalkMultiplier;                            // 0x125C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        BackwardSpeedReductionModifier;                    // 0x1260(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         AutoSprint;                                        // 0x1264(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4ED4[0x3];                                     // Fixing Size After Last Property  
	float                                        JetpackMaxIgnitionSpeedFromJump;                   // 0x1268(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        JetpackAccelerationMultiplier;                     // 0x126C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxJetpackSpeed;                                   // 0x1270(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxJetpackAccelerationSpeed;                       // 0x1274(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LateralJetpackAccelerationMultiplier;              // 0x1278(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4ED5[0x4];                                     // Fixing Size After Last Property  
	class UCurveFloat*                           JumpZSpeedLimit;                                   // 0x1280(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AimingMaxSpeedMultiplier;                          // 0x1288(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4ED8[0x4];                                     // Fixing Size After Last Property  
	class UCurveFloat*                           GroundMovementAcceleration;                        // 0x1290(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bJustLaunched;                                     // 0x1298(0x1)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4ED9[0x3];                                     // Fixing Size After Last Property  
	float                                        LaunchedAirControlMultiplier;                      // 0x129C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LaunchedSkydiveAirControlMultiplier;               // 0x12A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LaunchedMaxAirSpeedMultiplier;                     // 0x12A4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LaunchedSkydiveMaxAirSpeedMultiplier;              // 0x12A8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SlopeJumpZBoostFraction;                           // 0x12AC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                           SkiOnLandVelocityLoss;                             // 0x12B0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                           SkiOnLandVelocityLoss_LightFooted;                 // 0x12B8(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                           SkiSteeringInfluence;                              // 0x12C0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        JetpackImpactVelocityLostPct;                      // 0x12C8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCanHaveJumpPenalty;                               // 0x12CC(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4EDF[0x3];                                     // Fixing Size After Last Property  
	float                                        JumpPenaltySpeedMitigationPct;                     // 0x12D0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        JumpPenaltyTotalTime;                              // 0x12D4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        JumpPenaltyStartedTimestamp;                       // 0x12D8(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bJustJumped;                                       // 0x12DC(0x1)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4EE1[0x3];                                     // Fixing Size After Last Property  
	struct Engine_TimerHandle                    BufferedCancelSkiHandle;                           // 0x12E0(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CancelSkiBuffer;                                   // 0x12E8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bEnableFriendlyNudging;                            // 0x12EC(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4EE3[0x3];                                     // Fixing Size After Last Property  
	float                                        TerminalVelocityOverride;                          // 0x12F0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DevSkiFriction;                                    // 0x12F4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DevSkiGravityZ;                                    // 0x12F8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DevGroundMovementAcceleration;                     // 0x12FC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DevMaxSkiSpeed;                                    // 0x1300(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DevSkiInitialImpulse;                              // 0x1304(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DevMaxSpeedForSkiInitialImpulse;                   // 0x1308(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DevJetpackAcceleration;                            // 0x130C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DevGravityZ;                                       // 0x1310(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DevAirControl;                                     // 0x1314(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DevMaxSkiAcceleration;                             // 0x1318(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DevJetpackMaxIgnitionSpeedFromJump;                // 0x131C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DevMaxAirSpeed;                                    // 0x1320(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DevLateralJetpackAcceleration;                     // 0x1324(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HitDebuffTotalTime;                                // 0x1328(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HitDebuffCooldownTime;                             // 0x132C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HitDebuffRemainingTime;                            // 0x1330(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HitDebuffRemainingCooldownTime;                    // 0x1334(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasHitDebuff;                                     // 0x1338(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4EE6[0x3];                                     // Fixing Size After Last Property  
	float                                        LedgeGrabDistance;                                 // 0x133C(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LedgeGrabbableZ;                                   // 0x1340(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LedgeGrabbableWallZ;                               // 0x1344(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxLedgeCheckHeight;                               // 0x1348(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LedgeMantleDist;                                   // 0x134C(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        VaultZSpeed;                                       // 0x1350(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        VaultLateralSpeedMultiplier;                       // 0x1354(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_Vector                    VaultLaunchVelocity;                               // 0x1358(0x18)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        VaultWallDetectionHeightOffset;                    // 0x1370(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        VaultWallDetectionCollisionHalfHeight;             // 0x1374(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        VaultWalkedOffLedgeMaxDistCheck;                   // 0x1378(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4EE7[0x4];                                     // Fixing Size After Last Property  
	struct CoreUObject_Vector                    LedgeGrabWallDir;                                  // 0x1380(0x18)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LedgeDist;                                         // 0x1398(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShouldMantle;                                     // 0x139C(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bJustWalkedOffLedge;                               // 0x139D(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4EE8[0x2];                                     // Fixing Size After Last Property  
	struct CoreUObject_Vector                    LastWalkedOffLedgeLocation;                        // 0x13A0(0x18)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bNoOverlapEventsOnSimulatedTick;                   // 0x13B8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bNoOverlapEventsOnSmoothCorrection;                // 0x13B9(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4EE9[0x6];                                     // Fixing Size After Last Property  
	class AValForceField*                        CurrentForceField;                                 // 0x13C0(0x8)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct CoreUObject_Vector                    PendingForceAccelerationDirectionToApply;          // 0x13C8(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnJetpackThrustModeChanged;                        // 0x13E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	enum class EJetpackThrustMode                JetpackThrustMode;                                 // 0x13F0(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_4EEA[0x3];                                     // Fixing Size After Last Property  
	float                                        LateralJetpackThrustModeMultiplier;                // 0x13F4(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        UpwardJetpackThrustModeMultiplier;                 // 0x13F8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        DownwardJetpackThrustModeMultiplier;               // 0x13FC(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UValCharacterMovementComponent* GetDefaultObj();

	bool ShouldSpeedometerBeVisible();
	void SetSkiInitialImpulseLockoutTime(float Value);
	void SetPrevJetpackThrustMode();
	void SetNextJetpackThrustMode();
	void SetJetpackThrustMode(enum class EJetpackThrustMode NewJetpackThrustMode);
	void SetIsJetpackActive(bool bActive);
	bool SetForceMaxAccel(bool ForceMaxAccel);
	void SetCurrentForceField(class AValForceField* NewForceField);
	void SetAutoSprint(bool Value);
	void SetAimingMaxSpeedMultiplier(float Value);
	void OnSettingsChanged();
	bool IsVaulting();
	bool IsSprintingForLocalView();
	bool IsSprinting();
	bool IsSkydiving();
	bool IsSkydiveLanding();
	bool IsSkiing();
	bool IsSkiIndicatorEnabled();
	bool IsSkiBoostAvailable(bool bJustLanded);
	bool IsJetpacking();
	bool IsExtracting();
	void InterruptSprint(bool bRestoreSprint);
	float GetUpperBoundSpeed();
	enum class EJetpackThrustMode GetJetpackThrustMode();
	float GetJetpackAccelerationMultiplier();
	bool GetForceMaxAccel();
	float GetCurrentSpeed();
	class AValForceField* GetCurrentForceField();
	bool GetAutoSprint();
	void ApplyJumpPadForce(float ForwardVelocity, float VelocityZ, struct CoreUObject_Vector& JumpPadUpVector);
	void ApplyInitialJetpackThrust(struct CoreUObject_Vector& ThrustVector);
	void AddForceAccelerationDirection(const struct CoreUObject_Vector& Direction);
};

// 0x18 (0x700 - 0x6E8)
// Class Valhalla.ValCharacterOverlayComponent
class UValCharacterOverlayComponent : public UWidgetComponent
{
public:
	bool                                         bShowHealthOnly;                                   // 0x6E8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bSimpleVisibilityCheck;                            // 0x6E9(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShowDamageNumbers;                                // 0x6EA(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bOnlyVisibleToTeammates;                           // 0x6EB(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxCharacterDistanceSqOverride;                    // 0x6EC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CloseCharacterDistanceSqOverride;                  // 0x6F0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4EEB[0xC];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValCharacterOverlayComponent* GetDefaultObj();

	void UpdateVisibility();
	class UValCharacterOverlay* GetOverlayWidget();
};

// 0x68 (0x328 - 0x2C0)
// Class Valhalla.ValCharacterOverlay
class UValCharacterOverlay : public UUserWidget
{
public:
	float                                        MaxCharacterToIndicatorDistanceSq;                 // 0x2C0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxReticleToIndicatorDistanceSq;                   // 0x2C4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxReticleAngle;                                   // 0x2C8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinObjectiveDistanceSq;                            // 0x2CC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxCharacterDistanceSq;                            // 0x2D0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CloseCharacterDistanceSq;                          // 0x2D4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bForceHide;                                        // 0x2D8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4F03[0x7];                                     // Fixing Size After Last Property  
	class AValCharacter*                         OwningCharacter;                                   // 0x2E0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValAttributeActor*                    OwningObjective;                                   // 0x2E8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValWaypoint*                          OwningWaypoint;                                    // 0x2F0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValIndicator*                         OwningIndicator;                                   // 0x2F8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                OwningGeneralActor;                                // 0x300(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShowHealthOnly;                                   // 0x308(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShowDamageNumbers;                                // 0x309(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bOnlyVisibleToTeammates;                           // 0x30A(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bSimpleVisibilityCheck;                            // 0x30B(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValCharacter>          LocalCharacter;                                    // 0x30C(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValPlayerController>   LocalPlayer;                                       // 0x314(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4F05[0xC];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValCharacterOverlay* GetDefaultObj();

	void SetOwningWaypoint(class AValWaypoint* NewWaypoint);
	void SetOwningObjective(class AValAttributeActor* NewObjective);
	void SetOwningIndicator(class AValIndicator* NewIndicator);
	void SetOwningGeneralActor(class AActor* NewGeneralActor);
	void SetOwningCharacter(class AValCharacter* NewOwner);
	void SetMinObjectiveDistanceSq(float MinDistanceSq);
	void OnUpdateVisibility(bool Visible, bool Hovered, bool bClose, bool bShowHealthBar);
	void OnSetObjectiveLabel(class FName& Label);
	void OnSetObjectiveDebugText(const class FString& DebugText);
	void OnSetObjectiveColor(struct CoreUObject_LinearColor& Color);
	void OnOwningWaypointSet();
	void OnOwningObjectiveSet();
	void OnOwningNPCSet();
	void OnOwningIndicatorSet();
	void OnOwningGeneralActorSet();
	void OnOwningCharacterSet();
	void OnInitializedFromComponent();
	class AValPlayerController* GetLocalPlayer();
	class AValCharacter* GetLocalChar();
};

// 0x0 (0x328 - 0x328)
// Class Valhalla.ValCharacterOverlay_NPC
class UValCharacterOverlay_NPC : public UValCharacterOverlay
{
public:

	static class UClass* StaticClass();
	static class UValCharacterOverlay_NPC* GetDefaultObj();

};

// 0x70 (0x110 - 0xA0)
// Class Valhalla.ValCharacterOxygenComponent
class UValCharacterOxygenComponent : public UActorComponent
{
public:
	TWeakObjectPtr<class AValCharacter>          Owner;                                             // 0xA0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValAttributeSet*                      OwnerAttribute;                                    // 0xA8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    OxygenConsumeTimer;                                // 0xB0(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayAbilities_ActiveGameplayEffectHandle SuffocatingGameplayEffectHandle;                   // 0xB8(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        SafeRoomTagCount;                                  // 0xC0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4F12[0x4];                                     // Fixing Size After Last Property  
	TSubclassOf<class UGameplayEffect>           SuffocationDamageEffect;                           // 0xC8(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct GameplayTags_GameplayTag              SuffocationDamageTag;                              // 0xD0(0x8)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>           SuffocatingEffect;                                 // 0xD8(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct GameplayTags_GameplayTagContainer     SafeRoomTags;                                      // 0xE0(0x20)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                         bUsingOxygen;                                      // 0x100(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4F13[0x3];                                     // Fixing Size After Last Property  
	float                                        OxygenUpdateFrequency;                             // 0x104(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SuffocatingThreshold;                              // 0x108(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SuffocationDamagePercentPerTick;                   // 0x10C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValCharacterOxygenComponent* GetDefaultObj();

	void RemoveSuffocating();
	void RegenOxygen();
	void OnTagChanged(const struct GameplayTags_GameplayTag& Tag, int32 NewCount);
	void ConsumeOxygen();
	void ApplySuffocationDamage();
	void ApplySuffocating();
};

// 0x10 (0x40 - 0x30)
// Class Valhalla.ValCheatData
class UValCheatData : public UDataAsset
{
public:
	TSubclassOf<class UGameplayEffect>           DamageEffect;                                      // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct GameplayTags_GameplayTag              DamageDataTag;                                     // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValCheatData* GetDefaultObj();

};

// 0x30 (0xD0 - 0xA0)
// Class Valhalla.ValCheatComponent
class UValCheatComponent : public UActorComponent
{
public:
	class UValCheatData*                         R_CheatData;                                       // 0xA0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsCheatSpectating;                                // 0xA8(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsCheatSpectatingPlayerBots;                      // 0xA9(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsCheatSpectatingHunterBots;                      // 0xAA(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4F7D[0x5];                                     // Fixing Size After Last Property  
	class AValCharacter*                         CachedValCharacter;                                // 0xB0(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4F7E[0x18];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValCheatComponent* GetDefaultObj();

	void WhatBuild();
	void UseSurveyTower();
	void UpdateXPData(int32 StartingXp, int32 GainedXP, int32 CurrentXP);
	void UpdateRepData(int32 StartingRep, int32 GainedRep, int32 CurrentRep);
	void UpdateActivityData(int64 ActivityId, int32 StartingProgress, int32 EndingProgress);
	void TPToUber();
	void TPToReaper();
	void TPToPlayerBot();
	void TPToObjectiveTerminal();
	void TPToMe(const class FString& TargetPlayer);
	void TPToMarker();
	void TPToInteractableMission(bool bIncludeAll);
	void TPToHunterBot();
	void TPToHackablePanel();
	void TPToExtractionPortal(bool bIncludeLocked);
	void TPBotsToMe(bool bIncludeCybrids, bool bIncludeHunterBots);
	void TP(const class FString& TargetPlayer);
	void ToggleShowPlayerStat(const class FString& StatName, bool bOn);
	void ToggleShowBotPerceptions(bool bOn);
	void ToggleRecordPlayerBotSquads(bool bOn);
	void ToggleCoverVisualizations(bool bOn);
	void Timescale(float Scale);
	void TestFubarRewardPostLogin();
	void TestFubarRewardPosted();
	void TestFubar();
	void Suicide();
	void StopLookAtTarget();
	void StopAllSounds();
	void State();
	void SpectatePlayerBot();
	void SpectateHunterBot();
	void Spectate();
	void SpawnPlayerBotAtLocation(float X, float Y, float Z, bool bSpawnAsAlly, bool bMakeMeLeader);
	void SpawnPlayerBotAtCursor(bool bSpawnAsAlly, bool bMakeMeLeader);
	void SpawnAIAtLocation(const class FString& botId, float X, float Y, float Z);
	void SpawnAIAtCursor(const class FString& botId);
	void Skydive(float Distance);
	void ShowTeamCount(bool bShowTeamCount);
	void ShowProjectileRejectionMessages(bool bEnabled);
	void ShowMap(bool bShowMap);
	void ShowDamageNumbers(bool bOn);
	void ShowAIOnMiniMap();
	void ShowAimAssistDebug(bool bShow);
	void SetWorldPos(float InX, float InY, float InZ);
	void SetUseAutoPickup();
	void SetShields(float Value);
	void SetLives(int32 NewLives);
	void SetLiveGunPositioning(bool bEnabled);
	void SetLevel(int32 Level);
	void SetJumpZ(float NewJumpZ);
	void SetHealth(float Value);
	void SetExtractionPortalsInteractable();
	void SetDungeonTimer(int32 Seconds);
	void SetAttributeValue(enum class EPlayerAttributeType AttributeType, float Value);
	void ServerUseSurveyTower();
	void ServerUpdateXPData(int32 StartingXp, int32 GainedXP, int32 CurrentXP);
	void ServerUpdateRepData(int32 StartingRep, int32 GainedRep, int32 CurrentRep);
	void ServerTPToUber();
	void ServerTPToReaper();
	void ServerTPToPlayerBot();
	void ServerTPToObjectiveTerminal();
	void ServerTPToMe(const class FString& TargetPlayer);
	void ServerTPToMarker();
	void ServerTPToInteractableMission(bool bIncludeAll);
	void ServerTPToHunterBot();
	void ServerTPToHackablePanel();
	void ServerTPToExtractionPortal(bool bIncludeLocked);
	void ServerTPBotsToMe(bool bIncludeCybrids, bool bIncludeHunterBots);
	void ServerTP(const class FString& TargetPlayer);
	void ServerToggleRecordPlayerBotSquads(bool bOn);
	void ServerTimescale(float Scale);
	void ServerTestFubarRewardPostLogin();
	void ServerTestFubarRewardPosted();
	void ServerTestFubar();
	void ServerSuicide();
	void ServerState(float Time);
	void ServerSpectatePlayerBot(bool bEnabled);
	void ServerSpectateHunterBot(bool bEnabled);
	void ServerSpectate(bool bEnabled);
	void ServerSpawnPlayerBotAtLocation(float X, float Y, float Z, bool bSpawnAsAlly, bool bMakeMeLeader);
	void ServerSpawnPlayerBotAtCursor(bool bSpawnAsAlly, bool bMakeMeLeader);
	void ServerSpawnAIAtLocation(const class FString& botId, float X, float Y, float Z);
	void ServerSpawnAIAtCursor(const class FString& botId);
	void ServerSkydive(float Distance);
	void ServerShowTeamCount(bool bShowTeamCount);
	void ServerShowMap(bool bShowMap);
	void ServerShowAIOnMiniMap();
	void ServerSetWorldPos(float InX, float InY, float InZ);
	void ServerSetUseAutoPickup();
	void ServerSetShields(float Value);
	void ServerSetLives(int32 NewLives);
	void ServerSetLevel(int32 Level);
	void ServerSetJumpZ(float NewJumpZ);
	void ServerSetHealth(float Value);
	void ServerSetExtractionPortalsInteractable();
	void ServerSetDungeonTimer(int32 Seconds);
	void ServerSetAttributeValue(enum class EPlayerAttributeType AttributeType, float Value);
	void ServerSendServerLogLine(const class FString& LogLine);
	void ServerSaveInventory();
	void ServerRevokeInventory(bool RevokeArtifacts, bool RevokeLoadoutItems);
	void ServerRevive();
	void ServerPausePlayerSurviveTimer(bool bPause);
	void ServerPausePhaseTimer(bool bEnabled);
	void ServerPauseFog();
	void ServerPauseBots(bool bPause);
	void ServerOpenAllCrates();
	void ServerNoClip();
	void ServerKillPlayer(const class FString& TargetPlayer);
	void ServerKillMatch();
	void ServerKillBotsInRadius(int32 Radius);
	void ServerIgnoreMissionRequirements();
	void ServerIgnoreCooldowns();
	void ServerGTFO();
	void ServerGrantSecurityLevelAccessCard(enum class ESecurityLevel SecurityLevel);
	void ServerGrantLoot(int32 Amount);
	void ServerGodTrace(class APawn* P);
	void ServerGodAllPlayers(bool bEnabled);
	void ServerGodAllBots(bool bEnabled);
	void ServerGodAll(bool bEnabled);
	void ServerGod();
	void ServerGiveXP(int32 Amount);
	void ServerGivePermanentMod(int32 ItemId, float Magnitude);
	void ServerGiveMoney(int32 Amount);
	void ServerGiveMod(int32 ItemId, float Magnitude);
	void ServerGiveEquipment(int32 ItemId);
	void ServerGiveCurrency(const class FString& CurrencyCode, int32 Amount);
	void ServerGiveBoostItem(class FName ItemUpgrade);
	void ServerGiveBoost(int32 Count);
	void ServerFreeCam();
	void ServerForce3p(bool bEnabled);
	void ServerExtendPlayerSurviveTimer(float ExtraSecond);
	void ServerExecCall(const class FString& Request);
	void ServerExec(const class FString& Request);
	void ServerDumpWorldAIState();
	void ServerDumpCrateState(class AValBaseCrate* TargetCrate);
	void ServerDumpAIState(class AValCharacter* TargetBot);
	void ServerDevMovementSkiInitialImpulse(float NewMultiplier);
	void ServerDevMovementSkiGravityZ(float NewMultiplier);
	void ServerDevMovementSkiFriction(float NewMultiplier);
	void ServerDevMovementMaxSpeedForSkiInitialImpulse(float NewMultiplier);
	void ServerDevMovementMaxSkiSpeed(float NewMultiplier);
	void ServerDevMovementMaxSkiAcceleration(float NewMultiplier);
	void ServerDevMovementMaxAirSpeed(float NewMultiplier);
	void ServerDevMovementLateralJetpackAcceleration(float NewMultiplier);
	void ServerDevMovementJetpackMaxIgnitionSpeedFromJump(float NewMultiplier);
	void ServerDevMovementJetpackAcceleration(float NewMultiplier);
	void ServerDevMovementGroundMovementAcceleration(float NewMultiplier);
	void ServerDevMovementGravityZ(float NewMultiplier);
	void ServerDevMovementAirControl(float NewMultiplier);
	void ServerDebugSetPlayerStat(const class FString& StatName, int32 Value);
	void ServerDebugProjectileHit();
	void ServerDebugDamage();
	void ServerCycleCharacterClass();
	void ServerClearAttributeValue(enum class EPlayerAttributeType AttributeType);
	void ServerChangeTeam(int32 TeamId);
	void ServerCanGainXP(bool bEnabled);
	void ServerBotsIgnoreTrace(class APawn* P, bool bEnabled);
	void ServerBotsIgnoreMe(bool bEnabled);
	void ServerBotsIgnoreAll(bool bEnabled, bool bIncludeBots);
	void ServerAuditWorldMeshComposer();
	void ServerAlmostKillMe();
	void ServerAlmostKillBotsInRadius(int32 Radius);
	void ServerAddMissionProgress(int32 ActivityId, int32 Value);
	void ServerAddAmmo(float ClipAmmo, float ReserveAmmo, struct GameplayTags_GameplayTag& SlotTag);
	void SendServerLogLine(const class FString& LogLine);
	void SendPartyChat(const class FString& Msg);
	void SaveInventory();
	void RevokeInventory(bool RevokeArtifacts, bool RevokeLoadoutItems);
	void Revive();
	void QADebug(bool bVisible);
	void PausePlayerSurviveTimer(bool bPause);
	void PausePhaseTimer(bool bEnabled);
	void PauseFog();
	void PauseBots(bool bPause);
	void Orbit3p(bool bEnabled);
	void OpenAllCrates();
	void NoClip();
	void NextPostProcessVolume();
	void Monkey();
	void LookAtTarget();
	void Logout();
	void ListAttributes();
	void LeaveQueue();
	void KillPlayer(const class FString& TargetPlayer);
	void KillMatch();
	void KillBotsInRadius(int32 Radius);
	void JoinQueue(const class FString& QueueId, bool DisablePartyMatching, float SkillScore, float PartyLevel);
	void JoinBackfill(int32 QueueId, int32 SiteId);
	void IgnoreMissionRequirements();
	void IgnoreCooldowns();
	void HideHUD(bool bShouldHide);
	void GTFO();
	void GrantSpecificLoot(const class FString& Rarity, struct GameplayTags_GameplayTag* ItemType, int32 Amount);
	void GrantSecurityLevelAccessCard(enum class ESecurityLevel SecurityLevel);
	void GrantLoot(int32 Amount);
	void GPM(int32 ItemId, float Magnitude);
	void GoHome(bool bForce);
	void GodTrace();
	void GodAllPlayers(bool bEnabled);
	void GodAllBots(bool bEnabled);
	void GodAll(bool bEnabled);
	void God();
	void GM(int32 ItemId, float Magnitude);
	void GiveXP(int32 Amount);
	void GivePermanentMod(int32 ItemId, float Magnitude);
	void GiveMoney(int32 Amount);
	void GiveMod(int32 ItemId, float Magnitude);
	void GiveEquipment(int32 ItemId);
	void GiveCurrency(const class FString& CurrencyCode, int32 Amount);
	void GiveBoostItem(class FName ItemRowName);
	void GiveBoost(int32 Count);
	void GiveAbility(class FName AbilityRowName, const struct GameplayTags_GameplayTag& Slot);
	void GE(int32 ItemId);
	void FreeCam();
	void ForceStartAiming();
	void ForceCrash();
	void Force3p(bool bEnabled);
	void ExtendPlayerSurviveTimer(float ExtraSecond);
	void EnableAimAssist(bool bEnable);
	void DumpWorldAIState();
	void DumpCrateState();
	void DumpAnimationStats();
	void DumpAIState();
	void DisplayAssetName();
	void DisplayAbilityPropertyMods();
	void DevMovementSkiInitialImpulse(float NewMultiplier);
	void DevMovementSkiGravityZ(float NewMultiplier);
	void DevMovementSkiFriction(float NewMultiplier);
	void DevMovementMaxSpeedForSkiInitialImpulse(float NewMultiplier);
	void DevMovementMaxSkiSpeed(float NewMultiplier);
	void DevMovementMaxSkiAcceleration(float NewMultiplier);
	void DevMovementMaxAirSpeed(float NewMultiplier);
	void DevMovementList();
	void DevMovementLateralJetpackAcceleration(float NewMultiplier);
	void DevMovementJetpackMaxIgnitionSpeedFromJump(float NewMultiplier);
	void DevMovementJetpackAcceleration(float NewMultiplier);
	void DevMovementGroundMovementAcceleration(float NewMultiplier);
	void DevMovementGravityZ(float NewMultiplier);
	void DevMovementAirControl(float NewMultiplier);
	void DebugSurface(float TraceDownDistance, float TraceRadius);
	void DebugSetPlayerStat(const class FString& StatName, int32 Value);
	void DebugProjectileHit();
	void DebugPositionHistory(bool bEnabled);
	void DebugDamage();
	void CycleCharacterClass();
	void CustomForceStart();
	void ClearAttributeValue(enum class EPlayerAttributeType AttributeType);
	void ChangeTeam(int32 TeamId);
	void ChangeTargetControllerTeam(class AController* Controller, int32 TeamNum);
	void CCC();
	void CanGainXP(bool bEnabled);
	void BotsIgnoreTrace(bool bEnabled);
	void BotsIgnoreMe(bool bEnabled);
	void BotsIgnoreAllPlayers(bool bEnabled);
	void BotsIgnoreAll(bool bEnabled);
	void AudThr(const class FString& Params);
	void AuditWorldMeshComposer();
	void AudioRoomDebug(const class FString& Params);
	void AlmostKillMe();
	void AlmostKillBotsInRadius(int32 Radius);
	void AddMissionProgress(int32 ActivityId, int32 Value);
	void AddAmmo(float ClipAmmo, float ReserveAmmo, struct GameplayTags_GameplayTag& SlotTag);
};

// 0x68 (0x100 - 0x98)
// Class Valhalla.ValClientQueueAsset
class UValClientQueueAsset : public URH_ClientQueueAsset
{
public:
	TSoftObjectPtr<class UTexture2D>             SmallIcon;                                         // 0x98(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        CreditCost;                                        // 0xC0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESecurityLevel                    QueueSecurityLevel;                                // 0xC4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERarity                           MaxGearLevel;                                      // 0xC5(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4F86[0x2];                                     // Fixing Size After Last Property  
	class FText                                  Subtitle;                                          // 0xC8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                         bDevOnly;                                          // 0xE0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTrainingQueue;                                    // 0xE1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRankedQueue;                                      // 0xE2(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRequireLowLevelLoadout;                           // 0xE3(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4F88[0x4];                                     // Fixing Size After Last Property  
	class FString                                CycleId;                                           // 0xE8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MinRequiredLevel;                                  // 0xF8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MaxRequiredLevel;                                  // 0xFC(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValClientQueueAsset* GetDefaultObj();

	int32 GetMinRequiredLevel(class UObject* WorldContextObject);
	int32 GetMaxRequiredLevel(class UObject* WorldContextObject);
};

// 0x78 (0xA8 - 0x30)
// Class Valhalla.ValColorConfigData
class UValColorConfigData : public UPrimaryDataAsset
{
public:
	class FName                                  AssetId;                                           // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_LinearColor               PrimaryColor;                                      // 0x38(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_LinearColor               SecondaryColor;                                    // 0x48(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<enum class ERarity, struct CoreUObject_LinearColor> RarityColorMap;                                    // 0x58(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValColorConfigData* GetDefaultObj();

	class UValColorConfigData* GetColorConfigFromId(class FName& ID);
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValContextPingActor
class IValContextPingActor : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IValContextPingActor* GetDefaultObj();

	struct CoreUObject_Vector GetPreviewDetectionOffset();
	struct CoreUObject_Vector GetPingOffset();
	class FText GetContextTitleOverride();
	enum class EValPingType GetContextPingType();
	enum class ERarity GetContextPingRarity();
	class FText GetContextDescriptionOverride();
};

// 0x120 (0x148 - 0x28)
// Class Valhalla.ValContract
class UValContract : public UObject
{
public:
	uint8                                        Pad_4F8D[0x28];                                    // Fixing Size After Last Property  
	TMap<struct CoreUObject_Guid, int32>         CarryOverPlayerProgress;                           // 0x50(0x50)(NativeAccessSpecifierPrivate)
	uint8                                        Pad_4F8E[0xA0];                                    // Fixing Size After Last Property  
	bool                                         bIncrementOncePerMatch;                            // 0x140(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4F8F[0x1];                                     // Fixing Size After Last Property  
	bool                                         bCarryOverProgress;                                // 0x142(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4F90[0x5];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValContract* GetDefaultObj();

};

// 0xE8 (0x118 - 0x30)
// Class Valhalla.ValContractTaskData
class UValContractTaskData : public UPrimaryDataAsset
{
public:
	class FName                                  AssetId;                                           // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UValContract>              ContractClass;                                     // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  DisplayName;                                       // 0x40(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                  Description;                                       // 0x58(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<enum class ERarity, int32>              RequiredPerRarity;                                 // 0x70(0x50)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class UValReputationTierData*, int32>   RequiredPerReputation;                             // 0xC0(0x50)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                        NotifyPercent;                                     // 0x110(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4F91[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValContractTaskData* GetDefaultObj();

	class UValContractTaskData* GetTaskFromId(class FName& ID);
};

// 0x168 (0x198 - 0x30)
// Class Valhalla.ValContractConfigData
class UValContractConfigData : public UPrimaryDataAsset
{
public:
	TArray<class UValContractTaskData*>          RandomlyChosenContractTasks;                       // 0x30(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<enum class ERarity, int32>              NumberOfRandomTasksToChoosePerRarity;              // 0x40(0x50)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<struct GameplayTags_GameplayTag, class UValContractTaskData*> ExoticTasks;                                       // 0x90(0x50)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<enum class ERarity, struct Valhalla_CurrencyGroup> RarityCurrencies;                                  // 0xE0(0x50)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class UValReputationTierData*, struct Valhalla_RarityWeights> ReputationRarityWeights;                           // 0x130(0x50)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                        DailyContractCurrencyReward;                       // 0x180(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumberDailyContracts;                              // 0x184(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UValContractTaskData*>          DailyContractTasks;                                // 0x188(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValContractConfigData* GetDefaultObj();

};

// 0x50 (0x78 - 0x28)
// Class Valhalla.ValContractManager
class UValContractManager : public UObject
{
public:
	TArray<class UValContract*>                  ActiveContracts;                                   // 0x28(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_ContractData>         CachedPlayerContracts;                             // 0x38(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UValContractPendingClaim*>      ActiveContractClaims;                              // 0x48(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UValContractPurchase*>          ActiveContractPurchases;                           // 0x58(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct CoreUObject_Guid                      CachedPlayerUuid;                                  // 0x68(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValContractManager* GetDefaultObj();

};

// 0x90 (0xB8 - 0x28)
// Class Valhalla.ValContractPendingClaim
class UValContractPendingClaim : public UObject
{
public:
	class FString                                CachedPlayerGoalId;                                // 0x28(0x10)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Valhalla_CurrencyGroup                CachedCurrencyPrice;                               // 0x38(0x10)(Protected, NativeAccessSpecifierProtected)
	struct Valhalla_CurrencyGroup                CachedCurrencyReward;                              // 0x48(0x10)(Protected, NativeAccessSpecifierProtected)
	TMap<class FString, int32>                   CachedSpentCurrency;                               // 0x58(0x50)(Protected, NativeAccessSpecifierProtected)
	struct CoreUObject_Guid                      CachedPlayerUuid;                                  // 0xA8(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValContractPendingClaim* GetDefaultObj();

};

// 0xA8 (0xD0 - 0x28)
// Class Valhalla.ValContractPurchase
class UValContractPurchase : public UObject
{
public:
	struct Valhalla_ContractData                 CachedShopContract;                                // 0x28(0x60)(Protected, NativeAccessSpecifierProtected)
	struct CoreUObject_Guid                      CachedPlayerUuid;                                  // 0x88(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  CachedContractId;                                  // 0x98(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_CurrencyData>         CachedRequiredCurrency;                            // 0xA0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_CurrencyData>         SpentCurrencies;                                   // 0xB0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FString                                CatalogItemID;                                     // 0xC0(0x10)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValContractPurchase* GetDefaultObj();

};

// 0xD8 (0x100 - 0x28)
// Class Valhalla.ValContractShop
class UValContractShop : public UObject
{
public:
	uint8                                        Pad_4F99[0xC8];                                    // Fixing Size After Last Property  
	class UValContractConfigData*                ContractConfigData;                                // 0xF0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ETimeUnit                         RerollFrequencyUnit;                               // 0xF8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4F9A[0x3];                                     // Fixing Size After Last Property  
	int32                                        RerollFrequencyValue;                              // 0xFC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValContractShop* GetDefaultObj();

	struct CoreUObject_DateTime GetRerollTime();
};

// 0x30 (0x178 - 0x148)
// Class Valhalla.ValContract_Damage
class UValContract_Damage : public UValContract
{
public:
	bool                                         bIncrementByDamageAmount;                          // 0x148(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4F9B[0x7];                                     // Fixing Size After Last Property  
	struct GameplayTags_GameplayTagContainer     AbilityTags;                                       // 0x150(0x20)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                         bCountPlayers;                                     // 0x170(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCountBots;                                        // 0x171(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bKillingBlowsOnly;                                 // 0x172(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDirectHitsOnly;                                   // 0x173(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHeadshotsOnly;                                    // 0x174(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4F9C[0x3];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValContract_Damage* GetDefaultObj();

	void OnDamage(struct CoreUObject_Guid& PlayerUuid, struct Valhalla_DamageData& DamageData, class AActor* Target);
};

// 0x0 (0x148 - 0x148)
// Class Valhalla.ValContract_Evac
class UValContract_Evac : public UValContract
{
public:

	static class UClass* StaticClass();
	static class UValContract_Evac* GetDefaultObj();

	void OnEvac(struct CoreUObject_Guid& PlayerUuid);
};

// 0x8 (0x150 - 0x148)
// Class Valhalla.ValContract_Fabricator
class UValContract_Fabricator : public UValContract
{
public:
	enum class EFabricatorShopType               FabType;                                           // 0x148(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4F9E[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValContract_Fabricator* GetDefaultObj();

	void OnFabricate(struct CoreUObject_Guid& PlayerUuid, enum class EFabricatorShopType Type);
};

// 0x30 (0x178 - 0x148)
// Class Valhalla.ValContract_Loot
class UValContract_Loot : public UValContract
{
public:
	TArray<enum class ERarity>                   RarityFilters;                                     // 0x148(0x10)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTagContainer     TagFilters;                                        // 0x158(0x20)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValContract_Loot* GetDefaultObj();

	void OnLoot(struct CoreUObject_Guid& PlayerUuid, TArray<struct Valhalla_PendingItem>* LootArray);
};

// 0x10 (0x158 - 0x148)
// Class Valhalla.ValContract_Pickup
class UValContract_Pickup : public UValContract
{
public:
	TArray<TSubclassOf<class AValPickup>>        PickupFilter;                                      // 0x148(0x10)(Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValContract_Pickup* GetDefaultObj();

	void OnPickup(struct CoreUObject_Guid& PlayerUuid, class AValPickup* Pickup);
};

// 0x8 (0x150 - 0x148)
// Class Valhalla.ValContract_Stat
class UValContract_Stat : public UValContract
{
public:
	enum class EGameStatType                     StatType;                                          // 0x148(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4FA2[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValContract_Stat* GetDefaultObj();

	void OnPlayerStat(struct CoreUObject_Guid& PlayerUuid, enum class EGameStatType Type, int32 Value);
};

// 0x28 (0xC8 - 0xA0)
// Class Valhalla.ValCrouchComponent
class UValCrouchComponent : public UActorComponent
{
public:
	float                                        CrouchAlpha;                                       // 0xA0(0x4)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CrouchSpeed;                                       // 0xA4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CrouchCamDist;                                     // 0xA8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        UnCrouchSpeed;                                     // 0xAC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CurrentCrouchZ;                                    // 0xB0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4FA4[0x4];                                     // Fixing Size After Last Property  
	class UCurveFloat*                           CrouchHeightCurve;                                 // 0xB8(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SkiCrouchSpeedMultiplier;                          // 0xC0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4FA5[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValCrouchComponent* GetDefaultObj();

	void Evaluate(class AValCharacter* ViewTarget, float DeltaSeconds, struct CoreUObject_Vector& ViewLocation, struct CoreUObject_Vector* NewViewLocation);
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValCustomDataLibrary
class UValCustomDataLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UValCustomDataLibrary* GetDefaultObj();

	int32 GetInventoryUpgradeLevel(struct RallyHereIntegration_RH_ItemInventory& InventoryItem);
	bool GetInventoryRarity(struct RallyHereIntegration_RH_ItemInventory& InventoryItem, enum class ERarity* Rarity);
	bool GetCustomDataUpgradeLevel(TArray<struct PlatformInterface_StringPair>& CustomData, int32* UpgradeLevel);
	bool GetCustomDataSortOrder(TArray<struct PlatformInterface_StringPair>& CustomData, int32* SortOrder);
	bool GetCustomDataRarity(TArray<struct PlatformInterface_StringPair>& CustomData, enum class ERarity* Rarity);
	bool GetCustomDataPurchased(TArray<struct PlatformInterface_StringPair>& CustomData, bool* Purchased);
	bool GetCustomDataProperties(TArray<struct PlatformInterface_StringPair>& CustomData, TArray<enum class EPlayerProperty>* PlayerProperties);
	bool GetCustomDataPlayerData(TArray<struct PlatformInterface_StringPair>& CustomData, struct Valhalla_InventoryPlayerData* PlayerData);
	bool GetCustomDataPlayerAttributeData(TArray<struct PlatformInterface_StringPair>& CustomData, TArray<struct Valhalla_PlayerAttributeData>* PlayerAttributeData);
	bool GetCustomDataOffensivePower(TArray<struct PlatformInterface_StringPair>& CustomData, float* OffensivePower);
	bool GetCustomDataMapSortOrder(TMap<class FString, class FString>& CustomData, int32* SortOrder);
	bool GetCustomDataMapPlayerAttributeData(TMap<class FString, class FString>& CustomData, TArray<struct Valhalla_PlayerAttributeData>* PlayerAttributeData);
	bool GetCustomDataMapGameplayTags(TMap<class FString, class FString>& CustomData, struct GameplayTags_GameplayTagContainer* GameplayTags);
	bool GetCustomDataMapContractRewards(TMap<class FString, class FString>& CustomData, TArray<struct Valhalla_ContractLoot>* ContractRewards);
	bool GetCustomDataItemSource(TArray<struct PlatformInterface_StringPair>& CustomData, int32* ItemSource);
	bool GetCustomDataGameplayTags(TArray<struct PlatformInterface_StringPair>& CustomData, struct GameplayTags_GameplayTagContainer* GameplayTags);
	bool GetCustomDataDefensivePower(TArray<struct PlatformInterface_StringPair>& CustomData, float* DefensivePower);
	bool GetCustomDataCustomName(TArray<struct PlatformInterface_StringPair>& CustomData, class FString* CustomName);
	bool GetCustomDataContractRewards(TArray<struct PlatformInterface_StringPair>& CustomData, TArray<struct Valhalla_ContractLoot>* ContractRewards);
	bool GetCustomDataChildItemIds(TArray<struct PlatformInterface_StringPair>& CustomData, TArray<int32>* ChildItemIds);
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValDamageable
class IValDamageable : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IValDamageable* GetDefaultObj();

	void OnHealed(const struct Valhalla_DamageData& DamageData);
	void OnDamaged(const struct Valhalla_DamageData& DamageData);
	bool IsAlive();
	bool CanBeHealed();
	bool CanBeDamaged();
	bool AlwaysDamageable();
};

// 0x0 (0x40 - 0x40)
// Class Valhalla.ValDamageExecutionCalc
class UValDamageExecutionCalc : public UGameplayEffectExecutionCalculation
{
public:

	static class UClass* StaticClass();
	static class UValDamageExecutionCalc* GetDefaultObj();

};

// 0x30 (0x2C8 - 0x298)
// Class Valhalla.ValDamageIndicatorActor
class AValDamageIndicatorActor : public AActor
{
public:
	TWeakObjectPtr<class AActor>                 TargetActor;                                       // 0x298(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        IndicatorTime;                                     // 0x2A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpawnTime;                                         // 0x2A4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShutdownTime;                                      // 0x2A8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4FC7[0x4];                                     // Fixing Size After Last Property  
	struct Engine_TimerHandle                    SpawnCompleteTimer;                                // 0x2B0(0x8)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Engine_TimerHandle                    IndicatorTimer;                                    // 0x2B8(0x8)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Engine_TimerHandle                    ShutdownTimer;                                     // 0x2C0(0x8)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValDamageIndicatorActor* GetDefaultObj();

	void OnSpawnCompleteTimerExpired();
	void OnShutdownTimerExpired();
	void OnIndicatorTimerExpired();
	bool IsTargetValidToTrack();
	void BeginShutdown();
};

// 0x60 (0x2F8 - 0x298)
// Class Valhalla.ValDataManager
class AValDataManager : public AActor
{
public:
	FMulticastInlineDelegateProperty_            OnDataManagerReadyEvent;                           // 0x298(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AGameModeBase>          WeakGameMode;                                      // 0x2A8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValGameState>          WeakGameState;                                     // 0x2B0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UValPlayerInventory>    WeakPlayerInventory;                               // 0x2B8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValPlayerController>   WeakOwningPlayer;                                  // 0x2C0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4FCC[0x30];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValDataManager* GetDefaultObj();

	void OnPlayerInfoReady(class URHS_PlayerInfo* PlayerInfo);
	void OnInventoryUpdated(TArray<int32>& ItemIds);
	void OnInventoryOrderResults(bool Success, const struct CoreUObject_Guid& OrderReferenceId);
	void OnInventoryLoaded();
	void OnDataManagerReady();
	bool IsDataManagerReady();
	struct CoreUObject_Guid GetPlayerUuid(bool LogError);
	class UValPlayerInventory* GetPlayerInventory();
	class AValPlayerController* GetOwningPlayer();
	class AValGameState* GetGameState(bool LogError);
	class AGameModeBase* GetGameMode();
};

// 0x190 (0x1B8 - 0x28)
// Class Valhalla.ValDataTableManager
class UValDataTableManager : public UObject
{
public:
	uint8                                        Pad_4FEA[0xE8];                                    // Fixing Size After Last Property  
	class UDataTable*                            MissionTable;                                      // 0x110(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                            GameplayTextTable;                                 // 0x118(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                            DamageSourcesTable;                                // 0x120(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                            ContractTable;                                     // 0x128(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                            ContractTaskTable;                                 // 0x130(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                            ContractShopTable;                                 // 0x138(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                            UpgradeTreesTable;                                 // 0x140(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                            ItemUpgradesTable;                                 // 0x148(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                            ItemTreesTable;                                    // 0x150(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                            FrontierScoringConfigTable;                        // 0x158(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                            FabricatorItemsTable;                              // 0x160(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4FED[0x50];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValDataTableManager* GetDefaultObj();

	class UDataTable* GetUpgradeTreesTable();
	void GetUpgradeTreeRowNames(TArray<class FName>* OutUpgradeTrees);
	void GetUpgradeTreeNodes(class FName UpgradeTree, TMap<class FName, struct Valhalla_UpgradeTreeNode>* OutUpgradeTreeNodes);
	bool GetUpgradeTreeNode(class FName& TreeName, class FName& UpgradeName, struct Valhalla_UpgradeTreeNode* OutUpgradeTreeNode);
	bool GetUpgradeTree(class FName& TreeName, struct Valhalla_UpgradeTree* OutUpgradeTree);
	class UDataTable* GetTable(class UDataTable* PCachedTable, const struct CoreUObject_SoftObjectPath& Path);
	void GetShopContracts(TArray<struct Valhalla_ContractShop>* Shop);
	bool GetShopContract(class FName ShopContractID, struct Valhalla_ContractShop* ShopContract);
	class UDataTable* GetMissionTable();
	bool GetMissionData(class FName Name, struct Valhalla_MissionData* Data);
	class UDataTable* GetItemUpgradeTable();
	bool GetItemUpgrade(class FName& ItemName, struct Valhalla_BoostItem* OutItemUpgrade);
	class UDataTable* GetItemTreesTable();
	void GetItemTreesByCategory(enum class ETreeCategory Category, TArray<class FName>* OutUpgradeTrees);
	bool GetItemTree(class FName ItemTreeName, struct Valhalla_BoostTree* OutItemTree);
	class UDataTable* GetGameplayTextTable();
	bool GetGameplayText(struct GameplayTags_GameplayTag& Tag, class FText* Text);
	class UDataTable* GetFrontierScoringConfigTable();
	bool GetFrontierScoringConfig(class FName RowName, struct Valhalla_FrontierScoring* FrontierScoring);
	bool GetFirstGameplayTextByContainer(struct GameplayTags_GameplayTagContainer& TagContainer, class FText* Text);
	class UDataTable* GetFabricatorItemsTable();
	bool GetFabricatorItem(class FName& ItemName, struct Valhalla_FabricatorItem* OutFabricatorItem);
	class UDataTable* GetDamageSourcesTable();
	bool GetDamageSource(const struct GameplayTags_GameplayTag& DamageSource, struct Valhalla_DamageSourceMapping* OutDamageSource);
	bool GetContractTask(class FName TaskId, struct Valhalla_ContractTask* Task);
	bool GetContract(class FName ContractId, struct Valhalla_Contract* Contract);
	void GetChildrenNodes(class UDataTable* Table, TArray<class FName>& ChildrenNodes, TMap<class FName, struct Valhalla_UpgradeTreeNode>* OutUpgradeTreeNodes);
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValDependencyInterface
class IValDependencyInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IValDependencyInterface* GetDefaultObj();

	void RegisterDependency(class FName Category, class FName DependencyName, class UObject* DependencyObject);
	bool HasDependencies(class FName Category);
	bool HasAnyDependencies();
	class UObject* DependencySatisfied(class UWorld* World, class FName Category, class FName DependencyName);
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValDeployable
class IValDeployable : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IValDeployable* GetDefaultObj();

	class UAbilitySystemComponent* GetASC();
};

// 0x10 (0x40 - 0x30)
// Class Valhalla.ValDeployableAudioVisual
class UValDeployableAudioVisual : public UDataAsset
{
public:
	class USkeletalMesh*                         Mesh;                                              // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UValAnimInstance>          ABP;                                               // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValDeployableAudioVisual* GetDefaultObj();

};

// 0x280 (0x4E0 - 0x260)
// Class Valhalla.ValDeviceAudioVisual
class UValDeviceAudioVisual : public UValAbilityAudioVisual
{
public:
	enum class EWeaponType                       WeaponType;                                        // 0x260(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5003[0x7];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_ActionFX>             AlwaysOnActions;                                   // 0x268(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_ActionFX>             FireActions;                                       // 0x278(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_ActionFX>             AltFireActions;                                    // 0x288(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_ActionFX>             ADSActions;                                        // 0x298(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_ActionFX>             ReloadActions;                                     // 0x2A8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_ActionFX>             ChargeActions;                                     // 0x2B8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_ActionFX>             RemainingAmmoActions;                              // 0x2C8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bAlwaysPlayDefaultSurfaceTypeImpactFX;             // 0x2D8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseGunMeshForMuzzleFlash;                         // 0x2D9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bGunfireFXIsDistanceBased;                         // 0x2DA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShouldFireSimultaneously;                         // 0x2DB(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5005[0x4];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_HitImpactFX>          HitImpactFXList;                                   // 0x2E0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                        FriendlyFireFx;                                    // 0x2F0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                    HitDecal;                                          // 0x2F8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_Vector                    HitDecalSize;                                      // 0x300(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_FloatRange                HitDecalRandomRoll;                                // 0x318(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HitDecalLifetime;                                  // 0x328(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5006[0x4];                                     // Fixing Size After Last Property  
	TSubclassOf<class UCameraShakeBase>          HitShake;                                          // 0x330(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HitShakeRadius;                                    // 0x338(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HitShakeFalloff;                                   // 0x33C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                        TracerFX;                                          // 0x340(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                        TracerFX1P;                                        // 0x348(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         HideADSFXWhileActive;                              // 0x350(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EScopeType                        ScopeType;                                         // 0x351(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EReticleType                      ReticleType;                                       // 0x352(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5007[0x5];                                     // Fixing Size After Last Property  
	TSubclassOf<class UCameraShakeBase>          ShootShake;                                        // 0x358(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        KickbackMinFiringDuration;                         // 0x360(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5008[0x4];                                     // Fixing Size After Last Property  
	TSubclassOf<class UCameraShakeBase>          ADSDriftShake;                                     // 0x368(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAimAffectsFOV;                                    // 0x370(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5009[0x7];                                     // Fixing Size After Last Property  
	TArray<float>                                AimingFOV;                                         // 0x378(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UCurveVector*                          KickbackCurve;                                     // 0x388(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIJiggle*                             UIJiggle;                                          // 0x390(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          ProgressiveReloadMontage;                          // 0x398(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                         StartAnim;                                         // 0x3A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                         LoopAnim;                                          // 0x3A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                         EndAnim;                                           // 0x3B0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          ProgressiveReloadMontage3P;                        // 0x3B8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         PickupSound;                                       // 0x3C0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            MetaPickupSound;                                   // 0x3C8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         ShootSound;                                        // 0x3D0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            MetaShootSound;                                    // 0x3D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         WhileFiringSound;                                  // 0x3E0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            MetaWhileFiringSound;                              // 0x3E8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            MetaEnemy3PFireSound;                              // 0x3F0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            MetaFriendly3PFireSound;                           // 0x3F8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         WhileFiringSoundStop;                              // 0x400(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         StopFireSound;                                     // 0x408(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         ReloadSound;                                       // 0x410(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            MetaReloadSound;                                   // 0x418(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         BuildupSound;                                      // 0x420(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            MetaBuildupSound;                                  // 0x428(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         LowAmmoSound;                                      // 0x430(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            MetaLowAmmoSound;                                  // 0x438(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         DryFireSound;                                      // 0x440(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            MetaDryFireSound;                                  // 0x448(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         AmbientSound;                                      // 0x450(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            MetaAmbientSound;                                  // 0x458(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         BeginADSSound;                                     // 0x460(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            MetaBeginADSSound;                                 // 0x468(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         EndADSSound;                                       // 0x470(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            MetaEndADSSound;                                   // 0x478(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         CustomImpactSound;                                 // 0x480(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            MetaEnemyCustomImpactSound;                        // 0x488(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            MetaFriendlyCustomImpactSound;                     // 0x490(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         BeamClosestPointSound;                             // 0x498(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            MetaBeamClosestPointSound;                         // 0x4A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkSwitchValue*                        BulletImpactWeight;                                // 0x4A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkSwitchValue*                        WeaponSize;                                        // 0x4B0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EImpactSoundBehavior              ImpactSoundBehavior;                               // 0x4B8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         PlayADSSoundOnNonLocalClients;                     // 0x4B9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_500B[0x6];                                     // Fixing Size After Last Property  
	class UValAimAssistConfigDataAsset*          CustomAimAssistConfig;                             // 0x4C0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AValPickup>                Pickup;                                            // 0x4C8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           DamageRampCurve;                                   // 0x4D0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          IdleAnim;                                          // 0x4D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValDeviceAudioVisual* GetDefaultObj();

	bool IsMelee();
	TArray<class FName> GetActionsSocketNames(TArray<struct Valhalla_ActionFX>& Actions, enum class ECameraPerspective CameraPerspective);
	int32 GetActionsSocketCount(TArray<struct Valhalla_ActionFX>& Actions, enum class ECameraPerspective CameraPerspective);
};

// 0x128 (0x3C0 - 0x298)
// Class Valhalla.ValDoor
class AValDoor : public AActor
{
public:
	uint8                                        Pad_5019[0x20];                                    // Fixing Size After Last Property  
	bool                                         R_bIsChannelingCancelled;                          // 0x2B8(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_501A[0x7];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnChanneledInteractStarted;                        // 0x2C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnChanneledInteractEnded;                          // 0x2D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDoorChannelerChangedDel;                         // 0x2E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        DoorOpenTime;                                      // 0x2F0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DoorCloseTime;                                     // 0x2F4(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDoorPressToChannelStartedDel;                    // 0x2F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FText                                  InteractText;                                      // 0x308(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UBoxComponent*                         InteractCollisionComp;                             // 0x320(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                  OpenText;                                          // 0x328(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                  CloseText;                                         // 0x340(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                         R_DoorOpen;                                        // 0x358(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_501B[0x7];                                     // Fixing Size After Last Property  
	class AValCharacter*                         R_Channeler;                                       // 0x360(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bOpenAutomatically;                                // 0x368(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_501D[0x3];                                     // Fixing Size After Last Property  
	float                                        AutoCloseTime;                                     // 0x36C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    AutoCloseTimer;                                    // 0x370(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDoorForcedOpen;                                   // 0x378(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bPressToChannel;                                   // 0x379(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bDoorChanneling;                                 // 0x37A(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_501E[0x5];                                     // Fixing Size After Last Property  
	struct Valhalla_ValDoorChannelStartStruct    R_DoorChannelStartStruct;                          // 0x380(0x10)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_501F[0x8];                                     // Fixing Size After Last Property  
	TSubclassOf<class AActor>                    AkPortalActorToSpawn;                              // 0x398(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              OpenedSmartObjectInstanceTag;                      // 0x3A0(0x8)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AkPortalCloseDelayTime;                            // 0x3A8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5020[0x4];                                     // Fixing Size After Last Property  
	struct Engine_TimerHandle                    AkPortalDelayHandle;                               // 0x3B0(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UValAkPortalComponent>  ManagedAkPortal;                                   // 0x3B8(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValDoor* GetDefaultObj();

	bool TryInteractDoor(class AValCharacter* Initiator, class AValInteractablePanel* InitiatorPanel);
	void ToggleDoor(class AValCharacter* Initiator);
	void StartChanneledInteract(class AValCharacter* Initiator);
	void SetIsCancelledChanneling(bool bIsCancelled);
	void SetCachedChanneler(class AValCharacter* Initiator);
	void PredictInteractDoor(bool bOpen);
	void OnRep_DoorStartChannel();
	void OnRep_DoorOpen();
	void OnRep_Channeler();
	void OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnDoorStatusChanged(bool DoorOpen);
	void OnDoorSetHidden();
	void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct Engine_HitResult& SweepResult);
	bool IsDoorOpen();
	bool GetIsCancelledChanneling();
	class FText GetInteractTextOverride();
	class UPrimitiveComponent* GetInteractComponent();
	float GetChannelTime(class AValCharacter* Initiator);
	class AValCharacter* GetCachedChanneler();
	void EndChanneledInteract(class AValCharacter* Initiator);
	void DelayCloseAkPortal();
	float CalculateRequiredChannelTime(class AValCharacter* Initiator);
	void AttemptToClose();
};

// 0x10 (0x2E0 - 0x2D0)
// Class Valhalla.ValDropPodVolume
class AValDropPodVolume : public AVolume
{
public:
	int32                                        AssignedTeam;                                      // 0x2D0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5022[0x4];                                     // Fixing Size After Last Property  
	class AValPodLauncher*                       PodLauncher;                                       // 0x2D8(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValDropPodVolume* GetDefaultObj();

};

// 0x50 (0x78 - 0x28)
// Class Valhalla.ValDungeonRoomData
class UValDungeonRoomData : public UObject
{
public:
	struct CoreUObject_IntPoint                  Coords;                                            // 0x28(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_IntPoint                  Dimensions;                                        // 0x30(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ENeighborDir                      Orientation;                                       // 0x38(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5023[0x7];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_NeighborLink>         Neighbors;                                         // 0x40(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        MaxDoors;                                          // 0x50(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5024[0x4];                                     // Fixing Size After Last Property  
	TArray<struct CoreUObject_IntPoint>          FreeDirs;                                          // 0x58(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bIsSpawnRoom;                                      // 0x68(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsMiniBossRoom;                                   // 0x69(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsEndRoom;                                        // 0x6A(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMovable;                                          // 0x6B(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        InstanceIndex;                                     // 0x6C(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AValDungeonRoom*                       DungeonRoomActor;                                  // 0x70(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValDungeonRoomData* GetDefaultObj();

};

// 0xB0 (0xE0 - 0x30)
// Class Valhalla.ValDungeonConfig
class UValDungeonConfig : public UDataAsset
{
public:
	TSoftClassPtr<class AValDungeonRoom>         DungeonRoomActorSoftPtr;                           // 0x30(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_RoomContentsCount>    GuaranteedInteriorContents;                        // 0x58(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_RoomContentsCount>    GuaranteedExteriorContents;                        // 0x68(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftClassPtr<class AActor>                  PostProcessActorSoftPtr;                           // 0x78(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class AActor>                  BossRoomActor;                                     // 0xA0(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_Vector                    BossRoomActorOffset;                               // 0xC8(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValDungeonConfig* GetDefaultObj();

};

// 0x98 (0x368 - 0x2D0)
// Class Valhalla.ValEffectGivingVolume
class AValEffectGivingVolume : public AVolume
{
public:
	TSubclassOf<class UGameplayEffect>           EffectToApply;                                     // 0x2D0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        EffectLevel;                                       // 0x2D8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct GameplayTags_GameplayTag              SetByCallerMagnitudeTag;                           // 0x2DC(0x8)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5026[0x4];                                     // Fixing Size After Last Property  
	TArray<TSubclassOf<class UGameplayEffect>>   EffectsToRemove;                                   // 0x2E8(0x10)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct GameplayTags_GameplayTagContainer     CancelAbilitiesWithTag;                            // 0x2F8(0x20)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                        Pad_5027[0x50];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValEffectGivingVolume* GetDefaultObj();

	void OnActorLeftVolume(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnActorEnteredVolume(class AActor* OverlappedActor, class AActor* OtherActor);
};

// 0x18 (0x320 - 0x308)
// Class Valhalla.ValEffectVolume
class AValEffectVolume : public APainCausingVolume
{
public:
	TSubclassOf<class UGameplayEffect>           EffectToApply;                                     // 0x308(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        EffectLevel;                                       // 0x310(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct GameplayTags_GameplayTag              SetByCallerMagnitudeTag;                           // 0x314(0x8)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5028[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValEffectVolume* GetDefaultObj();

};

// 0x0 (0xA0 - 0xA0)
// Class Valhalla.ValEngineerClassComponent
class UValEngineerClassComponent : public UValClassComponentBase
{
public:

	static class UClass* StaticClass();
	static class UValEngineerClassComponent* GetDefaultObj();

};

// 0x78 (0x108 - 0x90)
// Class Valhalla.ValEnvQueryGenerator_Box
class UValEnvQueryGenerator_Box : public UEnvQueryGenerator_ProjectedPoints
{
public:
	struct AIModule_AIDataProviderFloatValue     BoxSize;                                           // 0x90(0x38)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct AIModule_AIDataProviderFloatValue     SpaceBetween;                                      // 0xC8(0x38)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UEnvQueryContext>          GenerateAround;                                    // 0x100(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValEnvQueryGenerator_Box* GetDefaultObj();

};

// 0x78 (0x108 - 0x90)
// Class Valhalla.ValEnvQueryGenerator_Cover
class UValEnvQueryGenerator_Cover : public UEnvQueryGenerator_ProjectedPoints
{
public:
	struct AIModule_AIDataProviderFloatValue     DistanceFromCoverObject;                           // 0x90(0x38)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct AIModule_AIDataProviderFloatValue     DistanceFromCoverPoints;                           // 0xC8(0x38)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UEnvQueryContext>          GenerateAround;                                    // 0x100(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValEnvQueryGenerator_Cover* GetDefaultObj();

};

// 0x70 (0x358 - 0x2E8)
// Class Valhalla.ValEnvQueryTest_3ptTrace
class UValEnvQueryTest_3ptTrace : public UEnvQueryTest_Trace
{
public:
	struct AIModule_AIDataProviderFloatValue     XYOffsetSize;                                      // 0x2E8(0x38)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct AIModule_AIDataProviderBoolValue      RequireMatchedResult;                              // 0x320(0x38)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValEnvQueryTest_3ptTrace* GetDefaultObj();

};

// 0xB0 (0x348 - 0x298)
// Class Valhalla.ValExperienceManager
class AValExperienceManager : public AActor
{
public:
	FMulticastInlineDelegateProperty_            OnInstanceLevelChanged;                            // 0x298(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnInstanceXpChanged;                               // 0x2A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnXpTracksLoaded;                                  // 0x2B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_5042[0x20];                                    // Fixing Size After Last Property  
	struct CoreUObject_Guid                      PlayerId;                                          // 0x2E8(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValPlayerController>   WeakOwningPlayer;                                  // 0x2F8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UValExperienceTrackAsset*>      ExperienceTracks;                                  // 0x300(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_ExperienceData>       R_ExperienceInstances;                             // 0x310(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<class UValExperienceTracker*>         ActiveExperienceTrackers;                          // 0x320(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_5043[0x18];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValExperienceManager* GetDefaultObj();

	void ServerQueryPlayerXpInfo(const struct GameplayTags_GameplayTag& ExperienceType);
	void OnRep_ExperienceInstances();
	void OnPlayerInfoReady(class URHS_PlayerInfo* PlayerInfo);
	void OnInventoryUpdated(TArray<int32>& ItemIds);
	void OnInventoryLoaded();
	void OnInstanceLevel(const struct GameplayTags_GameplayTag& ExperienceType, int32 CurrentLevel);
	void OnInstanceExperience(const struct GameplayTags_GameplayTag& ExperienceType, int32 CurrentXP);
	void OnAssetsLoaded();
	class UValXpTable* GetXpTable(struct GameplayTags_GameplayTag& LevelType);
	int32 GetRequiredItemId(struct GameplayTags_GameplayTag& LevelType);
	bool GetReputationTierAndDivision(struct GameplayTags_GameplayTag& LevelType, class UValTierConfig** Tier, class UValDivisionConfig** Division, int32 Level);
	int32 GetPlayerXP(struct GameplayTags_GameplayTag& LevelType);
	bool GetPlayerTierAndDivision(struct GameplayTags_GameplayTag& LevelType, class UValTierConfig** Tier, class UValDivisionConfig** Division);
	int32 GetPlayerLevel(struct GameplayTags_GameplayTag& LevelType);
	bool GetExperienceData(struct GameplayTags_GameplayTag& ExperienceType, struct Valhalla_ExperienceData* OutExperienceData);
	bool GetAgentInstanceByTag(struct GameplayTags_GameplayTag& AgentTag, struct Valhalla_ExperienceData* OutAgentData);
};

// 0x148 (0x178 - 0x30)
// Class Valhalla.ValExperienceTrackAsset
class UValExperienceTrackAsset : public UPrimaryDataAsset
{
public:
	int32                                        ProgressItemId;                                    // 0x30(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        ProgressLootId;                                    // 0x34(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        RequiredItemId;                                    // 0x38(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5048[0x4];                                     // Fixing Size After Last Property  
	TSoftObjectPtr<class UValXpTable>            XpTable;                                           // 0x40(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bStaticRewardPerLevel;                             // 0x68(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5049[0x7];                                     // Fixing Size After Last Property  
	struct Valhalla_ExperienceLevelRewardItem    StaticReward;                                      // 0x70(0x38)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<int32, struct Valhalla_ExperienceLevelRewardItemGroup> RewardsPerLevel;                                   // 0xA8(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UValTierConfig*>                Tiers;                                             // 0xF8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_ExperienceTrackerConfig> Trackers;                                          // 0x108(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              ExperienceType;                                    // 0x118(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        VipMultiplier;                                     // 0x120(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              ClassTag;                                          // 0x124(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_504A[0x4];                                     // Fixing Size After Last Property  
	struct GameplayTags_GameplayTagContainer     GameplayTags;                                      // 0x130(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                         Enabled;                                           // 0x150(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_504B[0x3];                                     // Fixing Size After Last Property  
	class FName                                  AssetId;                                           // 0x154(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_504C[0x4];                                     // Fixing Size After Last Property  
	class FText                                  DisplayName;                                       // 0x160(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValExperienceTrackAsset* GetDefaultObj();

	bool GetTierAndDivisionFromLevel(int32 Level, class UValTierConfig** OutTier, class UValDivisionConfig** OutDivision);
	bool GetRewardsAtLevel(int32 Level, TArray<struct Valhalla_ExperienceLevelRewardItem>* Rewards);
	TArray<struct Valhalla_ExperienceLevelRewardItemGroup> GetRewards();
};

// 0x48 (0x70 - 0x28)
// Class Valhalla.ValExperienceTracker
class UValExperienceTracker : public UObject
{
public:
	TWeakObjectPtr<class UValExperienceTrackAsset> ExperienceTrackAsset;                              // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValExperienceManager*                 OwningManager;                                     // 0x30(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EPlayerExperienceSource           XPSource;                                          // 0x38(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUseFlatReward;                                    // 0x39(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_504E[0x2];                                     // Fixing Size After Last Property  
	int32                                        RequiredAmountToAward;                             // 0x3C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bFirstOfTheDayBonus;                               // 0x40(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsRanked;                                         // 0x41(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_504F[0x2];                                     // Fixing Size After Last Property  
	int32                                        BonusAwardAmount;                                  // 0x44(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5050[0x10];                                    // Fixing Size After Last Property  
	TWeakObjectPtr<class AValPlayerState>        WeakPlayerState;                                   // 0x58(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UValPlayerInventory>    WeakPlayerInventory;                               // 0x60(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValPlayerController>   WeakPlayerController;                              // 0x68(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValExperienceTracker* GetDefaultObj();

	class AValPlayerState* GetPlayerState();
	class UValPlayerInventory* GetPlayerInventory();
	struct CoreUObject_Guid GetPlayerId();
	class AValPlayerController* GetPlayerController();
	void AddProgress(int32 Count);
};

// 0x0 (0x70 - 0x70)
// Class Valhalla.ValExperienceTracker_EntryCost
class UValExperienceTracker_EntryCost : public UValExperienceTracker
{
public:

	static class UClass* StaticClass();
	static class UValExperienceTracker_EntryCost* GetDefaultObj();

	void OnXpTracksLoaded();
	void OnPlayerLevelChanged(const struct GameplayTags_GameplayTag& LevelType, int32 Level);
	void OnEntryCostUpdated(int32 Value);
};

// 0x8 (0x78 - 0x70)
// Class Valhalla.ValExperienceTracker_Extraction
class UValExperienceTracker_Extraction : public UValExperienceTracker
{
public:
	int32                                        VendorLoadGroupId;                                 // 0x70(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5051[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValExperienceTracker_Extraction* GetDefaultObj();

	void OnPlayerExtracted();
};

// 0x30 (0xA0 - 0x70)
// Class Valhalla.ValExperienceTracker_Extraction_Bonus
class UValExperienceTracker_Extraction_Bonus : public UValExperienceTracker
{
public:
	int32                                        VendorLoadGroupId;                                 // 0x70(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5052[0x4];                                     // Fixing Size After Last Property  
	class UValPlayerInventory*                   PlayerInventory;                                   // 0x78(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                Bonuses;                                           // 0x80(0x10)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                        XPTRACKER_DAILY_EXTRACTION_COUNT_LOOT_TABLE_ID;    // 0x90(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        XPTRACKER_DAILY_EXTRACTION_COUNT_ITEM_ID;          // 0x94(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        ExtractionCount;                                   // 0x98(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5053[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValExperienceTracker_Extraction_Bonus* GetDefaultObj();

	void OnPlayerExtracted();
	void OnInventoryLoaded();
	TArray<int32> GetBonuses();
};

// 0x28 (0x98 - 0x70)
// Class Valhalla.ValExperienceTracker_ItemFound
class UValExperienceTracker_ItemFound : public UValExperienceTracker
{
public:
	TArray<class UDataAsset*>                    LootToTrack;                                       // 0x70(0x10)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                         bRequireFoundInMatch;                              // 0x80(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5056[0x7];                                     // Fixing Size After Last Property  
	TArray<int32>                                ItemIds;                                           // 0x88(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValExperienceTracker_ItemFound* GetDefaultObj();

	void OnItemFound(struct Valhalla_InventoryItem& InventoryItem);
	void OnDogTagFound(bool bIsFriendly, int32 Split, struct Valhalla_InventoryItem& InventoryItem, enum class EPlayerLevelType LevelType);
};

// 0x8 (0x78 - 0x70)
// Class Valhalla.ValExperienceTracker_Placement
class UValExperienceTracker_Placement : public UValExperienceTracker
{
public:
	class UCurveTable*                           PointsPerPlacement;                                // 0x70(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValExperienceTracker_Placement* GetDefaultObj();

	void OnPlayerPlace(int32 Place);
};

// 0x28 (0x98 - 0x70)
// Class Valhalla.ValExperienceTracker_Reputation_Bonus
class UValExperienceTracker_Reputation_Bonus : public UValExperienceTracker
{
public:
	float                                        InMatchStartTime;                                  // 0x70(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        CurrentSeasonBonus;                                // 0x74(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        CurrentDailyBonus;                                 // 0x78(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        XPTRACKER_SEASON_REP_BONUS_LOOT_TABLE_ID;          // 0x7C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        XPTRACKER_SEASON_REP_BONUS_ITEM_ID;                // 0x80(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        XPTRACKER_SEASON_REP_STACK_LIMIT;                  // 0x84(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        XPTRACKER_DAILY_REP_BONUS_LOOT_TABLE_ID;           // 0x88(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        XPTRACKER_DAILY_REP_BONUS_ITEM_ID;                 // 0x8C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        XPTRACKER_DAILY_REP_STACK_LIMIT;                   // 0x90(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5058[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValExperienceTracker_Reputation_Bonus* GetDefaultObj();

	void OnPlayerUpdateDead(bool bIsDead);
	void OnPlayerExtracted();
	void OnInventoryLoaded();
	float GetServerWorldTime();
	void CalculateBonusReputation();
};

// 0x8 (0x78 - 0x70)
// Class Valhalla.ValExperienceTracker_Stat
class UValExperienceTracker_Stat : public UValExperienceTracker
{
public:
	enum class EGameStatType                     StatToTrack;                                       // 0x70(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5059[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValExperienceTracker_Stat* GetDefaultObj();

};

// 0x8 (0x78 - 0x70)
// Class Valhalla.ValExperienceTracker_TimeAlive
class UValExperienceTracker_TimeAlive : public UValExperienceTracker
{
public:
	float                                        InMatchStartTime;                                  // 0x70(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_505A[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValExperienceTracker_TimeAlive* GetDefaultObj();

	void OnPlayerUpdateDead(bool bIsDead);
	void OnPlayerExtracted();
	float GetServerWorldTime();
};

// 0x68 (0x428 - 0x3C0)
// Class Valhalla.ValExplosiveBarrel
class AValExplosiveBarrel : public AValAttributeActor_StaticMesh
{
public:
	uint8                                        Pad_5061[0x10];                                    // Fixing Size After Last Property  
	class AValCharacter*                         R_HoldingCharacter;                                // 0x3D0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                      InteractCollisionComp;                             // 0x3D8(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                  InteractText;                                      // 0x3E0(0x18)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                        HealthPctPerLevel;                                 // 0x3F8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5062[0x4];                                     // Fixing Size After Last Property  
	TSubclassOf<class UGameplayEffect>           HealthEffect;                                      // 0x400(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5063[0x18];                                    // Fixing Size After Last Property  
	float                                        ThrowForceMagnitude;                               // 0x420(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        NetInterpolationSpeed;                             // 0x424(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValExplosiveBarrel* GetDefaultObj();

	void SetPhysicsSimulation(bool Simulated);
	void OnRep_HoldingCharacter();
	void Multicast_ThrowBarrel(const struct CoreUObject_Vector& ThrowVector);
	bool IsHeld();
	void Interact(class AValCharacter* Initiator);
	enum class EValInteractText GetInteractTextType();
	class FText GetInteractTextOverride();
	class FText GetInteractText();
	class UPrimitiveComponent* GetInteractComponent();
	class UPrimitiveComponent* GetGrabbableComponent();
	bool CanInteract(class AValCharacter* Initiator);
	void BP_ThrowBarrel(const struct CoreUObject_Vector& ThrowVector);
	void BP_OnInteract(class AValCharacter* Initiator);
	void BP_OnHoldingCharacterUpdated();
	void BP_OnDetachFromHolder();
	bool BP_CanInteract(class AValCharacter* Initiator);
	void ApplyHealthBonusByLevel(class UValSecurityLevel* CurrentSecurityLevel);
};

// 0x110 (0x3A8 - 0x298)
// Class Valhalla.ValBaseCrate
class AValBaseCrate : public AActor
{
public:
	uint8                                        Pad_506B[0x8];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnCrateStateChangedDel;                            // 0x2A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCrateInventoryChanged;                           // 0x2B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_506C[0x18];                                    // Fixing Size After Last Property  
	struct GameplayTags_GameplayTag              OpenedSmartObjectInstanceTag;                      // 0x2D8(0x8)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_InventorySlot>        R_Inventory;                                       // 0x2E0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	class AValCharacter*                         R_Initiator;                                       // 0x2F0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValCharacter*                         R_Channeler;                                       // 0x2F8(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bShouldGenerateOverlapEvents;                    // 0x300(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ECrateState                       R_CrateState;                                      // 0x301(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_506D[0x2];                                     // Fixing Size After Last Property  
	int32                                        CrateSize;                                         // 0x304(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ChannelTime;                                       // 0x308(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_506E[0x4];                                     // Fixing Size After Last Property  
	class FText                                  InteractText;                                      // 0x310(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UBoxComponent*                         CollisionComp;                                     // 0x328(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                      InteractCollisionComp;                             // 0x330(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                Mesh;                                              // 0x338(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bTrackFirstOpening;                                // 0x340(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_506F[0x67];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValBaseCrate* GetDefaultObj();

	void UpdateInteractableCharacters();
	void SetCachedChanneler(class AValCharacter* Initiator);
	void OnRep_ShouldGenerateOverlapEvents();
	void OnRep_Inventory();
	void OnRep_Initiator();
	void OnRep_CrateState();
	void OnRep_Channeler();
	void OnPlayerStoppedUsing();
	void OnPlayerStartedUsing();
	void OnFirstOpen(class AValPlayerController* ValPC);
	class USkeletalMeshComponent* GetMesh();
	class UPrimitiveComponent* GetInteractComponent();
	enum class ECrateState GetCurrentState();
	class UBoxComponent* GetCollisionComp();
	float GetChannelTime(class AValCharacter* Initiator);
	class AValCharacter* GetCachedChanneler();
	enum class EInteractionFailureType GetBlockInteractReason(class AValCharacter* Initiator);
	enum class EInteractionFailureType DetermineInteractEligibility(class AValCharacter* Initiator);
	void BPOnClientStartInteract();
	void BPOnClientEndInteract();
};

// 0x0 (0x3A8 - 0x3A8)
// Class Valhalla.ValExtractionCrate
class AValExtractionCrate : public AValBaseCrate
{
public:

	static class UClass* StaticClass();
	static class AValExtractionCrate* GetDefaultObj();

};

// 0x28 (0x2C0 - 0x298)
// Class Valhalla.ValFlashlightActor
class AValFlashlightActor : public AActor
{
public:
	class AValCharacter*                         ValCharacterOwner;                                 // 0x298(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsEnabled;                                        // 0x2A0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5074[0x7];                                     // Fixing Size After Last Property  
	class USceneComponent*                       SceneComponent;                                    // 0x2A8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpotLightComponent*                   FlashlightComponent;                               // 0x2B0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                     FlashlightFXComponent;                             // 0x2B8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValFlashlightActor* GetDefaultObj();

	void OnSetEnabledUpdated();
	void OnOwnerDied(float TimeToRespawn, class AValCharacter* Pawn);
	void OnLocalPCUpdatedViewTarget(class AActor* NewViewTarget);
	void BP_OnUpdateOwner();
	void BP_OnUpdateFlashlightLevel(int32 Level);
	void BP_OnRemoveDirectFlashlightFromTargets(TArray<class AActor*>& Targets);
	void BP_OnDisable();
	void BP_OnApplyDirectFlashlightToTargets(TArray<class AActor*>& Targets);
};

// 0x0 (0x40 - 0x40)
// Class Valhalla.ValFogDamageExecutionCalc
class UValFogDamageExecutionCalc : public UGameplayEffectExecutionCalculation
{
public:

	static class UClass* StaticClass();
	static class UValFogDamageExecutionCalc* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValFogInteraction
class IValFogInteraction : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IValFogInteraction* GetDefaultObj();

};

// 0x18 (0x700 - 0x6E8)
// Class Valhalla.ValCharacterFootprintOverlayComponent
class UValCharacterFootprintOverlayComponent : public UWidgetComponent
{
public:
	uint8                                        Pad_5076[0x18];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValCharacterFootprintOverlayComponent* GetDefaultObj();

};

// 0x8 (0x2C8 - 0x2C0)
// Class Valhalla.ValCharacterFootprintOverlay
class UValCharacterFootprintOverlay : public UUserWidget
{
public:
	float                                        FootprintLifespan;                                 // 0x2C0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5077[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValCharacterFootprintOverlay* GetDefaultObj();

	void OnUpdateVisibility(bool bShow);
};

// 0x20 (0x2B8 - 0x298)
// Class Valhalla.ValFootprint
class AValFootprint : public AActor
{
public:
	float                                        SpawnTime;                                         // 0x298(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FootprintLifespan;                                 // 0x29C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_Vector                    ForwardDirection;                                  // 0x2A0(0x18)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValFootprint* GetDefaultObj();

	void BPUpdateFootprint();
};

// 0x0 (0x1108 - 0x1108)
// Class Valhalla.ValGameEngine
class UValGameEngine : public URHGameEngine
{
public:

	static class UClass* StaticClass();
	static class UValGameEngine* GetDefaultObj();

};

// 0x60 (0x3B0 - 0x350)
// Class Valhalla.ValGameInstanceBase
class UValGameInstanceBase : public URHGameInstance
{
public:
	uint8                                        Pad_507A[0x10];                                    // Fixing Size After Last Property  
	TMap<int32, class UBackendService*>          BackendService;                                    // 0x360(0x50)(Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValGameInstanceBase* GetDefaultObj();

	class UBackendService* GetBackendServiceInterfaceIndex(int32 ControllerId);
	class UBackendService* GetBackendServiceInterface();
};

// 0x4D0 (0x880 - 0x3B0)
// Class Valhalla.ValGameInstance
class UValGameInstance : public UValGameInstanceBase
{
public:
	float                                        TravelDelay;                                       // 0x3B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_50AA[0x4];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnPendingQueue;                                    // 0x3B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPreTravel;                                       // 0x3C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGunShotCue;                                      // 0x3D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMotionDetectedCue;                               // 0x3E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnProjectileHitComponent;                          // 0x3F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLightPanelOvercharge;                            // 0x408(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLightPanelShutdown;                              // 0x418(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bRegisteredEndStreaming;                           // 0x428(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50AB[0xF];                                     // Fixing Size After Last Property  
	struct Engine_URL                            PendingTravelURL;                                  // 0x438(0x68)(Protected, NativeAccessSpecifierProtected)
	class UValDataTableManager*                  DataTableManager;                                  // 0x4A0(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVivoxVoiceChatManager*                ValVoiceChatManager;                               // 0x4A8(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50AC[0x58];                                    // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnLocalPlayerRepDel;                               // 0x508(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class AValLocalWorldAudioEvent>  LocalWorldAudioEventClass;                         // 0x518(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_50AD[0x50];                                    // Fixing Size After Last Property  
	TWeakObjectPtr<class AValWorldAudioEvent>    AudioEventActor;                                   // 0x570(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_50AE[0x50];                                    // Fixing Size After Last Property  
	bool                                         bRecommendLowerQuality;                            // 0x5C8(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_50AF[0x7];                                     // Fixing Size After Last Property  
	struct Valhalla_MatchSummaryData             MatchSummaryData;                                  // 0x5D0(0x30)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                        CachedReputation;                                  // 0x600(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_50B0[0x4];                                     // Fixing Size After Last Property  
	TArray<int32>                                UnlockedPerks;                                     // 0x608(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct GameplayTags_GameplayTag, struct Valhalla_PlayerXPInfo> PlayerXPInfoMap;                                   // 0x618(0x50)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                         ShowEOM;                                           // 0x668(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_50B1[0x7];                                     // Fixing Size After Last Property  
	TMap<class FString, struct Valhalla_ContractData> PlayerContractCache;                               // 0x670(0x50)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FString, struct Valhalla_ContractData> ShopContractCache;                                 // 0x6C0(0x50)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct CoreUObject_DateTime                  ShopRerollTime;                                    // 0x710(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShownGameSelect;                                  // 0x718(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_50B2[0x7];                                     // Fixing Size After Last Property  
	struct CoreUObject_SoftClassPath             LoadingScreenSubwidget;                            // 0x720(0x20)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bJoiningRemoteLobbyLoading;                        // 0x740(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50B3[0x7];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnLoadingScreenDropped;                            // 0x748(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActivityProgress;                                // 0x758(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<int64, int32>                           InitialActivityProgress;                           // 0x768(0x50)(Protected, NativeAccessSpecifierProtected)
	TMap<int64, int32>                           CurrentActivityProgress;                           // 0x7B8(0x50)(Protected, NativeAccessSpecifierProtected)
	bool                                         ShowEOMActivities;                                 // 0x808(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50B4[0x7];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_InventoryItem>        ActivityRewards;                                   // 0x810(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_50B5[0x50];                                    // Fixing Size After Last Property  
	TArray<class FString>                        NetworkFailureSessionIds;                          // 0x870(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValGameInstance* GetDefaultObj();

	void WwiseStopAudio(int32 AudioID, int32 TransitionDuration, enum class EAkCurveInterpolation FadeCurve);
	void UpdateInitialCachedActivities();
	void UpdateActivityProgress(int64 ActivityId, int32 Count);
	void TravelPendingURL();
	void SortActivities(TArray<class UValActivityPlayerInstance*>& Activities, TArray<class UValActivityPlayerInstance*>* SortedActivities);
	void SetMatchSummaryData(struct Valhalla_MatchSummaryData* NewMatchSummaryData);
	void SetKickErrorCode(class FText& ErrorCode);
	void SetJoiningRemoteLobby(bool bJoining);
	void SetDisconnectErrorCode(class FText& ErrorCode);
	void SetCurrentXP(const struct GameplayTags_GameplayTag& LevelType, int32 StartingXp, int32 GainedXP, int32 CurrentXP);
	void ProcessMotionDetected(class AActor* Instagator);
	void ProcessGunShot(class AActor* Instagator);
	void PostWorldAudioEvent(class AActor* Owner, const struct CoreUObject_Vector& Location, const struct GameplayTags_GameplayTag& ReferenceTag);
	int32 PostEventWithCleanup(class UAkAudioEvent* AkEvent, class USoundBase* Metasound, class UAudioComponent** AudioComponent, class AActor* Actor, bool bStopWhenAttachedToDestroyed);
	void OpenPendingQueue(class UValPendingQueue* PendingQueue);
	void OpenOfflineQueue(class UValOfflineQueueData* OfflineQueue);
	void OpenMapName(class FName MapName);
	void OpenLevelType(enum class ELevelType Type);
	void OnTravelURLReady(struct Engine_URL& TravelURL);
	void OnAudioFinishedPlaying(enum class EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
	void NetworkFailureEvent(class UWorld* InWorld, class UNetDriver* InNetDriver, enum class ENetworkFailure InFailureType, const class FString& InErrorDescription);
	void LoadingScreenVisibilityChanged(bool bVisible);
	void HandleLoginStatusChanged(enum class EBSLoginStatus OldStatus, enum class EBSLoginStatus NewStatus);
	void GetUnlockedPerks(TArray<int32>* OutUnlockedPerks);
	bool GetPlayerXP(const struct GameplayTags_GameplayTag& LevelType, struct Valhalla_PlayerXPInfo* PlayerXPInfo);
	TArray<class FString> GetNetworkFailureSessionIds();
	bool GetKickErrorCode(class FText* OutKickError);
	bool GetDisconnectErrorCode(class FText* OutDisconnectError);
	class UValDataTableManager* GetDataTableManager();
	bool GetActivityStartingProgress(class UValActivityAsset* Activity, int32* OutStartingProgress);
	void GetActivityRewards(TArray<struct Valhalla_InventoryItem>* OutActivityRewards);
	void GetActivityRewardItems(TArray<struct Valhalla_InventoryItem>* OutActivityRewards);
	bool GetActivityInstanceStartingProgress(class UValActivityPlayerInstance* PlayerActivity, int32* OutStartingProgress);
	bool GetActivityInstanceEndingProgress(class UValActivityPlayerInstance* PlayerActivity, int32* OutEndingProgress);
	bool GetActivityEndingProgress(class UValActivityAsset* Activity, int32* OutEndingProgress);
	void GetActivitiesStartingProgress(TMap<int64, int32>* StartingActivityProgress);
	void GetActivitiesEndingProgress(TMap<int64, int32>* EndingActivityProgress);
	void FlushMergedMeshCache();
	void ClearUnlockedPerks();
	void ClearMatchSummaryState();
	void ClearKickErrorCode();
	void ClearDisconnectErrorCode();
	void ClearActivityRewards();
	float CalculateTotalProgress(class UValActivityPlayerInstance* Activity);
	void CacheStartingPlayerActivities(TArray<class UValActivityPlayerInstance*>* PlayerActivities);
	void CachePlayerXP(int32 Value, const struct GameplayTags_GameplayTag& LevelType);
	void BroadcastPendingQueue(class UValPendingQueue* PendingQueue);
	void AddUnlockedPerks(TArray<int32>& NewUnlockedPerks);
	void AddPlayerXP(int32 Value, const struct GameplayTags_GameplayTag& LevelType, enum class EPlayerExperienceSource XPSource);
	void AddActivityRewards(TArray<struct Valhalla_InventoryItem>& NewActivityRewards);
};

// 0x3B0 (0x840 - 0x490)
// Class Valhalla.ValGameModeBase
class AValGameModeBase : public ARHGameModeBase
{
public:
	bool                                         bRestartOnJoinTaskComplete;                        // 0x490(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50B8[0x7];                                     // Fixing Size After Last Property  
	TSoftObjectPtr<class UValQueueData>          DefaultQueue;                                      // 0x498(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        QueueEntryCost;                                    // 0x4C0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsRanked;                                         // 0x4C4(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50B9[0x3];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_SecurityLevelConfig>  SecurityLevels;                                    // 0x4C8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_SecurityLevelConfig>  SortedSecurityLevels;                              // 0x4D8(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UValSecurityLevel*                     CurrentSecurityLevel;                              // 0x4E8(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnSecurityLevelChanged;                            // 0x4F0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UValQueueData*                         ActiveQueue;                                       // 0x500(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         UpdateCachedPlayerDataOnReconnect;                 // 0x508(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50BA[0xFF];                                    // Fixing Size After Last Property  
	class UValPlayerJoinTaskComponent*           PlayerJoinTaskComponent;                           // 0x608(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UValActivityConfigData*                ActivityConfig;                                    // 0x610(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValPlayerFinalizationTaskComponent*   PlayerFinalizationTaskComponent;                   // 0x618(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bMatchFinalizationAwaitingPlayerFinalization;      // 0x620(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShutdownOnLastPlayerDisconnect;                   // 0x621(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50BB[0x6];                                     // Fixing Size After Last Property  
	TArray<TSubclassOf<class UValVendorRuleset>> VendorRulesets;                                    // 0x628(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UValMasteriesConfigData*               MasteriesConfig;                                   // 0x638(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                SecureSlotItemIds;                                 // 0x640(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UValAgentConfig>> AgentConfigs;                                      // 0x650(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMap<class FString, class FString>           AppSettings;                                       // 0x660(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	bool                                         bFetchedAppSettings;                               // 0x6B0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50BC[0xF];                                     // Fixing Size After Last Property  
	bool                                         TrainingMode;                                      // 0x6C0(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         AllowShop;                                         // 0x6C1(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         AllowVendors;                                      // 0x6C2(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         AllowEditorLogin;                                  // 0x6C3(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         TransientItemLocking;                              // 0x6C4(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         ClientInventoryManagement;                         // 0x6C5(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50BD[0x2];                                     // Fixing Size After Last Property  
	int32                                        DefaultStashSize;                                  // 0x6C8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        DefaultStashTabs;                                  // 0x6CC(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTagContainer     BlacklistedStashTags;                              // 0x6D0(0x20)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int32                                        DefaultArsenalSize;                                // 0x6F0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        DefaultBackpackSize;                               // 0x6F4(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        DefaultMissionSlotsSize;                           // 0x6F8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50BE[0x4];                                     // Fixing Size After Last Property  
	TArray<int32>                                SecureSlotsLevelRequirements;                      // 0x700(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int32                                        UnlockedSecureSlotsForVIP;                         // 0x710(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50BF[0x4];                                     // Fixing Size After Last Property  
	struct GameplayTags_GameplayTagContainer     BlacklistedArsenalTags;                            // 0x718(0x20)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTagContainer     BlacklistedBackpackTags;                           // 0x738(0x20)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UValLootManager>           LootManagerClass;                                  // 0x758(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValLootManager*                       LootManager;                                       // 0x760(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        DefaultLoadoutType;                                // 0x768(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50C1[0x4];                                     // Fixing Size After Last Property  
	TArray<int32>                                RequiredLoadoutTypes;                              // 0x770(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UValLoadoutGroup>       LoadoutGroup;                                      // 0x780(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UValLoadoutDefinition>  LoadoutDefinition;                                 // 0x7A8(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UValLoadoutAsset>       AppearanceLoadout;                                 // 0x7D0(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UValLoadoutDefinition>  AppearanceLoadoutDefinition;                       // 0x7F8(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        ReputationPool;                                    // 0x820(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PctOfEntryCost;                                    // 0x824(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PctOfDogTagReputation;                             // 0x828(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        EntryCostFloor;                                    // 0x82C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PctOfMMRVariance;                                  // 0x830(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        UnrankedDogTagValue;                               // 0x834(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PctOfPlayerAccountlevel;                           // 0x838(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50C4[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValGameModeBase* GetDefaultObj();

	void OnAppSettingsFetched(class URH_ConfigSubsystem* ConfigSubsystem);
	int32 GetUnrankedDogTagValue();
	int32 GetReputationPool();
	float GetPctOfPlayerAccountlevel();
	float GetPctOfMMRVariance();
	float GetPctOfEntryCost();
	float GetPctOfDogTagReputation();
	int32 GetEntyCostFloor();
	class UValSecurityLevel* GetCurrentSecurityLevel();
};

// 0x670 (0xEB0 - 0x840)
// Class Valhalla.ValGameMode
class AValGameMode : public AValGameModeBase
{
public:
	uint8                                        Pad_50D0[0x10];                                    // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnBotDataReadyEvent;                               // 0x850(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPhaseChanged;                                    // 0x860(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_EntryRequirement>     EntryRequirements;                                 // 0x870(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                        PrepareDuration;                                   // 0x880(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PreCombatDuration;                                 // 0x884(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CombatDuration;                                    // 0x888(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ResultDuration;                                    // 0x88C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAutoSpectate;                                     // 0x890(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50D1[0x3];                                     // Fixing Size After Last Property  
	float                                        PlayerStartRadius;                                 // 0x894(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct GameplayTags_GameplayTag>      DefaultAbilityOverrides;                           // 0x898(0x10)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                         bDownPlayers;                                      // 0x8A8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bRespawnPlayers;                                   // 0x8A9(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bRespawnAtDeathLocation;                           // 0x8AA(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50D2[0x1];                                     // Fixing Size After Last Property  
	float                                        RespawnHeight;                                     // 0x8AC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        PlayerDownExpireTime;                              // 0x8B0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        PlayerRespawnTime;                                 // 0x8B4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        PlayerSpectateTime;                                // 0x8B8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        PlayerStartingLives;                               // 0x8BC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UValGameStatArchiver*>          PlayerStatsToArchive;                              // 0x8C0(0x10)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                         bSpawnReviveBeaconOnDeath;                         // 0x8D0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDropLootOnDeath;                                  // 0x8D1(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50D3[0x6];                                     // Fixing Size After Last Property  
	TMap<int32, int32>                           TeamStartingLives;                                 // 0x8D8(0x50)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	int32                                        ExpectedPlayerCount;                               // 0x928(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50D4[0x4];                                     // Fixing Size After Last Property  
	TMap<enum class EAwardType, int32>           AwardValues;                                       // 0x930(0x50)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TMap<enum class ERarity, int32>              ArtifactAwardValues;                               // 0x980(0x50)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TMap<enum class EAwardType, float>           BountyMultipliers;                                 // 0x9D0(0x50)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                         bShouldChangePlayerRep;                            // 0xA20(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50D5[0x3];                                     // Fixing Size After Last Property  
	float                                        XPMultiplier;                                      // 0xA24(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShowDamageNumber;                                 // 0xA28(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50D6[0x3];                                     // Fixing Size After Last Property  
	float                                        PlayerAssistTimeout;                               // 0xA2C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<enum class EBuildingType, struct Valhalla_ValBotWaveSet> BotWaveSetConfig;                                  // 0xA30(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<enum class EBuildingType, struct Valhalla_ValBotWaveSet> AlarmWaveSetConfig;                                // 0xA80(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UValSquad>                 BotSquadClass;                                     // 0xAD0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<enum class EBuildingType, class UValBotWaveConfig*> LoadedBotWaveSetConfig;                            // 0xAD8(0x50)(Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UValBotWaveConfig*>             LoadedAlarmWaveSetConfigRef;                       // 0xB28(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UValLoadoutAsset*>              BotLoadoutAssetRefs;                               // 0xB38(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UValBotPersonality*>            BotPersonalityAssetRefs;                           // 0xB48(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UDataAsset*>                    BotItemAssetRefs;                                  // 0xB58(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UEnvQuery*>                     BotEnvQueryRefs;                                   // 0xB68(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UValBotData*>                   LoadedBotDataList;                                 // 0xB78(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UValAbilityConfigData*                 AbilityConfig;                                     // 0xB88(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValAbilityConfigData*                 PassiveConfig;                                     // 0xB90(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValAbilityConfigData*                 PassiveSlotConfig;                                 // 0xB98(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValAbilityConfigData*                 WeaponConfig;                                      // 0xBA0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValAbilityConfigData*                 ArmorConfig;                                       // 0xBA8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<enum class ERarity, class UValAbilityConfigData*> ValuableConfig;                                    // 0xBB0(0x50)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_50D7[0x38];                                    // Fixing Size After Last Property  
	TArray<class FString>                        AvailableNames;                                    // 0xC38(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct CoreUObject_SoftObjectPath            SimulatedDataPath;                                 // 0xC48(0x20)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MatchTimer;                                        // 0xC68(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bPausedTimer;                                      // 0xC6C(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50D8[0x3];                                     // Fixing Size After Last Property  
	TArray<class AValTeamState*>                 EliminatedTeams;                                   // 0xC70(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UDataTable*                            RandomSublevels;                                   // 0xC80(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<enum class EBuildingType, struct Valhalla_BuildingLootCrates> BuildingLootCrates;                                // 0xC88(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class AOnlineBeaconHost*                     LobbyBeacon;                                       // 0xCD8(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<enum class EFabricatorShopType, int32>  FabricatorScrapCostOverrides;                      // 0xCE0(0x50)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int32                                        SkillRatingOverride;                               // 0xD30(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        SkillRating;                                       // 0xD34(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MatchAverageSkillRating;                           // 0xD38(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MatchMinSkillRating;                               // 0xD3C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MatchMaxSkillRating;                               // 0xD40(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCalculatedSkillRating;                            // 0xD44(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bBotDataReady;                                     // 0xD45(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50D9[0x2];                                     // Fixing Size After Last Property  
	struct CoreUObject_RandomStream              RandStream;                                        // 0xD48(0x8)(ZeroConstructor, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                         bSelectedBotAffix;                                 // 0xD50(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50DA[0x7];                                     // Fixing Size After Last Property  
	TSoftClassPtr<class UGameplayEffect>         ActiveBotAffix;                                    // 0xD58(0x28)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        SecurityLevel;                                     // 0xD80(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        RandomSeedOverride;                                // 0xD84(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                PlayerTeamDefinition;                              // 0xD88(0x10)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bFirstKillHappened;                                // 0xD98(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50DB[0x57];                                    // Fixing Size After Last Property  
	class UValXpTable*                           PlayerAccountXpTable;                              // 0xDF0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct GameplayTags_GameplayTag, struct Valhalla_GameplayPhase> GameplayPhases;                                    // 0xDF8(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_50DC[0x8];                                     // Fixing Size After Last Property  
	class UValStatsManager*                      StatsManager;                                      // 0xE50(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTeamCreationComponent*                TeamCreationComponent;                             // 0xE58(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                BotUniqueTeamId;                                   // 0xE60(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class APawn>                     BotPawnClass;                                      // 0xE70(0x8)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bFillWithPlayerBots;                               // 0xE78(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50DD[0x7];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_ValBotDataWeightPair> FillBotData;                                       // 0xE80(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                         bFillWithHunters;                                  // 0xE90(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50DE[0x3];                                     // Fixing Size After Last Property  
	int32                                        GuaranteedHunterSpawnAmount;                       // 0xE94(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSoftClassPtr<class UGameplayEffect>> HunterClassEffects;                                // 0xE98(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              DefaultPlayerClass;                                // 0xEA8(0x8)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValGameMode* GetDefaultObj();

	bool TickTimer(float* Value, float DeltaTime);
	void ProcessPlayerEntryRequirements(class AValPlayerController* ValPlayerController);
	void OnSubLevelsReady();
	void OnBotLoadoutsLoaded();
	void OnBotDataReady();
	void OnBotConfigLoaded();
	void OnBotClassesLoaded();
	bool IsBotDataReady();
	class UValStatsManager* GetStatsManager();
	int32 GetExpectedPlayerCount();
	TArray<struct Valhalla_EntryRequirement> GetEntryRequirements();
	struct GameplayTags_GameplayTag GetDefaultPlayerClass();
	bool GetBotWaveConfig(enum class EBuildingType BuildingType, struct Valhalla_ValBotWaveSet* OutConfig);
	bool GetAlarmWaveConfig(enum class EBuildingType BuildingType, struct Valhalla_ValBotWaveSet* OutConfig);
	bool GetAlarmBotSetConfig(struct GameplayTags_GameplayTag& BotType, struct Valhalla_ValBotWaveSet* OutConfig);
	void GetActiveTeams(TArray<class AValTeamState*>* ActiveTeams);
	void EliminateTeam(int32 TeamNumber);
	void DeductEntryRequirements();
	void CachePlayersXP();
	void AwardPlayerXP(int32 Value);
	void AwardCurrency(class AValPlayerState* PPlayerState, enum class EAwardType Type, int32 ValueOverride);
};

// 0x8 (0x848 - 0x840)
// Class Valhalla.ValGameMode_City
class AValGameMode_City : public AValGameModeBase
{
public:
	class AOnlineBeaconHost*                     Beacon;                                            // 0x840(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValGameMode_City* GetDefaultObj();

};

// 0x388 (0x1238 - 0xEB0)
// Class Valhalla.ValGameMode_Frontier
class AValGameMode_Frontier : public AValGameMode
{
public:
	int32                                        LootPhasesRemaining;                               // 0xEB0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        PortalPhasesRemaining;                             // 0xEB4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    LootTimer;                                         // 0xEB8(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    LootDropShipTimer;                                 // 0xEC0(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    PortalWarningTimer;                                // 0xEC8(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    PortalTimer;                                       // 0xED0(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    PlayerUpdateTimer;                                 // 0xED8(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AValPlayerStart*>               PlayerStarts;                                      // 0xEE0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AValObjective_Portal*>          ActivePortals;                                     // 0xEF0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AValObjective_Portal*>          AvailablePortals;                                  // 0xF00(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AValObjective_Loot*>            ActiveLootObjectives;                              // 0xF10(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AValObjective_Loot*>            AvailableLootObjectives;                           // 0xF20(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AValRespawnPoint*>              RespawnPoints;                                     // 0xF30(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                          SelectedBoostTrees;                                // 0xF40(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                          SelectedBoostItems;                                // 0xF50(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<enum class ETreeCategory>             ActiveItemCategories;                              // 0xF60(0x10)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                        GeneratedItemSeed;                                 // 0xF70(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        LootPhases;                                        // 0xF74(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        PortalPhases;                                      // 0xF78(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MaxLootCount;                                      // 0xF7C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PortalsPerTeam;                                    // 0xF80(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PortalNotifyDelay;                                 // 0xF84(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PortalAssemblingDelay;                             // 0xF88(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PortalActivationDelay;                             // 0xF8C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PortalWarningDelay;                                // 0xF90(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PortalActiveDuration;                              // 0xF94(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LootObjectiveNotifyDelay;                          // 0xF98(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LootObjectiveActivationDelay;                      // 0xF9C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LootObjectiveActivationDuration;                   // 0xFA0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LootDropShipFlyDownTime;                           // 0xFA4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bPitySystemEnabled;                                // 0xFA8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50E1[0x3];                                     // Fixing Size After Last Property  
	float                                        MaxLegendaryBoostChance;                           // 0xFAC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinLegendaryBoostChance;                           // 0xFB0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50E2[0x4];                                     // Fixing Size After Last Property  
	TMap<enum class ERarity, int32>              BoostRarityOdds;                                   // 0xFB8(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class AValPickup>>        LootCrateContentOverride;                          // 0x1008(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                         bKeepCurrencyOnDeath;                              // 0x1018(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50E3[0x3];                                     // Fixing Size After Last Property  
	float                                        PlayerArtifactRevealDelay;                         // 0x101C(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DroppedArtifactRevealDelay;                        // 0x1020(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MasteryBotLootIncrease;                            // 0x1024(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        TimeUntilSpectate;                                 // 0x1028(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        ScrubDropNumber;                                   // 0x102C(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<TSubclassOf<class AValPickup>, int32>   ScrubDropContents;                                 // 0x1030(0x50)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                         bBotsDropDeathCrates;                              // 0x1080(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50E4[0x7];                                     // Fixing Size After Last Property  
	TMap<struct GameplayTags_GameplayTag, class UValLootConfigData*> BotLootTable;                                      // 0x1088(0x50)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UValLootConfigData*                    DefaultLootTable;                                  // 0x10D8(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<enum class EGameStatType, int32>        CreditRewardValues;                                // 0x10E0(0x50)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                        ExtractionInterruptedPhaseTime;                    // 0x1130(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ExtractionFinishedPhaseTime;                       // 0x1134(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<enum class ERarity, float>              RarityExtractionTimers;                            // 0x1138(0x50)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                         bRaidCostDeducted;                                 // 0x1188(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50E5[0x7];                                     // Fixing Size After Last Property  
	TArray<float>                                LegendaryLootThresholds;                           // 0x1190(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class AValObjective_LootExtractionSite*> LootExtractionSites;                               // 0x11A0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class AValRoyaleFogVolume>       FogClass;                                          // 0x11B0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class AActor>>            EpicenterClasses;                                  // 0x11B8(0x10)(Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_FogPhase>             FogPhases;                                         // 0x11C8(0x10)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct CoreUObject_Vector2D>          EpicenterLocations;                                // 0x11D8(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct CoreUObject_Vector2D>          OriginLocations;                                   // 0x11E8(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                        OriginLocationsRange;                              // 0x11F8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        OriginLocationsAmount;                             // 0x11FC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FogSpawnDelay;                                     // 0x1200(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FogSpawnRadius;                                    // 0x1204(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_Vector                    FogSpawnLocation;                                  // 0x1208(0x18)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bFogEnabled;                                       // 0x1220(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bFogActive;                                        // 0x1221(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50E6[0x2];                                     // Fixing Size After Last Property  
	int32                                        CurrentFogPhase;                                   // 0x1224(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValRoyaleFogVolume*                   RoyaleFog;                                         // 0x1228(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    FogSpawnTimer;                                     // 0x1230(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class AValGameMode_Frontier* GetDefaultObj();

	void UpdatePlayerTotalScore(class AValPlayerState_Frontier* FrontierPlayer);
	void UpdatePlayerCredits(class AValPlayerState_Frontier* FrontierPlayer);
	void StartFogPhase();
	void OnPortalEntered(class AValCharacter* Character);
	void OnPortalCaptured();
	void OnLootState(enum class ELootState State);
	void OnFogPhaseEnd();
	class AValRoyaleFogVolume* GetRoyaleFog();
	void EndOfMatchScoring(class AValPlayerState_Frontier* FrontierPlayer);
	void DeductPlayerRaidCost();
};

// 0x18 (0x1250 - 0x1238)
// Class Valhalla.ValGameMode_Deposits
class AValGameMode_Deposits : public AValGameMode_Frontier
{
public:
	bool                                         bBeginEvacPhaseOnLastTeam;                         // 0x1238(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAutoFinishExtractionsOnEarlyEvac;                 // 0x1239(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50E7[0x2];                                     // Fixing Size After Last Property  
	float                                        DepositPodAvailableDelay;                          // 0x123C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    DepositPodAvailableTimer;                          // 0x1240(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50E8[0x8];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValGameMode_Deposits* GetDefaultObj();

	void OnLootDepositStateChanged(const struct Valhalla_LootDepositPodData& PodData);
	void BeginExtractionPhase();
};

// 0x18 (0x1268 - 0x1250)
// Class Valhalla.ValGameMode_Deposits_Training
class AValGameMode_Deposits_Training : public AValGameMode_Deposits
{
public:
	TArray<class AValBotSpawnVolume*>            BotSpawnVolumes;                                   // 0x1250(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                        RequiredCybridKills;                               // 0x1260(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50EA[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValGameMode_Deposits_Training* GetDefaultObj();

	void SetState(enum class ETrainingState Value);
	void OnTeammateRespawned();
	void OnSkyDiveLanding();
	void OnSearchForLegendaryArtifact();
	void OnSearchForFinalArtifact();
	void OnSearchForDeposit();
	void OnSearchForBoost();
	void OnReviveTeammate();
	void OnPreMatch();
	void OnPOIBotKilled(class AValBotSpawnVolume* BotSpawnVolume);
	void OnPlayerInventoryChanged();
	void OnPlayerEquippedBoost();
	void OnPlayerBoughtBoost();
	void OnLanded();
	void OnInShip();
	void OnEvacuation();
	void OnDropshipDoorsOpened();
	void OnBattleCybrids();
	void BindBotSpawnVolumes(bool bShouldAdd);
};

// 0x58 (0x1290 - 0x1238)
// Class Valhalla.ValGameMode_PointCapture
class AValGameMode_PointCapture : public AValGameMode_Frontier
{
public:
	class AValMissionCoordinator*                MissionCoordinator;                                // 0x1238(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_MissionScore>         MissionScores;                                     // 0x1240(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AValPlayerStart*>               TeamPlayerStarts;                                  // 0x1250(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>           TeleportEffectToApply;                             // 0x1260(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        TeleportEffectLevel;                               // 0x1268(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              SetByCallerMagnitudeTag;                           // 0x126C(0x8)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MissionsRequiredForFinale;                         // 0x1274(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAutoAssignMissions;                               // 0x1278(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50F3[0x3];                                     // Fixing Size After Last Property  
	class FName                                  PendingMissionName;                                // 0x127C(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShouldHaveFinale;                                 // 0x1284(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50F4[0x3];                                     // Fixing Size After Last Property  
	int32                                        MissionEndDeferTime;                               // 0x1288(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        RespawnTime;                                       // 0x128C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValGameMode_PointCapture* GetDefaultObj();

	bool OnMissionComplete(class AValMission* Mission);
	int32 GetRespawnTime();
	class AValMissionStart* GetMissionStart(class AController* Player);
	int32 GetMissionEndDeferTime();
	class AValMissionCoordinator* GetMissionCoordinator();
};

// 0x18 (0x1250 - 0x1238)
// Class Valhalla.ValGameMode_Royale
class AValGameMode_Royale : public AValGameMode_Frontier
{
public:
	float                                        EndOfMatchHangTime;                                // 0x1238(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_50F5[0x4];                                     // Fixing Size After Last Property  
	struct Engine_TimerHandle                    MatchEndedTimer;                                   // 0x1240(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AValTeamState*                         WinningTeam;                                       // 0x1248(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class AValGameMode_Royale* GetDefaultObj();

};

// 0x478 (0x16B0 - 0x1238)
// Class Valhalla.ValGameMode_SpaceDungeon
class AValGameMode_SpaceDungeon : public AValGameMode_Frontier
{
public:
	bool                                         bUsingTeamPlacement;                               // 0x1238(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5105[0x7];                                     // Fixing Size After Last Property  
	class AValTeamState*                         WinningTeam;                                       // 0x1240(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_PortalPhaseInfo>      PortalPhaseInfo;                                   // 0x1248(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSoftClassPtr<class AValDungeonPortal>       DungeonPortalClassToSpawn;                         // 0x1258(0x28)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class AValDungeonPortal>       BossPortalClass;                                   // 0x1280(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AActor>                    DungeonPortalSpawnLocationClass;                   // 0x12A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AActor>                    BossPortalDestinationClass;                        // 0x12B0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxZToApplyFogDamage;                              // 0x12B8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShouldNotifyPlayersOfDungeonPortals;              // 0x12BC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bGridBasedFog;                                     // 0x12BD(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bComputeNumberOfDungeonPortals;                    // 0x12BE(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5106[0x1];                                     // Fixing Size After Last Property  
	int32                                        MinPortalUses;                                     // 0x12C0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MaxPortalUses;                                     // 0x12C4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FogRadiusThresholdForPortals;                      // 0x12C8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        OuterDistanceThreshold;                            // 0x12CC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PortalSpawnRatioByPlayer;                          // 0x12D0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bImmediatelyRevealTeamPortals;                     // 0x12D4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5107[0x3];                                     // Fixing Size After Last Property  
	double                                       SoloTeamingProximityRange;                         // 0x12D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        CreditCost;                                        // 0x12E0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        CreditInventoryID;                                 // 0x12E4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SecurityLevelPercentile;                           // 0x12E8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ERarity                           MaxEquipmentQuality;                               // 0x12EC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5108[0x3];                                     // Fixing Size After Last Property  
	float                                        EquipmentBreakPercentage;                          // 0x12F0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShouldBreakEquipment;                             // 0x12F4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5109[0x3];                                     // Fixing Size After Last Property  
	float                                        MMRValue;                                          // 0x12F8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        ReputationValue;                                   // 0x12FC(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AValDungeonPortal*>             ActiveDungeonPortals;                              // 0x1300(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AValDungeonPortal*>             AvailableDungeonPortals;                           // 0x1310(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<enum class ESecurityLevel, int32>       CustomObjectiveTerminalsAssignedPerSecurityLevel;  // 0x1320(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<enum class ESecurityLevel, int32>       CustomObjectiveTerminalPoolSizePerSecurityLevel;   // 0x1370(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<enum class ESecurityLevel, int32>       ObjectiveTerminalXpRewards;                        // 0x13C0(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<enum class ESecurityLevel, int32>       SecurityLevelItemRequirements;                     // 0x1410(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<enum class ESecurityLevel, struct Valhalla_ObjectiveTerminalData> ObjectiveTerminals;                                // 0x1460(0x50)(Protected, NativeAccessSpecifierProtected)
	TArray<class AActor*>                        BossPortalDestinations;                            // 0x14B0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AActor*>                        AvailableBossPortalDestinations;                   // 0x14C0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<struct CoreUObject_Vector, TWeakObjectPtr<class AValDungeonPortal>> ValidPortalLocations;                              // 0x14D0(0x50)(Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	int32                                        TotalSpawnedLootCrates;                            // 0x1520(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        OpenedLootCrates;                                  // 0x1524(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAllRoomsLoaded;                                   // 0x1528(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_510A[0x3];                                     // Fixing Size After Last Property  
	class FName                                  DefaultPlayerStartTag;                             // 0x152C(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  GeneratedRoomPlayerStartTag;                       // 0x1534(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsTutorialMode;                                   // 0x153C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_510B[0x3];                                     // Fixing Size After Last Property  
	struct Engine_TimerHandle                    PlayerProximityTimer;                              // 0x1540(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        FirstPlayerConnectTimeoutSeconds;                  // 0x1548(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_510C[0x4];                                     // Fixing Size After Last Property  
	struct Engine_TimerHandle                    WaitPlayersLoggedInTimer;                          // 0x1550(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_510E[0x138];                                   // Fixing Size After Last Property  
	bool                                         bEnableNetKicks;                                   // 0x1690(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_5110[0x3];                                     // Fixing Size After Last Property  
	float                                        NetKickCheckIntervalSeconds;                       // 0x1694(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        NetKickPingThreshold;                              // 0x1698(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        NetKickPingSampleThreshold;                        // 0x169C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        NetKickLossThreshold;                              // 0x16A0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        NetKickPacketSamples;                              // 0x16A4(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        NetKickLossSampleThreshold;                        // 0x16A8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_5111[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValGameMode_SpaceDungeon* GetDefaultObj();

	void RevealActivePortal(class AValCharacter* ValChar, bool TeamReveal);
	void RegisterLootCrates();
	void PickDungeonSeed();
	void OnLootCrateOpened(class AValLootCrate* LootCrate);
	void OnDungeonPortalEntered(class AValCharacter* Character, class AValDungeonPortal* DungeonPortal);
	void OnDungeonPortalDestroyed(class AValDungeonPortal* DungeonPortal);
	void OnBossPortalEntered(class AValCharacter* Character, class AValDungeonPortal* DungeonPortal);
	void OnAllRoomsLoaded();
	void MovePlayersToGeneratedStarts();
	float GetShouldBreakEquipment();
	float GetSecurityLevelMinDefensivePower();
	float GetMaxZToApplyFogDamage();
	enum class ERarity GetMaxEquipmentQuality();
	float GetEquipmentBreakChance();
	int32 GetAndUpdateReputationPool();
	void ExtractRemainingPlayers();
	void DetermineCloseProximityPlayers();
	void AbortMatchFromTimeout();
};

// 0x0 (0x16B0 - 0x16B0)
// Class Valhalla.ValGameMode_ShootingRange
class AValGameMode_ShootingRange : public AValGameMode_SpaceDungeon
{
public:

	static class UClass* StaticClass();
	static class AValGameMode_ShootingRange* GetDefaultObj();

};

// 0x0 (0xEB0 - 0xEB0)
// Class Valhalla.ValGameMode_Test
class AValGameMode_Test : public AValGameMode
{
public:

	static class UClass* StaticClass();
	static class AValGameMode_Test* GetDefaultObj();

};

// 0x70 (0x12C0 - 0x1250)
// Class Valhalla.ValGameMode_Vikings
class AValGameMode_Vikings : public AValGameMode_Deposits
{
public:
	TMap<int32, struct Valhalla_PlayerStartData> TeamPlayerStartsMap;                               // 0x1250(0x50)(Protected, NativeAccessSpecifierProtected)
	int32                                        RespawnTime;                                       // 0x12A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5113[0x4];                                     // Fixing Size After Last Property  
	TSubclassOf<class UGameplayEffect>           RespawnEffectToApply;                              // 0x12A8(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        RespawnEffectLevel;                                // 0x12B0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              SetByCallerMagnitudeTag;                           // 0x12B4(0x8)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MaxTeamsDuringMatch;                               // 0x12BC(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValGameMode_Vikings* GetDefaultObj();

};

// 0x8 (0x310 - 0x308)
// Class Valhalla.ValGameplayCueNotify_Actor
class AValGameplayCueNotify_Actor : public AGameplayCueNotify_Actor
{
public:
	bool                                         bOnlyCallRemoveOnce;                               // 0x308(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5114[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValGameplayCueNotify_Actor* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class Valhalla.ValGameplayCueNotify_Static
class UValGameplayCueNotify_Static : public UGameplayCueNotify_Static
{
public:

	static class UClass* StaticClass();
	static class UValGameplayCueNotify_Static* GetDefaultObj();

};

// 0x0 (0x2B0 - 0x2B0)
// Class Valhalla.ValGameSession
class AValGameSession : public AGameSession
{
public:

	static class UClass* StaticClass();
	static class AValGameSession* GetDefaultObj();

};

// 0xB0 (0x3C8 - 0x318)
// Class Valhalla.ValGameStateBase
class AValGameStateBase : public ARHGameState
{
public:
	FMulticastInlineDelegateProperty_            OnQueueDataSet;                                    // 0x318(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGameplayPhaseSet;                                // 0x328(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPhaseTimeRemaining;                              // 0x338(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_5117[0x18];                                    // Fixing Size After Last Property  
	TSoftObjectPtr<class UValQueueData>          R_QueueData;                                       // 0x360(0x28)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_PostedPlayerCount;                               // 0x388(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Valhalla_GameplayPhaseInfo            R_GameplayPhaseInfo;                               // 0x38C(0x10)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_5118[0x1C];                                    // Fixing Size After Last Property  
	class UPlayerAttributeConfig*                PlayerAttributeConfig;                             // 0x3B8(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UPlayerAttributeConfig>    PlayerAttributeConfigClass;                        // 0x3C0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValGameStateBase* GetDefaultObj();

	void SetQueueData(class UValQueueData* QueueData);
	void SetPostedPlayerCount(int32 NewPostedPlayerCount);
	void SetPhaseTimeRemaining(float Value);
	void SetGameplayPhaseInfo(const struct GameplayTags_GameplayTag& NewGameplayPhase, float NewPhaseDuration, float NewPhaseTimeRemaining);
	void OnRep_QueueData();
	void OnRep_GameplayPhaseInfo(struct Valhalla_GameplayPhaseInfo& OldInfo);
	void OnQueueDataSet__DelegateSignature(TSoftObjectPtr<class UValQueueData> QueueData);
	void OnGameplayPhaseSet__DelegateSignature(const struct Valhalla_GameplayPhaseInfo& GameplayPhaseInfo);
	class UValQueueData* GetQueueData();
	int32 GetPostedPlayerCount();
	float GetPhaseRemainingTimer();
	struct Valhalla_GameplayPhaseInfo GetGameplayPhaseInfo();
};

// 0x5D0 (0x998 - 0x3C8)
// Class Valhalla.ValGameState
class AValGameState : public AValGameStateBase
{
public:
	FMulticastInlineDelegateProperty_            OnMatchStateChanged;                               // 0x3C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTimeRemainingChanged;                            // 0x3D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnRespawnTimeChanged;                              // 0x3E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSublevelReady;                                   // 0x3F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSelectedSublevels;                               // 0x408(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSecurityLevelSet;                                // 0x418(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnScoreToWinUpdated;                               // 0x428(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMapEvent;                                        // 0x438(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCurrentTeamScoresUpdated;                        // 0x448(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMatchDurationUpdated;                            // 0x458(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bSpawnMinimapManager;                              // 0x468(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_512C[0x7];                                     // Fixing Size After Last Property  
	class AValMinimapManager*                    R_MinimapManager;                                  // 0x470(0x8)(Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_TimeRemaining;                                   // 0x478(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_RespawnTime;                                     // 0x47C(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bDropPodsUseLauncher;                            // 0x480(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ESecurityLevel                    R_SecurityLevel;                                   // 0x481(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_512E[0x2];                                     // Fixing Size After Last Property  
	int32                                        R_ScoreToWin;                                      // 0x484(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_TeamScore>            R_CurrentTeamScores;                               // 0x488(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	float                                        LastMatchStateChangeTime;                          // 0x498(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_MatchStartTime;                                  // 0x49C(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_MatchLength;                                     // 0x4A0(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_512F[0x4];                                     // Fixing Size After Last Property  
	struct Valhalla_ActivityConfig               R_ActivityConfig;                                  // 0x4A8(0x68)(Net, RepNotify, Protected, NativeAccessSpecifierProtected)
	struct Valhalla_RandomSublevel               R_SelectedSublevels;                               // 0x510(0x90)(Edit, BlueprintVisible, BlueprintReadOnly, Net, EditConst, RepNotify, Protected, NativeAccessSpecifierProtected)
	enum class EServerStatus                     R_ServerStatus;                                    // 0x5A0(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5130[0x7];                                     // Fixing Size After Last Property  
	TArray<float>                                RollingUPS;                                        // 0x5A8(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_5132[0x4];                                     // Fixing Size After Last Property  
	float                                        ServerMinorWarningPercentage;                      // 0x5BC(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ServerSevereWarningPercentage;                     // 0x5C0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_PlayerStartingLives;                             // 0x5C4(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5133[0xE8];                                    // Fixing Size After Last Property  
	float                                        ClientLevelLoadDelay;                              // 0x6B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAllSublevelsLoaded;                               // 0x6B4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5135[0x3];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnServerStatusChanged;                             // 0x6B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<int32, class FString>                   PlayerIdToNameMap;                                 // 0x6C8(0x50)(Edit, EditConst, NativeAccessSpecifierPublic)
	class UDecalPoolComponent*                   DecalPool;                                         // 0x718(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnSightManagerReadyDel;                            // 0x720(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class AValSightManager>          SightManagerClass;                                 // 0x730(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValSightManager*                      SightManager;                                      // 0x738(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AValBotSpawner>> BotSpawners;                                       // 0x740(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UValBotData>>    R_BotsToCache;                                     // 0x750(0x10)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, RepNotify, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UValAIAudioCueTagCache*                AIAudioCueTagCache;                                // 0x760(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5136[0xE8];                                    // Fixing Size After Last Property  
	struct CoreUObject_Vector2f                  R_ActivatedSwarmSpawner;                           // 0x850(0x8)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5137[0x8];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnRecipeConfig;                                    // 0x860(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLoadoutConfig;                                   // 0x870(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UValLoadoutConfig*                     LoadoutConfig;                                     // 0x880(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValRecipeConfig*                      RecipeConfig;                                      // 0x888(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UValAgentConfig>> R_AgentConfigs;                                    // 0x890(0x10)(Net, ZeroConstructor, RepNotify, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UValAgentConfig*>               LoadedAgentConfigs;                                // 0x8A0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_5139[0xE8];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValGameState* GetDefaultObj();

	void SublevelsReady();
	void SetTeamScore(int32 TeamId, int32 Value);
	void SetSelectedSublevels(struct Valhalla_RandomSublevel& Sublevels);
	void SetSecurityLevel(enum class ESecurityLevel Value);
	void SetScoreToWin(int32 Value);
	void SetPlayerStartingLives(int32 Value);
	void OnRep_TimeRemaining();
	void OnRep_ServerStatus();
	void OnRep_SelectedSublevels();
	void OnRep_SecurityLevel();
	void OnRep_ScoreToWin();
	void OnRep_RespawnTime();
	void OnRep_MatchStartTime();
	void OnRep_MatchLength();
	void OnRep_DropPodsUseLauncher();
	void OnRep_CurrentTeamScores();
	void OnRep_BotsToCache();
	void OnRep_AgentConfigs();
	void OnRep_ActivityConfig();
	void OnRep_ActivatedSwarmSpawners();
	void OnRecipeConfigReady();
	void OnLoadoutConfigReady();
	void OnBotDataReady();
	void OnBotDataLoaded();
	void OnBotClassesLoaded();
	void OnAgentsInstanceLoaded();
	void OnAgentsDataLoaded();
	bool IsPreMatch();
	bool IsMatchOver();
	bool IsGameplayPhaseOrLater(struct GameplayTags_GameplayTag& GameplayPhase);
	int32 IncrementTeamScore(int32 TeamId, int32 Value);
	int32 GetTimeRemaining();
	float GetTimeInMatchState();
	class AValSightManager* GetSightManager();
	enum class ESecurityLevel GetSecurityLevel();
	bool GetSecondsUntilMatchEnd(float* TimeRemaining);
	bool GetSecondsSinceMatchStart(float* TimePassed);
	int32 GetScoreToWin();
	int32 GetRespawnTime();
	class UValRecipeConfig* GetRecipeConfig();
	class APlayerState* GetPlayerStateByPRhlayerUuid(struct CoreUObject_Guid& PlayerUuid);
	class APlayerState* GetPlayerStateById(int32 PlayerId);
	int32 GetPlayerStartingLives();
	class AValMinimapManager* GetMinimapManager();
	int32 GetMaxTeamSize();
	bool GetMatchStartTime(float* StartTime);
	bool GetMatchLength(float* Length);
	class UValLoadoutConfig* GetLoadoutConfig();
	void GetLeadingTeam(TArray<struct Valhalla_TeamScore>* OutWinningTeams);
	bool GetDropPodsUseLauncher();
	class UDecalPoolComponent* GetDecalPool();
	void GetCurrentTeamScores(TArray<struct Valhalla_TeamScore>* OutTeamScores);
	int32 GetClientsReady();
	void GetBotSpawners(TArray<class AValBotSpawner*>* OutSpawners);
	void GetAgentConfigs(TArray<TSoftObjectPtr<class UValAgentConfig>>* OutAgentConfig);
	void GetActivityConfig(struct Valhalla_ActivityConfig* OutActivityConfig);
	void CachePlayerIdsAndNames();
	void AsyncLoadSublevels();
	void ActivateSwarmSpawner(const struct CoreUObject_Vector2D& SpawnerLocation);
};

// 0x98 (0xA30 - 0x998)
// Class Valhalla.ValGameState_Mission
class AValGameState_Mission : public AValGameState
{
public:
	FMulticastInlineDelegateProperty_            OnFinaleTime;                                      // 0x998(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMissionScores;                                   // 0x9A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMissionStates;                                   // 0x9B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFinaleMissionsRequired;                          // 0x9C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                        R_FinaleTime;                                      // 0x9D8(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_FinaleMissionsRequired;                          // 0x9DC(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_MissionScore>         R_MissionScores;                                   // 0x9E0(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<class AValMissionState*>              R_MissionStates;                                   // 0x9F0(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	int32                                        R_MaxLevel;                                        // 0xA00(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_513F[0x4];                                     // Fixing Size After Last Property  
	struct GameplayAbilities_ScalableFloat       R_LevelingInformation;                             // 0xA08(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValGameState_Mission* GetDefaultObj();

	void UnregisterMissionState(class AValMissionState* MissionState);
	void SetMissionScores(TArray<struct Valhalla_MissionScore>& Scores);
	void RegisterMissionState(class AValMissionState* MissionState);
	void OnRep_MissionStates();
	void OnRep_MissionScores();
	void OnRep_FinaleTime();
	void OnRep_FinaleMissionsRequired();
	int32 GetXPForLevel(int32 Level);
	void GetMissionStates(TArray<class AValMissionState*>* MissionStates);
	void GetMissionScore(int32 TeamNum, int32* Score);
	int32 GetMaxLevel();
	int32 GetLevelFromXP(int32 XPTotal);
	int32 GetFinaleTime();
	int32 GetFinaleMissionsRequired();
};

// 0xC8 (0x4A8 - 0x3E0)
// Class Valhalla.ValGATA_Trace
class AValGATA_Trace : public AGameplayAbilityTargetActor
{
public:
	float                                        BaseSpread;                                        // 0x3E0(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TargetingSpreadIncrement;                          // 0x3E4(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TargetingSpreadMax;                                // 0x3E8(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpreadFalloffPower;                                // 0x3EC(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpreadRecovery;                                    // 0x3F0(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SpreadSeed;                                        // 0x3F4(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UValSpreadPattern*                     SpreadPattern;                                     // 0x3F8(0x8)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5144[0x9];                                     // Fixing Size After Last Property  
	bool                                         bUseAimingSpreadMod;                               // 0x409(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5145[0x2];                                     // Fixing Size After Last Property  
	struct GameplayTags_GameplayTag              AimingTag;                                         // 0x40C(0x8)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct GameplayTags_GameplayTag              AimingRemovalTag;                                  // 0x414(0x8)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxRange;                                          // 0x41C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Engine_CollisionProfileName           TraceProfile;                                      // 0x420(0x8)(Edit, BlueprintVisible, Config, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	bool                                         bTraceAffectsAimPitch;                             // 0x428(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5147[0x3];                                     // Fixing Size After Last Property  
	int32                                        MaxHitResultsPerTrace;                             // 0x42C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumberOfTraces;                                    // 0x430(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIgnoreBlockingHits;                               // 0x434(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIgnoreFriendly;                                   // 0x435(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTraceFromPlayerViewPoint;                         // 0x436(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUsePersistentHitResults;                          // 0x437(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIgnoreDuplicateActors;                            // 0x438(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5148[0x7];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnCurrentSpreadChanged;                            // 0x440(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnModifiedSpreadChanged;                           // 0x450(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AValCharacter*                         ValCharacterOwner;                                 // 0x460(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5149[0x40];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValGATA_Trace* GetDefaultObj();

	void SetStartLocation(struct GameplayAbilities_GameplayAbilityTargetingLocationInfo& InStartLocation);
	void SetSpreadRecovery(bool bEnabled);
	void SetShouldProduceTargetDataOnServer(bool bInShouldProduceTargetDataOnServer);
	void SetDestroyOnConfirmation(bool bInDestroyOnConfirmation);
	void ResetSpread(bool bInstantRecovery);
	void NotifySpreadModified();
	int32 IncrementID();
	float GetCurrentSpread();
	int32 GetCurrentID();
};

// 0x8 (0x4B0 - 0x4A8)
// Class Valhalla.ValGATA_LineTrace
class AValGATA_LineTrace : public AValGATA_Trace
{
public:
	uint8                                        Pad_5151[0x8];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValGATA_LineTrace* GetDefaultObj();

	void Configure(struct GameplayAbilities_GameplayAbilityTargetingLocationInfo& InStartLocation, const struct GameplayTags_GameplayTag& InAimingTag, const struct GameplayTags_GameplayTag& InAimingRemovalTag, const struct Engine_CollisionProfileName& InTraceProfile, const struct GameplayAbilities_GameplayTargetDataFilterHandle& InFilter, TSubclassOf<class AGameplayAbilityWorldReticle> InReticleClass, const struct GameplayAbilities_WorldReticleParameters& InReticleParams, bool bInIgnoreBlockingHits, bool bInIgnoreFriendly, bool bInShouldProduceTargetDataOnServer, bool bInUsePersistentHitResults, bool bInDebug, bool bInTraceAffectsAimPitch, bool bInTraceFromPlayerViewPoint, bool bInUseAimingSpreadMod, float InMaxRange, float InBaseSpread, float InTargetingSpreadIncrement, float InTargetingSpreadMax, float InSpreadRecovery, int32 InSpreadSeed, class UValSpreadPattern* InSpreadPattern, float InSpreadFalloffPower, int32 InMaxHitResultsPerTrace, int32 InNumberOfTraces);
};

// 0x28 (0x4D0 - 0x4A8)
// Class Valhalla.ValGATA_ShapeTrace
class AValGATA_ShapeTrace : public AValGATA_Trace
{
public:
	enum class EValShapeTraceType                TraceType;                                         // 0x4A8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_515D[0x3];                                     // Fixing Size After Last Property  
	float                                        TraceSphereRadius;                                 // 0x4AC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_Vector                    HalfBoxExtent;                                     // 0x4B0(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_515E[0x8];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValGATA_ShapeTrace* GetDefaultObj();

	void Configure(struct GameplayAbilities_GameplayAbilityTargetingLocationInfo& InStartLocation, const struct GameplayTags_GameplayTag& InAimingTag, const struct GameplayTags_GameplayTag& InAimingRemovalTag, const struct Engine_CollisionProfileName& InTraceProfile, const struct GameplayAbilities_GameplayTargetDataFilterHandle& InFilter, TSubclassOf<class AGameplayAbilityWorldReticle> InReticleClass, const struct GameplayAbilities_WorldReticleParameters& InReticleParams, enum class EValShapeTraceType InShapeTraceType, bool bInIgnoreBlockingHits, bool bInIgnoreFriendly, bool bInShouldProduceTargetDataOnServer, bool bInUsePersistentHitResults, bool bInIgnoreDuplicateActors, bool bInDebug, bool bInTraceAffectsAimPitch, bool bInTraceFromPlayerViewPoint, bool bInUseAimingSpreadMod, float InMaxRange, float InTraceSphereRadius, const struct CoreUObject_Vector& InHalfBoxExtent, float InBaseSpread, float InTargetingSpreadIncrement, float InTargetingSpreadMax, float InSpreadRecovery, int32 InSpreadSeed, class UValSpreadPattern* InSpreadPattern, int32 InMaxHitResultsPerTrace, int32 InNumberOfTraces);
};

// 0x8 (0x608 - 0x600)
// Class Valhalla.ValGA_Crouch
class UValGA_Crouch : public UValGameplayAbility
{
public:
	uint8                                        Pad_5161[0x8];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValGA_Crouch* GetDefaultObj();

	void OnSettingsChanged();
};

// 0x0 (0x608 - 0x608)
// Class Valhalla.ValGA_CrouchToggle
class UValGA_CrouchToggle : public UValGA_Crouch
{
public:

	static class UClass* StaticClass();
	static class UValGA_CrouchToggle* GetDefaultObj();

	void OnActionThatCancelsCrouch();
};

// 0x0 (0x600 - 0x600)
// Class Valhalla.ValGA_Jump
class UValGA_Jump : public UValGameplayAbility
{
public:

	static class UClass* StaticClass();
	static class UValGA_Jump* GetDefaultObj();

};

// 0x88 (0xC8 - 0x40)
// Class Valhalla.ValGC_BulletImpact
class UValGC_BulletImpact : public UValGameplayCueNotify_Static
{
public:
	enum class EPhysicalSurface                  DefaultPhysicalSurface;                            // 0x40(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EPhysicalSurface                  ShieldPhysicalSurface;                             // 0x41(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5169[0x6];                                     // Fixing Size After Last Property  
	TSoftObjectPtr<class UNiagaraSystem>         ShieldHitNS;                                       // 0x48(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  ColorCurveParam;                                   // 0x70(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FriendlyColorCurveValue;                           // 0x78(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        EnemyColorCurveValue;                              // 0x7C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  LightColorParam;                                   // 0x80(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_LinearColor               FriendlyLightColorValue;                           // 0x88(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_LinearColor               EnemyLightColorValue;                              // 0x98(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  SizeParam;                                         // 0xA8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundBase*                            MetaDefaultEnemyImpactSound;                       // 0xB0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundBase*                            MetaDefaultFriendlyImpactSound;                    // 0xB8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DecalFadeDelay;                                    // 0xC0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DecalFadeDuration;                                 // 0xC4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValGC_BulletImpact* GetDefaultObj();

	void PlayFX(float ExplosionRadius, struct CoreUObject_Vector& HitLocation, struct CoreUObject_Vector& HitNormal, class UValDeviceAudioVisual* DeviceAV, class APawn* Instigator, class AValCharacter* Target, enum class EPhysicalSurface SurfaceType);
	class FString PhysicalSurfaceToString(enum class EPhysicalSurface Surface);
};

// 0x50 (0x90 - 0x40)
// Class Valhalla.ValGC_GunTrace
class UValGC_GunTrace : public UValGameplayCueNotify_Static
{
public:
	class FName                                  ColorCurveParam;                                   // 0x40(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FriendlyColorCurveValue;                           // 0x48(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        EnemyColorCurveValue;                              // 0x4C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  BeamEndParam;                                      // 0x50(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        BeamMaxDistance;                                   // 0x58(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxWhizVectorLength;                               // 0x5C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CameraShakeScaleFull;                              // 0x60(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CameraShakeScaleHalf;                              // 0x64(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        WhizDistanceThreshold;                             // 0x68(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  WhizTypeParameter;                                 // 0x6C(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_516A[0x4];                                     // Fixing Size After Last Property  
	TSubclassOf<class UCameraShakeBase>          CameraShakeClass;                                  // 0x78(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundBase*                            MetaBulletWhizAudioEvent;                          // 0x80(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              ProjectileImpactTag;                               // 0x88(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValGC_GunTrace* GetDefaultObj();

};

// 0x10 (0x320 - 0x310)
// Class Valhalla.ValGC_Skiing
class AValGC_Skiing : public AValGameplayCueNotify_Actor
{
public:
	TArray<struct Valhalla_SkiFXConfig>          FXConfigs;                                         // 0x310(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValGC_Skiing* GetDefaultObj();

	bool GetFXConfigByClass(const struct GameplayTags_GameplayTag& ClassTag, struct Valhalla_SkiFXConfig* OutConfig);
	class UNiagaraSystem* GetFeetTrailBySurface(const struct GameplayTags_GameplayTag& ClassTag, enum class EPhysicalSurface PhysicalSurface);
};

// 0x10 (0x2A8 - 0x298)
// Class Valhalla.ValGPTActor
class AValGPTActor : public AActor
{
public:
	class FString                                RawResponseString;                                 // 0x298(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValGPTActor* GetDefaultObj();

	void OnResponse();
};

// 0xB0 (0x310 - 0x260)
// Class Valhalla.ValGrenadeAudioVisual
class UValGrenadeAudioVisual : public UValAbilityAudioVisual
{
public:
	class UAkAudioEvent*                         BounceSound;                                       // 0x260(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         ExplosionSound;                                    // 0x268(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         PlayActiveSound;                                   // 0x270(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         PlayTimerSound;                                    // 0x278(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         HitSound;                                          // 0x280(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            MetaBounceSound;                                   // 0x288(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            MetaExplosionSound;                                // 0x290(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            MetaPlayActiveSound;                               // 0x298(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            MetaPlayTimerSound;                                // 0x2A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            MetaHitSound;                                      // 0x2A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            FriendlyMetaBounceSound;                           // 0x2B0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            FriendlyMetaExplosionSound;                        // 0x2B8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            FriendlyMetaPlayActiveSound;                       // 0x2C0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            FriendlyMetaPlayTimerSound;                        // 0x2C8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            FriendlyMetaHitSound;                              // 0x2D0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            EnemyMetaBounceSound;                              // 0x2D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            EnemyMetaExplosionSound;                           // 0x2E0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            EnemyMetaPlayActiveSound;                          // 0x2E8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            EnemyMetaPlayTimerSound;                           // 0x2F0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            EnemyMetaHitSound;                                 // 0x2F8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                        ExplosionFX;                                       // 0x300(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                    ExplosionDecal;                                    // 0x308(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValGrenadeAudioVisual* GetDefaultObj();

};

// 0x8 (0x2A0 - 0x298)
// Class Valhalla.ValGrenadeIndicatorActor
class AValGrenadeIndicatorActor : public AActor
{
public:
	class AActor*                                TargetActor;                                       // 0x298(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValGrenadeIndicatorActor* GetDefaultObj();

};

// 0x5B8 (0x10B8 - 0xB00)
// Class Valhalla.ValGunAnimInstance
class UValGunAnimInstance : public UValAnimInstance
{
public:
	int32                                        FireImpulseCounter;                                // 0xB00(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_516F[0x4];                                     // Fixing Size After Last Property  
	class URecoilProfileAsset*                   HipFireRecoilProfile;                              // 0xB08(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URecoilProfileAsset*                   AimingFireRecoilProfile;                           // 0xB10(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct ValhallaAnimGraphRuntime_RecoilProfile CurrentRecoilProfile;                              // 0xB18(0x380)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                  ReloadMontages;                                    // 0xE98(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAnimMontage*                          SkiReloadMontage;                                  // 0xEA8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          AlternativeReloadMontage;                          // 0xEB0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                  FireMontages;                                      // 0xEB8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                  AimingFireMontages;                                // 0xEC8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAnimMontage*                          CrouchFireMontage;                                 // 0xED8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          DrawingMontage;                                    // 0xEE0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          HolsteringMontage;                                 // 0xEE8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          SkiStateStartedMontage;                            // 0xEF0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>          DrawingCameraShake;                                // 0xEF8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>          HolsterCameraShake;                                // 0xF00(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                  SettleMontages;                                    // 0xF08(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                  FlourishMontages;                                  // 0xF18(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                  HitReactMontages;                                  // 0xF28(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAnimMontage*                          MeleeAttackMontage;                                // 0xF38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          MeleeDeflectMontage;                               // 0xF40(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          MeleeBlockMontage;                                 // 0xF48(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          JumpedMontage;                                     // 0xF50(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          LandedMontage;                                     // 0xF58(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          ADSTransitionMontage;                              // 0xF60(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5170[0x8];                                     // Fixing Size After Last Property  
	struct CoreUObject_Vector                    AimingTargetLocation;                              // 0xF70(0x18)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_Rotator                   AimingTargetRotation;                              // 0xF88(0x18)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                  AimingSocketName;                                  // 0xFA0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMovementMode                     MovementMode;                                      // 0xFA8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        CustomMovementMode;                                // 0xFA9(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5171[0x2];                                     // Fixing Size After Last Property  
	float                                        WeaponLeadingYaw;                                  // 0xFAC(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WeaponLeadingPitch;                                // 0xFB0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsReloading;                                      // 0xFB4(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5172[0x3];                                     // Fixing Size After Last Property  
	class UAnimMontage*                          CurrentReloadMontage;                              // 0xFB8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          CurrentFlourishMontage;                            // 0xFC0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GunBobAlpha;                                       // 0xFC8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         StopFireMontageOnFire;                             // 0xFCC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         StopFireMontageBlendOutTime;                       // 0xFCD(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5173[0x2];                                     // Fixing Size After Last Property  
	float                                        MovementDipAlpha;                                  // 0xFD0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MovementDipBlendSpeedIn;                           // 0xFD4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MovementDipBlendSpeedOut;                          // 0xFD8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        JumpedImpulseCounter;                              // 0xFDC(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        LandedImpulseCounter;                              // 0xFE0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5174[0x4];                                     // Fixing Size After Last Property  
	class URecoilProfileAsset*                   JumpedRecoilProfileAsset;                          // 0xFE8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URecoilProfileAsset*                   LandedRecoilProfileAsset;                          // 0xFF0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URecoilProfileAsset*                   HighSpeedFallingRecoilProfileAsset;                // 0xFF8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        HighSpeedFallingImpulseCounter;                    // 0x1000(0x4)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HighSpeedFallingAlpha;                             // 0x1004(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AlternativeReloadChance;                           // 0x1008(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5175[0x4];                                     // Fixing Size After Last Property  
	class URecoilProfileAsset*                   StartJetpackRecoilProfileAsset;                    // 0x1010(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        StartJetpackImpulseCounter;                        // 0x1018(0x4)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5176[0x4];                                     // Fixing Size After Last Property  
	class URecoilProfileAsset*                   StartMidAirJetpackRecoilProfileAsset;              // 0x1020(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        StartMidAirJetpackImpulseCounter;                  // 0x1028(0x4)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5177[0x4];                                     // Fixing Size After Last Property  
	class URecoilProfileAsset*                   StartSkiRecoilProfileAsset;                        // 0x1030(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        StartSkiImpulseCounter;                            // 0x1038(0x4)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5178[0x4];                                     // Fixing Size After Last Property  
	class URecoilProfileAsset*                   ADSRecoilProfileAsset;                             // 0x1040(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ADSImpulseCounter;                                 // 0x1048(0x4)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CrouchRawAlpha;                                    // 0x104C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CrouchAlpha;                                       // 0x1050(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CrouchBlendInTime;                                 // 0x1054(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CrouchBlendOutTime;                                // 0x1058(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5179[0x4];                                     // Fixing Size After Last Property  
	class UCurveFloat*                           CrouchBlendCurve;                                  // 0x1060(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SkiRawAlpha;                                       // 0x1068(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SkiAlpha;                                          // 0x106C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ForwardGroundSlopeAmount;                          // 0x1070(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RightGroundSlopeAmount;                            // 0x1074(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Speed;                                             // 0x1078(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LateralSpeed;                                      // 0x107C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VerticalSpeed;                                     // 0x1080(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsClipEmpty;                                      // 0x1084(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_517A[0x3];                                     // Fixing Size After Last Property  
	float                                        HiddenAlpha;                                       // 0x1088(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasInitializedForVisibility;                      // 0x108C(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShouldForceHidden;                                // 0x108D(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_517B[0x2];                                     // Fixing Size After Last Property  
	float                                        ReloadRecoverTime;                                 // 0x1090(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_517C[0x14];                                    // Fixing Size After Last Property  
	class UAnimMontage*                          CachedFireMontage;                                 // 0x10A8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimMontage*                          CachedAimingFireMontage;                           // 0x10B0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UValGunAnimInstance* GetDefaultObj();

	void PlaySettle();
	void PlayRecoil();
	void PlayMeleeMontage(float AnimTime);
	void PlayMeleeDeflectAnimation();
	void PlayHitReact();
	void PlayFlourish();
	void OnStartedHighSpeedFalling();
	void OnStartedCrouch();
	void OnSkiStateStopped();
	void OnSkiStateStarted();
	void OnSkiCameraHitTheGround();
	void OnReload(const struct GameplayTags_GameplayTag& InTag, int32 NewCount);
	void OnMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted);
	void OnLanded(struct Engine_HitResult& Hit);
	void OnJumped();
	void OnJetpackStarted(bool bStartedFromMidAir);
	void OnEndedCrouch();
	void OnClipDataChanged(float OldValue, float NewValue);
	void OnAimingStateUpdated();
	void MovementModeChanged(class ACharacter* Character, enum class EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	bool IsWeaponLockedOut();
	bool IsMoving();
	void EventStopReload();
	void EventPreFire();
	void EventPlayReload();
	void EventPlayRecoil();
};

// 0x80 (0x318 - 0x298)
// Class Valhalla.ValHackablePanel
class AValHackablePanel : public AActor
{
public:
	uint8                                        Pad_518B[0x8];                                     // Fixing Size After Last Property  
	class USphereComponent*                      InteractCollisionComp;                             // 0x2A0(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                       RootSceneComp;                                     // 0x2A8(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bShouldGenerateOverlapEvents;                    // 0x2B0(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_518C[0x1F];                                    // Fixing Size After Last Property  
	class AValCharacter*                         R_Channeler;                                       // 0x2D0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_ChannelStartTime;                                // 0x2D8(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bIsChannelingCancelled;                          // 0x2DC(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_518E[0x3];                                     // Fixing Size After Last Property  
	class FText                                  InteractText;                                      // 0x2E0(0x18)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                        ChannelTime;                                       // 0x2F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bLocked;                                         // 0x2FC(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_518F[0x3];                                     // Fixing Size After Last Property  
	float                                        CoolDownTime;                                      // 0x300(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5190[0xC];                                     // Fixing Size After Last Property  
	class AValCharacter*                         R_CurrentUser;                                     // 0x310(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValHackablePanel* GetDefaultObj();

	void ToggleLock(bool bLock);
	void StartChanneledInteract(class AValCharacter* Initiator);
	void SetIsCancelledChanneling(bool bIsCancelled);
	void SetCachedChanneler(class AValCharacter* Initiator);
	void OnRep_ShouldGenerateOverlapEvents();
	void OnRep_CurrentUser();
	void Multicast_OnChannelingStart(class AValCharacter* Initiator, float StartTime);
	void Multicast_OnChannelingEnd(class AValCharacter* Initiator);
	void Interact(class AValCharacter* Initiator);
	bool GetIsCancelledChanneling();
	enum class EValInteractText GetInteractTextType();
	class FText GetInteractTextOverride();
	class FText GetInteractText();
	float GetChannelTime(class AValCharacter* Initiator);
	class AValCharacter* GetCachedChanneler();
	void EndChanneledInteract(class AValCharacter* Initiator);
	void ClearCurrentUser();
	bool CanInteract(class AValCharacter* Initiator);
	void BP_ServerSetCurrentUser();
	void BP_ClientOpenPanel();
	void BP_ClientOnChannelingStart(class AValCharacter* Initiator, float StartTime);
	void BP_ClientOnChannelingEnd(class AValCharacter* Initiator);
	void BP_ClientClosePanel();
};

// 0x0 (0x40 - 0x40)
// Class Valhalla.ValHealthRegenExecutionCalc
class UValHealthRegenExecutionCalc : public UGameplayEffectExecutionCalculation
{
public:

	static class UClass* StaticClass();
	static class UValHealthRegenExecutionCalc* GetDefaultObj();

};

// 0x48 (0x2E0 - 0x298)
// Class Valhalla.ValIndicator
class AValIndicator : public AActor
{
public:
	uint8                                        Pad_5192[0x8];                                     // Fixing Size After Last Property  
	class UValCharacterOverlayComponent*         IndicatorOverlayComp;                              // 0x2A0(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                  InteractText;                                      // 0x2A8(0x18)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class USphereComponent*                      InteractCollisionComp;                             // 0x2C0(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5193[0x18];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValIndicator* GetDefaultObj();

	void OnCueInteract();
	void Interact(class AValCharacter* Initiator);
	class FText GetInteractText();
	class UPrimitiveComponent* GetInteractComponent();
	class USphereComponent* GetInteractCollisionComp();
	bool CanInteract(class AValCharacter* Initiator);
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValInteractable
class IValInteractable : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IValInteractable* GetDefaultObj();

	void StartChanneledInteract(class AValCharacter* Initiator);
	void SetIsCancelledChanneling(bool bIsCancelled);
	void SetCachedChanneler(class AValCharacter* Initiator);
	void PredictInteract(class AValCharacter* Initiator);
	void OnEndBestInteractable(class AValCharacter* Initiator);
	void OnBecomeBestInteractable(class AValCharacter* Initiator);
	void Interact(class AValCharacter* Initiator);
	bool GetIsCancelledChanneling();
	enum class EInteractType GetInteractType();
	enum class EValInteractText GetInteractTextType();
	class FText GetInteractTextOverride();
	class FText GetInteractText();
	int32 GetInteractPriority();
	class UPrimitiveComponent* GetInteractComponent();
	float GetChannelTime(class AValCharacter* Initiator);
	class AValCharacter* GetCachedChanneler();
	enum class EInteractionFailureType GetBlockInteractReason(class AValCharacter* Initiator);
	void EndInteraction();
	void EndChanneledInteract(class AValCharacter* Initiator);
	bool CanInteract(class AValCharacter* Initiator);
};

// 0x58 (0x2F0 - 0x298)
// Class Valhalla.ValInteractableActor
class AValInteractableActor : public AActor
{
public:
	uint8                                        Pad_51AD[0x20];                                    // Fixing Size After Last Property  
	class UBoxComponent*                         InteractCollisionComp;                             // 0x2B8(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                R_InteractableParent;                              // 0x2C0(0x8)(Edit, BlueprintVisible, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ChannelTime;                                       // 0x2C8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_51AE[0x4];                                     // Fixing Size After Last Property  
	class AValCharacter*                         R_Channeler;                                       // 0x2D0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                  InteractText;                                      // 0x2D8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValInteractableActor* GetDefaultObj();

	void SetCachedChanneler(class AValCharacter* Initiator);
	void PredictInteract(class AValCharacter* Initiator);
	void OnRep_InteractableParent();
	void OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnEndBestInteractable(class AValCharacter* Initiator);
	void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct Engine_HitResult& SweepResult);
	void OnBecomeBestInteractable(class AValCharacter* Initiator);
	void Interact(class AValCharacter* Initiator);
	enum class EValInteractText GetInteractTextType();
	class FText GetInteractTextOverride();
	class FText GetInteractText();
	class UPrimitiveComponent* GetInteractComponent();
	float GetChannelTime(class AValCharacter* Initiator);
	class AValCharacter* GetCachedChanneler();
	bool CanInteract(class AValCharacter* Initiator);
};

// 0x88 (0x320 - 0x298)
// Class Valhalla.ValInteractablePanel
class AValInteractablePanel : public AActor
{
public:
	uint8                                        Pad_51C1[0x8];                                     // Fixing Size After Last Property  
	class USphereComponent*                      InteractCollisionComp;                             // 0x2A0(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                       RootSceneComp;                                     // 0x2A8(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_51C2[0x18];                                    // Fixing Size After Last Property  
	class AValCharacter*                         R_Channeler;                                       // 0x2C8(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_ChannelStartTime;                                // 0x2D0(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_51C4[0x4];                                     // Fixing Size After Last Property  
	class FText                                  InteractText;                                      // 0x2D8(0x18)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                        ChannelTime;                                       // 0x2F0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_51C5[0x4];                                     // Fixing Size After Last Property  
	class AValCharacter*                         R_CurrentUser;                                     // 0x2F8(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                 AttachedActor;                                     // 0x300(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bShouldGenerateOverlapEvents;                    // 0x308(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_51C6[0x7];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnAttachedActorUpdatedDel;                         // 0x310(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValInteractablePanel* GetDefaultObj();

	void StartChanneledInteract(class AValCharacter* Initiator);
	void SetIsCancelledChanneling(bool bIsCancelled);
	void SetCachedChanneler(class AValCharacter* Initiator);
	void OnRep_ShouldGenerateOverlapEvents();
	void OnParentBestInteractionTextUpdated(class FText NewText);
	void Multicast_OnInteract(class AValCharacter* Initiator);
	void Multicast_OnChannelingStart(class AValCharacter* Initiator, float StartTime);
	void Multicast_OnChannelingEnd(class AValCharacter* Initiator);
	bool K2_CanInteract(class AValCharacter* Initiator);
	void Interact(class AValCharacter* Initiator);
	bool GetIsCancelledChanneling();
	enum class EValInteractText GetInteractTextType();
	class FText GetInteractTextOverride();
	class FText GetInteractText();
	float GetChannelTime(class AValCharacter* Initiator);
	class AValCharacter* GetCachedChanneler();
	void EndChanneledInteract(class AValCharacter* Initiator);
	void ClearCurrentUser();
	bool CanInteract(class AValCharacter* Initiator);
	void CacheParent(class AActor* NewParent);
	void BP_OnInteract(class AValCharacter* Initiator);
	void BP_OnChannelingStart(class AValCharacter* Initiator, float StartTime);
	void BP_OnChannelingEnd(class AValCharacter* Initiator);
};

// 0x940 (0xBD8 - 0x298)
// Class Valhalla.ValInventoryManager
class AValInventoryManager : public AActor
{
public:
	FMulticastInlineDelegateProperty_            OnLoadoutsUpdated;                                 // 0x298(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnInventoryManagerInitalized;                      // 0x2A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStashSlotsUpdated;                               // 0x2B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnArsenalSlotsUpdated;                             // 0x2C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMissionSlotsUpdated;                             // 0x2D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBackpackSlotsUpdated;                            // 0x2E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEquippedSlotsUpdated;                            // 0x2F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnOverflowSlotsUpdated;                            // 0x308(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCosmeticSlotsUpdated;                            // 0x318(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnInventoryItemUpdated;                            // 0x328(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStashSizeUpdated;                                // 0x338(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnArsenalSizeUpdated;                              // 0x348(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBackpackSizeUpdated;                             // 0x358(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSecureSlotsSizeUpdated;                          // 0x368(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMissionSlotsSizeUpdated;                         // 0x378(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActiveStashSizeUpdated;                          // 0x388(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStashLoadoutIdUpdated;                           // 0x398(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerLoadoutIdUpdated;                          // 0x3A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCosmeticLoadoutIdUpdated;                        // 0x3B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerPropertiesReady;                           // 0x3C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSlotUsed;                                        // 0x3D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterClassChanged;                           // 0x3E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnWeightUpdated;                                   // 0x3F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnWeightExceeded;                                  // 0x408(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_5258[0x10];                                    // Fixing Size After Last Property  
	TArray<struct Valhalla_InventorySlot>        R_StashSlots;                                      // 0x428(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_InventorySlot>        R_ArsenalSlots;                                    // 0x438(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_InventorySlot>        R_MissionSlots;                                    // 0x448(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_InventorySlot>        R_BackpackSlots;                                   // 0x458(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_InventorySlot>        R_EquippedSlots;                                   // 0x468(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_InventorySlot>        R_OverflowSlots;                                   // 0x478(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_InventorySlot>        R_CosmeticSlots;                                   // 0x488(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_PlatformLoadout>      R_Loadouts;                                        // 0x498(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	int32                                        R_StashSize;                                       // 0x4A8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_ArsenalSize;                                     // 0x4AC(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_MissionSlotsSize;                                // 0x4B0(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_BackpackSize;                                    // 0x4B4(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_SecureSlotsSize;                                 // 0x4B8(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_ActiveStashSize;                                 // 0x4BC(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                R_StashLoadoutId;                                  // 0x4C0(0x10)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                R_PlayerLoadoutId;                                 // 0x4D0(0x10)(Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                R_CosmeticLoadoutId;                               // 0x4E0(0x10)(Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              R_CharacterClass;                                  // 0x4F0(0x8)(Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                R_UnlockedAbilityIds;                              // 0x4F8(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                R_UnlockedPassiveIds;                              // 0x508(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                R_UnlockedPassiveSlotIds;                          // 0x518(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UValItemAsset>>  R_LockedAbilityAssets;                             // 0x528(0x10)(Net, ZeroConstructor, RepNotify, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UValItemAsset>>  R_LockedPassiveAssets;                             // 0x538(0x10)(Net, ZeroConstructor, RepNotify, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UValItemAsset>>  R_LockedPassiveSlotAssets;                         // 0x548(0x10)(Net, ZeroConstructor, RepNotify, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_PlayerPropertyData>   R_PlayerPropertyValues;                            // 0x558(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_525B[0x468];                                   // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnPlayerAttributesUpdated;                         // 0x9D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<enum class EPlayerAttributeType, float> AllAttributeValues;                                // 0x9E0(0x50)(Protected, NativeAccessSpecifierProtected)
	TMap<enum class EPlayerAttributeType, float> ClassAttributeValues;                              // 0xA30(0x50)(Protected, NativeAccessSpecifierProtected)
	TMap<enum class EPlayerAttributeType, float> PlayerAttributeValues;                             // 0xA80(0x50)(Protected, NativeAccessSpecifierProtected)
	TMap<enum class EPlayerAttributeType, float> OverrideAttributeValues;                           // 0xAD0(0x50)(Protected, NativeAccessSpecifierProtected)
	TMap<enum class EPlayerAttributeType, float> BooostAttributeValues;                             // 0xB20(0x50)(Protected, NativeAccessSpecifierProtected)
	TMap<enum class EPlayerAttributeType, float> ClassAttributeMultipliers;                         // 0xB70(0x50)(Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnPlayerModifiersUpdated;                          // 0xBC0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        GlobalProtection;                                  // 0xBD0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_525C[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValInventoryManager* GetDefaultObj();

	void UseSlot(struct Valhalla_InventorySlot& RequestedSlot);
	void UpdatePlayerModifierValues();
	void UpdatePlayerAttributeValues();
	void StoreSlot(struct Valhalla_InventorySlot& RequestedSlot);
	void SetActiveStashTab(int32 Index);
	void ServerUseSlot(struct Valhalla_InventorySlot& RequestedSlot);
	void ServerStoreSlot(struct Valhalla_InventorySlot& RequestedSlot);
	void ServerMoveToSecureSlot(struct Valhalla_InventorySlot& RequestedSlot);
	void ServerExtractInteractableInventorySlots();
	void ServerEquipLoadout(const class FString& LoadoutId);
	void ServerEquipClassSlotItem(struct GameplayTags_GameplayTag& CharacterClass, int32 SlotId, int32 ItemId, bool ForceEquip);
	void ServerDragSlot(struct Valhalla_InventorySlot& RequestedStart, struct Valhalla_InventorySlot& RequestedEnd, int32 Quantity);
	void ServerAssignQuickSlotItem(struct GameplayTags_GameplayTag& QuickSlot, int32 ItemId);
	void SaveLoadouts();
	void RemoveSellRequest(struct CoreUObject_Guid& ClientRefId);
	bool RemoveMissionSlotsType(struct GameplayTags_GameplayTag& Type, int32 Quantity);
	bool RemoveItemIdFromMissionSlots(int32 ItemId, int32 Quantity);
	bool RemoveEquipSlotQuantity(struct GameplayTags_GameplayTag& EquipSlot, int32 Quantity);
	bool RemoveBackpackType(struct GameplayTags_GameplayTag& Type, int32 Quantity);
	bool RemoveArsenalType(struct GameplayTags_GameplayTag& Type, int32 Quantity);
	void OnWeaponCosmeticConfigLoaded();
	void OnStashAssetsLoaded();
	void OnSettingsUpdated();
	void OnSettingsLoaded();
	void OnRep_UnlockedPassiveSlotIds();
	void OnRep_UnlockedPassiveIds();
	void OnRep_UnlockedAbilityIds();
	void OnRep_StashSlots();
	void OnRep_StashSize();
	void OnRep_StashLoadoutId();
	void OnRep_SecureSlotsSize();
	void OnRep_PlayerPropertyValues();
	void OnRep_PlayerLoadoutId();
	void OnRep_OverflowSlots();
	void OnRep_MissionSlotsSize();
	void OnRep_MissionSlots();
	void OnRep_LockedPassiveSlotAssets();
	void OnRep_LockedPassiveAssets();
	void OnRep_LockedAbilityAssets();
	void OnRep_Loadouts();
	void OnRep_EquippedSlots();
	void OnRep_CosmeticSlots();
	void OnRep_CosmeticLoadoutId();
	void OnRep_CharacterClass();
	void OnRep_BackpackSlots();
	void OnRep_BackpackSize();
	void OnRep_ArsenalSlots();
	void OnRep_ArsenalSize();
	void OnRep_ActiveStashSize();
	void OnPlayerLoggedOut(class AGameModeBase* InGameMode, class AController* Controller);
	void OnPlayerInfoReady(class UValPlayerInfo* PlayerInfo);
	void OnPlayerAttributeConfigSet(class UPlayerAttributeConfig* PlayerAttributeConfig);
	void OnPassiveSlotAssetsLoaded();
	void OnPassiveAssetsLoaded();
	void OnOverflowAssetsLoaded();
	void OnMissionSlotsAssetsLoaded();
	void OnLoadoutsVerified();
	void OnLoadoutConfigReady();
	void OnInventoryUpdated(TArray<int32>& ItemIds);
	void OnInventoryOrderResults(bool Success, const struct CoreUObject_Guid& OrderReferenceId);
	void OnInventoryLoaded();
	void OnGetLoadoutSettingsResponse(bool Success, struct RallyHereIntegration_RH_PlayerSettingsDataWrapper* Response);
	void OnGameStateSet(class AGameStateBase* GameState);
	void OnEquippedAssetsLoaded();
	void OnCosmeticAssetsLoaded();
	void OnBackpackAssetsLoaded();
	void OnArsenalAssetsLoaded();
	void OnAbilityAssetsLoaded();
	void MoveToSecureSlot(struct Valhalla_InventorySlot& RequestedStart);
	bool IsStashFull();
	bool IsMissionSlotsFull();
	bool IsItemIdStashBlacklisted(int32 ItemId);
	bool IsItemIdSecureSlotBlackListed(int32 ItemId);
	bool IsItemIdInInventoryMap(int32 ItemId);
	bool IsItemIdEquipped(int32 ItemId, int32* SlotId);
	bool IsItemIdBackpackBlacklisted(int32 ItemId);
	bool IsItemIdArsenalBlacklisted(int32 ItemId);
	bool IsItemClassCompatible(int32 ItemId);
	bool IsInventoryIdEquipped(struct CoreUObject_Guid& InventoryId, int32* SlotId);
	bool IsBackpackFull();
	bool IsArsenalFull();
	void InitializePlayer();
	bool GetUpgradeLevelForItemId(int32 ItemId, int32* UpgradeLevel);
	void GetUnlockedPerks(TArray<int32>* OutUnlockedPerks);
	void GetUnlockedAbilities(TArray<int32>* OutUnlockedAbilities);
	bool GetTransientItemLocking();
	void GetStashSlots(TArray<struct Valhalla_InventorySlot>* StashSlots);
	bool GetStashSlotAt(int32 SlotId, struct Valhalla_InventorySlot* StashSlot);
	int32 GetStashSize();
	class FString GetStashLoadoutId();
	bool GetSlotIdByEquipSlot(struct GameplayTags_GameplayTag& EquipSlot, int32* SlotId, int32 LoadoutType);
	class UValSettingsSubsystem* GetSettingsSubsystem();
	int32 GetSecureSlotsSize();
	bool GetQuickSlotInventory(struct GameplayTags_GameplayTag& QuickSlot, TArray<struct Valhalla_InventoryItem>* Inventory);
	void GetPlayerPropertyLevels(TArray<struct Valhalla_PlayerPropertyData>* OutData);
	int32 GetPlayerPropertyLevel(enum class EPlayerProperty PropertyToCheck);
	class FString GetPlayerLoadoutId();
	class UValPlayerInventory* GetPlayerInventory();
	TMap<enum class EPlayerAttributeType, float> GetPlayerAttributeValues();
	int32 GetNumOpenMissionSlots();
	int32 GetNumOpenBackpackSlots();
	int32 GetMissionSlotsSize();
	void GetMissionSlots(TArray<struct Valhalla_InventorySlot>* MissionSlots);
	bool GetMissionSlotAt(int32 SlotId, struct Valhalla_InventorySlot* MissionSlot);
	float GetMaximumWeight();
	enum class ERarity GetMaxEquipmentRarity();
	void GetLockedPerks(TArray<TSoftObjectPtr<class UValItemAsset>>* OutLockedPerks);
	void GetLockedAbilities(TArray<TSoftObjectPtr<class UValItemAsset>>* OutLockedAbilities);
	void GetLoadouts(TArray<struct Valhalla_PlatformLoadout>* Loadouts);
	class UValLoadoutConfig* GetLoadoutConfig(bool LogError);
	bool GetItemModAssetById(int32 ItemId, class UValItemModAsset** ItemModAsset);
	bool GetItemIdForEquipSlot(int32* ItemId, struct GameplayTags_GameplayTag& DesiredSlot);
	bool GetItemAssetById(int32 ItemId, class UValItemAsset** ItemAsset);
	void GetInventoryItemsByItemId(int32 ItemId, TArray<struct Valhalla_InventoryItem>* OutInventoryItems);
	bool GetInventoryItemByInventoryId(struct CoreUObject_Guid& InventoryId, struct Valhalla_InventoryItem* OutInventoryItem);
	bool GetInventoryIdsFromItemId(int32 ItemId, TArray<struct CoreUObject_Guid>* OutInventoryIds);
	void GetInventoryForItemType(struct GameplayTags_GameplayTag& ItemType, TArray<struct Valhalla_InventoryItem>* OutInventory);
	float GetGlobalProtection();
	bool GetEquipSlotForRequestedSlot(struct Valhalla_InventorySlot& RequestedSlot, struct GameplayTags_GameplayTag* EquipSlot);
	bool GetEquipSlotBySlotId(int32 SlotId, struct GameplayTags_GameplayTag* EquipSlot, int32 LoadoutType);
	void GetEquippedSlots(TArray<struct Valhalla_InventorySlot>* EquippedSlots);
	bool GetEquippedSlotAt(int32 SlotId, struct Valhalla_InventorySlot* EquippedSlot, int32 LoadoutTypeId);
	bool GetEquippedCosmeticItemsAt(struct GameplayTags_GameplayTag& EquipSlot, struct Valhalla_InventoryItem* InventoryItem);
	bool GetEquippedCosmeticForItemId(int32 ItemId, struct Valhalla_InventoryItem* InventoryItem);
	bool GetEquippedClassSlotItem(struct GameplayTags_GameplayTag& CharacterClass, int32 SlotId, class UValItemAsset** ItemAsset);
	float GetCurrentWeight();
	void GetCosmeticSlots(TArray<struct Valhalla_InventorySlot>* CosmeticSlots);
	void GetCosmeticItemsForEquipSlot(struct GameplayTags_GameplayTag& EquipSlot, TArray<struct Valhalla_InventoryItem>* InventoryItems);
	void GetClassSlotOptions(struct GameplayTags_GameplayTag& CharacterClass, int32 SlotId, TArray<class UValItemAsset*>* OptionAssets);
	void GetClassAvailablePerks(struct GameplayTags_GameplayTag& CharacterClass, TArray<class UValItemAsset*>* OutPerkAssets);
	TMap<enum class EPlayerAttributeType, float> GetClassAttributeValues();
	TMap<enum class EPlayerAttributeType, float> GetClassAttributeMultipliers();
	void GetCharacterClasses(TArray<struct GameplayTags_GameplayTag>* CharacterClasses);
	struct GameplayTags_GameplayTag GetCharacterClass();
	void GetCharacterAbilities(struct GameplayTags_GameplayTag& CharacterClass, TArray<class UValItemAsset*>* Abilities);
	TMap<enum class EPlayerAttributeType, float> GetBooostAttributeValues();
	void GetBackpackSlots(TArray<struct Valhalla_InventorySlot>* BackpackSlots);
	bool GetBackpackSlotAt(int32 SlotId, struct Valhalla_InventorySlot* BackpackSlot);
	int32 GetBackpackSize();
	void GetArsenalSlots(TArray<struct Valhalla_InventorySlot>* ArsenalSlots);
	bool GetArsenalSlotAt(int32 SlotId, struct Valhalla_InventorySlot* ArsenalSlot);
	int32 GetArsenalSize();
	TMap<enum class EPlayerAttributeType, float> GetAllAttributeValues();
	int32 GetActiveStashSize();
	void ExtractInteractableInventorySlots();
	void EquipLoadout(const class FString& LoadoutId);
	void EquipCosmeticItem(struct GameplayTags_GameplayTag& EquipSlot, struct Valhalla_InventoryItem& RequestedItem);
	bool EquipClassSlotItem(struct GameplayTags_GameplayTag& CharacterClass, int32 SlotId, int32 ItemId, bool ForceEquip);
	void EquipCharacterClass(struct GameplayTags_GameplayTag& CharacterClass);
	void DragSlot(struct Valhalla_InventorySlot& RequestedStart, struct Valhalla_InventorySlot& RequestedEnd, int32 Quantity);
	bool DoesMissionSlotsContainType(struct GameplayTags_GameplayTag& Type);
	bool DoesMissionSlotsContainItemId(int32 ItemId);
	bool DoesBackpackContainType(struct GameplayTags_GameplayTag& Type);
	bool DoesBackpackContainItemId(int32 ItemId);
	void ClientNotifySlotUseResult(bool Success, int32 ItemId);
	void ClientClearCachedPerkUnlocks();
	bool CanSlotBeEmpty(struct Valhalla_InventorySlot& InventorySlot);
	void AssignQuickSlotItem(struct GameplayTags_GameplayTag& QuickSlot, int32 ItemId);
	void AssignItemIdToLoadout(int32 ItemId, struct GameplayTags_GameplayTag& DesiredSlot);
	void AddSellRequest(struct CoreUObject_Guid& ClientRefId, struct Valhalla_InventorySlot& InventorySlot, struct Valhalla_InventoryItem& InventoryItem);
};

// 0x8 (0x6F0 - 0x6E8)
// Class Valhalla.ValItemOverlayComponent
class UValItemOverlayComponent : public UWidgetComponent
{
public:
	uint8                                        Pad_525F[0x8];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValItemOverlayComponent* GetDefaultObj();

	void UpdateVisibility();
	class UValItemOverlay* GetOverlayWidget();
};

// 0x18 (0x2D8 - 0x2C0)
// Class Valhalla.ValItemOverlay
class UValItemOverlay : public UUserWidget
{
public:
	class AValPickup_Upgrade*                    OwningItem;                                        // 0x2C0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValCharacter>          LocalCharacter;                                    // 0x2C8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValPlayerController>   LocalPlayer;                                       // 0x2D0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValItemOverlay* GetDefaultObj();

	void UpdateInformation();
	void SetOwningItem(class AValPickup_Upgrade* NewOwner);
	void OnUpdateVisibility(bool Visible);
	void OnOwningItemSet();
	class AValPlayerController* GetLocalPlayer();
	class AValCharacter* GetLocalChar();
};

// 0x0 (0x298 - 0x298)
// Class Valhalla.ValItemPreviewActor
class AValItemPreviewActor : public AActor
{
public:

	static class UClass* StaticClass();
	static class AValItemPreviewActor* GetDefaultObj();

	void UpdateDetailData(struct GameplayTags_GameplayTag& EquipSlot, struct Valhalla_InventoryItem& Item);
	void UpdateData(struct Valhalla_InventoryItem& Item);
	void UpdateAssetData(class UValItemAsset* Item);
};

// 0x20 (0xB20 - 0xB00)
// Class Valhalla.ValJetpackAnimInstance
class UValJetpackAnimInstance : public UValAnimInstance
{
public:
	float                                        IsFallingAlpha;                                    // 0xB00(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        IsFallingAlphaInterpSpeedIn;                       // 0xB04(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        IsFallingAlphaInterpSpeedOut;                      // 0xB08(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsOpen;                                           // 0xB0C(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5273[0x3];                                     // Fixing Size After Last Property  
	float                                        CloseJetpackTimeDelay;                             // 0xB10(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5274[0xC];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValJetpackAnimInstance* GetDefaultObj();

};

// 0x70 (0x110 - 0xA0)
// Class Valhalla.ValKickbackComponent
class UValKickbackComponent : public UActorComponent
{
public:
	struct CoreUObject_Vector2D                  CurrentOffset;                                     // 0xA0(0x10)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_FloatRange                TimeRange;                                         // 0xB0(0x10)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        KickbackEval;                                      // 0xC0(0x4)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DurationRemaining;                                 // 0xC4(0x4)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveVector*                          KickbackCurve;                                     // 0xC8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RecoveryRate;                                      // 0xD0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OffsetRecoveryRate;                                // 0xD4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFiring;                                           // 0xD8(0x1)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5275[0x7];                                     // Fixing Size After Last Property  
	struct CoreUObject_Rotator                   InitialFiringRotation;                             // 0xE0(0x18)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct CoreUObject_Rotator                   DeltaFiringRotation;                               // 0xF8(0x18)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValKickbackComponent* GetDefaultObj();

	void SetKickbackCurve(class UCurveVector* NewKickbackCurve);
	void Kickback(float Duration, float Intensity);
	struct CoreUObject_Vector2D GetCurrentOffset();
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValLandscapeFunctionLibrary
class UValLandscapeFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UValLandscapeFunctionLibrary* GetDefaultObj();

	void UpdateLandscape(class UObject* WorldContextObject);
	void GenerateAISplinesFromLandscape(class UObject* WorldContextObject, class USplineComponent* SplineComponent, int32 MaxSplinePoints);
	void ForcePostEditMove(class AActor* Actor);
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValLeaderboardWriter
class UValLeaderboardWriter : public UObject
{
public:

	static class UClass* StaticClass();
	static class UValLeaderboardWriter* GetDefaultObj();

};

// 0x8 (0x2A8 - 0x2A0)
// Class Valhalla.ValLevelScript
class AValLevelScript : public ALevelScriptActor
{
public:
	class UTexture2D*                            MiniMapTexture;                                    // 0x2A0(0x8)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValLevelScript* GetDefaultObj();

	void GetMinimapTexture(class UTexture2D** Texture);
};

// 0x18 (0x2B0 - 0x298)
// Class Valhalla.ValLightPanel
class AValLightPanel : public AActor
{
public:
	class USceneComponent*                       SceneComponent;                                    // 0x298(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        EffectRadius;                                      // 0x2A0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CooldownDuration;                                  // 0x2A4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_CooldownCompleteTime;                            // 0x2A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDefaultRequireMastery;                            // 0x2AC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_527B[0x3];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValLightPanel* GetDefaultObj();

	void OnRep_CooldownCompleteTime();
	void OnLightShutdown();
	void OnLightOvercharge();
	void EventCooldownCompleteTimeChanged(float CooldownCompleteTime);
};

// 0x18 (0x48 - 0x30)
// Class Valhalla.ValLoadingScreenSubsystem
class UValLoadingScreenSubsystem : public UGameInstanceSubsystem
{
public:
	FMulticastInlineDelegateProperty_            OnLoadingScreenWidgetChanged;                      // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TSubclassOf<class UUserWidget>               LoadingScreenWidgetClass;                          // 0x40(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UValLoadingScreenSubsystem* GetDefaultObj();

	void SetLoadingScreenContentWidget(TSubclassOf<class UUserWidget> NewWidgetClass);
	TSubclassOf<class UUserWidget> GetLoadingScreenContentWidget();
};

// 0x30 (0xF0 - 0xC0)
// Class Valhalla.ValLoadoutAsset
class UValLoadoutAsset : public URH_ItemAsset
{
public:
	int32                                        Type;                                              // 0xC0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaximumWeight;                                     // 0xC4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        LevelRequirement;                                  // 0xC8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5281[0x4];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_LoadoutEquipment>     Equipment;                                         // 0xD0(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UDataAsset>>     AvailablePerks;                                    // 0xE0(0x10)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValLoadoutAsset* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class Valhalla.ValLoadoutGroup
class UValLoadoutGroup : public UDataAsset
{
public:
	TArray<TSoftObjectPtr<class UValLoadoutAsset>> Loadouts;                                          // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValLoadoutGroup* GetDefaultObj();

};

// 0x108 (0x130 - 0x28)
// Class Valhalla.ValLoadoutConfig
class UValLoadoutConfig : public UObject
{
public:
	FMulticastInlineDelegateProperty_            OnLoadoutConfigReady;                              // 0x28(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_528B[0x20];                                    // Fixing Size After Last Property  
	class UValLoadoutGroup*                      LoadoutGroup;                                      // 0x58(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValLoadoutAsset*                      AppearanceLoadout;                                 // 0x60(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValLoadoutDefinition*                 LoadoutDefinition;                                 // 0x68(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValLoadoutDefinition*                 AppearanceLoadoutDefinition;                       // 0x70(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UValLoadoutAsset*>              LoadoutAssets;                                     // 0x78(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_528C[0xA8];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValLoadoutConfig* GetDefaultObj();

	void OnItemChildPathsLoaded();
	void OnItemChildAssetsLoaded();
	void OnItemAssetsLoaded();
	void OnGameStateSet(class AGameStateBase* GameState);
	void OnConfigLoaded();
	void OnAssetsLoaded();
	bool IsReady();
	void GetLoadoutAssetsByType(int32 Type, TArray<class UValLoadoutAsset*>* OutLoadoutAssets);
	void GetLoadoutAssets(TArray<class UValLoadoutAsset*>* OutLoadoutAssets);
	bool GetLoadoutAssetByTypeAndClass(int32 Type, struct GameplayTags_GameplayTag& ClassTag, class UValLoadoutAsset** OutLoadoutAsset);
};

// 0xA0 (0xD0 - 0x30)
// Class Valhalla.ValLoadoutDefinition
class UValLoadoutDefinition : public UDataAsset
{
public:
	TMap<struct GameplayTags_GameplayTag, int32> EquipSlotIds;                                      // 0x30(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                        Pad_528E[0x50];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValLoadoutDefinition* GetDefaultObj();

};

// 0x58 (0x380 - 0x328)
// Class Valhalla.ValLobbyBeaconClient
class AValLobbyBeaconClient : public AOnlineBeaconClient
{
public:
	FMulticastInlineDelegateProperty_            OnClientQueuedDelegate;                            // 0x328(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnQueuePoppedDelegate;                             // 0x338(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                        QueuedPlayers;                                     // 0x348(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5291[0x4];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnQueuedPlayersDelegate;                           // 0x350(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_5292[0x20];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValLobbyBeaconClient* GetDefaultObj();

	void ServerUnQueue();
	void ServerQueueUp();
	void ServerKickIt();
	void ServerCheckLobbyCode(const class FString& LobbyCode);
	void OnRep_QueuedPlayers();
	void ClientQueuePopped(bool bAccepted);
	void ClientQueued(bool bAlreadyInQueue);
	void ClientLobbyCodeChecked(bool bCodeValid);
};

// 0x38 (0x2F8 - 0x2C0)
// Class Valhalla.ValLobbyBeaconHost
class AValLobbyBeaconHost : public AOnlineBeaconHostObject
{
public:
	uint8                                        Pad_5293[0x8];                                     // Fixing Size After Last Property  
	bool                                         bPoppedQueue;                                      // 0x2C8(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5294[0x7];                                     // Fixing Size After Last Property  
	TArray<class AOnlineBeaconClient*>           QueuedClients;                                     // 0x2D0(0x10)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                         bRequiresLobbyCode;                                // 0x2E0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5295[0x7];                                     // Fixing Size After Last Property  
	TArray<class FString>                        ValidLobbyCodes;                                   // 0x2E8(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValLobbyBeaconHost* GetDefaultObj();

};

// 0x78 (0xA8 - 0x30)
// Class Valhalla.ValAudioThreatDataAsset
class UValAudioThreatDataAsset : public UDataAsset
{
public:
	TArray<int32>                                BucketSizes;                                       // 0x30(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAkRtpc*                               ThreatRTPC;                                        // 0x40(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        RTPCInterpolationTimeMs;                           // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5296[0x4];                                     // Fixing Size After Last Property  
	struct Valhalla_AudioThreatDataSettings      SettingDistance;                                   // 0x50(0x10)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct Valhalla_AudioThreatDataSettings      SettingDamage;                                     // 0x60(0x10)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct Valhalla_AudioThreatDataSettings      SettingShotNear;                                   // 0x70(0x10)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct Valhalla_AudioThreatDataSettings      SettingEnemySizeOnScreenScore;                     // 0x80(0x10)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct Valhalla_AudioThreatDataSettings      SettingMySizeOnEnemyScreenScore;                   // 0x90(0x10)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                        SettingSeenByWeight;                               // 0xA0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SettingIsCybridWeight;                             // 0xA4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValAudioThreatDataAsset* GetDefaultObj();

};

// 0xC0 (0x360 - 0x2A0)
// Class Valhalla.ValLocalAudioThreatComponent
class UValLocalAudioThreatComponent : public USceneComponent
{
public:
	class UValAudioThreatDataAsset*              SettingsData;                                      // 0x2A0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValCharacter>          OwnerPlayer;                                       // 0x2A8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<TWeakObjectPtr<class UValProxyAudioThreatComponent>, struct Valhalla_AudioThreatData> ThreatData;                                        // 0x2B0(0x50)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<TWeakObjectPtr<class UValProxyAudioThreatComponent>, struct Valhalla_CompiledAudioThreatData> CompiledData;                                      // 0x300(0x50)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_529C[0x10];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValLocalAudioThreatComponent* GetDefaultObj();

	void OnViewTargetChanged(class AActor* NewTarget);
	void OnTookDamage(const struct Valhalla_DamageData& Data);
};

// 0x0 (0x2B8 - 0x2B8)
// Class Valhalla.ValLocalPlayer
class UValLocalPlayer : public URH_LocalPlayer
{
public:

	static class UClass* StaticClass();
	static class UValLocalPlayer* GetDefaultObj();

};

// 0x20 (0xE0 - 0xC0)
// Class Valhalla.ValLootAsset
class UValLootAsset : public URH_ItemAsset
{
public:
	TArray<struct Valhalla_LootItem>             Items;                                             // 0xC0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_SubLoot>              SubLoot;                                           // 0xD0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValLootAsset* GetDefaultObj();

	void GetSubLoot(TArray<struct Valhalla_SubLoot>* OutSubLoot);
	void GetItems(TArray<struct Valhalla_LootItem>* OutItems);
};

// 0xE8 (0x380 - 0x298)
// Class Valhalla.ValLootDepositPod
class AValLootDepositPod : public AActor
{
public:
	uint8                                        Pad_52B0[0x8];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnDepositPodDataChanged;                           // 0x2A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCachedChannelerChanged;                          // 0x2B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USceneComponent*                       SceneComponent;                                    // 0x2C0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                      InteractCollisionComp;                             // 0x2C8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                  InteractText;                                      // 0x2D0(0x18)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class AValPickup_Item>           ArtifactItemClass;                                 // 0x2E8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValPlayerState_Frontier*              R_CachedInitiator;                                 // 0x2F0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_ExtractionTime;                                  // 0x2F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_ExtractionStartTime;                             // 0x2FC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bExtractionPaused;                               // 0x300(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_52B1[0x7];                                     // Fixing Size After Last Property  
	class AValCharacter*                         R_CachedChanneler;                                 // 0x308(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DepositChannelTime;                                // 0x310(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        InterruptChannelTime;                              // 0x314(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    ChannelTimerHandle;                                // 0x318(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ELootDepositPodState              R_State;                                           // 0x320(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ERarity                           R_HighestRarity;                                   // 0x321(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_52B2[0x2];                                     // Fixing Size After Last Property  
	int32                                        R_LegendaryCount;                                  // 0x324(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_NumDepositsInCurrentExtraction;                  // 0x328(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_InstigatingTeam;                                 // 0x32C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_PodNumber;                                       // 0x330(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bPendingDisable;                                 // 0x334(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_52B3[0x3];                                     // Fixing Size After Last Property  
	class AValObjective_LootExtractionSite*      R_OwningExtractionSite;                            // 0x338(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_PendingItem>          DepositedItems;                                    // 0x340(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_52B4[0x20];                                    // Fixing Size After Last Property  
	TArray<class AValCharacter*>                 CharactersThatCanInteract;                         // 0x370(0x10)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValLootDepositPod* GetDefaultObj();

	void StartExtraction(enum class ERarity IncomingHighestRarity);
	void StartChanneledInteract(class AValCharacter* Initiator);
	void SetCachedChanneler(class AValCharacter* Initiator);
	void ReadyExtraction();
	void PauseExtraction(bool bShouldPause);
	void OnTeammateAddedToExtraction();
	void OnRep_State();
	void OnRep_PodNumber();
	void OnRep_PendingDisable();
	void OnRep_OwningExtractionSite();
	void OnRep_NumDepositsInCurrentExtraction();
	void OnRep_LegendaryCount();
	void OnRep_InstigatingTeam();
	void OnRep_HighestRarity();
	void OnPodDisabled();
	void OnPendingDisable(bool Value);
	void OnHighestRaritySet(enum class ERarity Rarity);
	void OnExtractionStarted();
	void OnExtractionInterrupted();
	void OnExtractionFinished();
	void OnChannelingUpdated(class AValCharacter* Initiator, bool bStatus);
	void OnChannelerChanged();
	void OnCanDeposit();
	void NotifyInitiatorTeam(enum class ELootDepositPodState State, enum class ERarity HighestRarity, float TimerAmount, int32 InstigatingTeam, int32 ExtractedLegendaryCount, bool bTeammateAddedDeposit, bool bTeammateDepositIncreasedRarity);
	void MulticastChannelingUpdated(class AValCharacter* Initiator, bool bStatus);
	void InterruptExtraction();
	void Interact(class AValCharacter* Initiator);
	enum class EInteractType GetInteractType();
	class FText GetInteractText();
	class UPrimitiveComponent* GetInteractComponent();
	class AValPlayerState_Frontier* GetDepositingPlayer();
	float GetChannelTime(class AValCharacter* Initiator);
	class AValCharacter* GetCachedChanneler();
	void FinishExtraction();
	void ExtractDepositedLoot();
	void EndChanneledInteract(class AValCharacter* Initiator);
	void EjectDepositedItems();
	void DisablePod();
	bool CanInteract(class AValCharacter* Initiator);
};

// 0x250 (0x278 - 0x28)
// Class Valhalla.ValLootManager
class UValLootManager : public UObject
{
public:
	TArray<struct Valhalla_EquipmentRarityModCount> EquipmentRarityModCount;                           // 0x28(0x10)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_EquipmentRarityModCount> SpecialtyRarityModCount;                           // 0x38(0x10)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<enum class ERarity, struct Valhalla_PowerRange> RarityToDefensivePower;                            // 0x48(0x50)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TMap<enum class ERarity, struct Valhalla_PowerRange> RarityToOffensivePower;                            // 0x98(0x50)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TMap<enum class ERarity, int32>              RarityToChildAssetCount;                           // 0xE8(0x50)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct Valhalla_PlayerAttributeOptions       AvailableAttributes;                               // 0x138(0xF0)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_52D8[0x50];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValLootManager* GetDefaultObj();

	bool GetSpecialtyModCountByRarity(enum class ERarity Rarity, struct GameplayTags_GameplayTag& EquipSlot, int32* ModCount);
	bool GetPropertyRangeByRarity(enum class ERarity Rarity, struct Valhalla_PowerRange* Range);
	bool GetOffensivePowerRangeByRarity(enum class ERarity Rarity, struct Valhalla_PowerRange* Range);
	bool GetOffensivePowerByRarity(enum class ERarity Rarity, float* OffensivePower);
	bool GetDefensivePowerRangeByRarity(enum class ERarity Rarity, struct Valhalla_PowerRange* Range);
	bool GetDefensivePowerByRarity(enum class ERarity Rarity, float* DefensivePower);
	bool GetChildAssetCountByRarity(enum class ERarity Rarity, int32* Count);
	bool GetAvailableModCountByRarity(enum class ERarity Rarity, struct GameplayTags_GameplayTag& EquipSlot, int32* ModCount);
};

// 0x8 (0xC8 - 0xC0)
// Class Valhalla.ValLTIAsset
class UValLTIAsset : public URH_ItemAsset
{
public:
	int32                                        LootId;                                            // 0xC0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_52DC[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValLTIAsset* GetDefaultObj();

};

// 0x68 (0x108 - 0xA0)
// Class Valhalla.ValMarksmanClassComponent
class UValMarksmanClassComponent : public UValClassComponentBase
{
public:
	TMap<class AValCharacter*, struct Engine_TimerHandle> BonusDamageTargets;                                // 0xA0(0x50)(Protected, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              DeceptiveTacticsTag;                               // 0xF0(0x8)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>           TargetedEffect;                                    // 0xF8(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_52E0[0x8];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValMarksmanClassComponent* GetDefaultObj();

	void RemoveBonusDamageTarget(class AValCharacter* Target);
	bool IsCharacterMarkedForBonusDamage(class AValCharacter* Target);
	void AddBonusDamageTarget(class AValCharacter* Target);
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValMathFunctionLibrary
class UValMathFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UValMathFunctionLibrary* GetDefaultObj();

	struct CoreUObject_Vector ShiftLocationBetweenTransforms(struct CoreUObject_Vector& Location, struct CoreUObject_Transform& SourceTransform, struct CoreUObject_Transform& TargetTransform);
	void RotateAroundPivot(struct CoreUObject_Transform& Original, const struct CoreUObject_Vector& PivotLocation, const struct CoreUObject_Rotator& DeltaRotation, bool bRetainOrientation, struct CoreUObject_Transform* New);
	bool IsInCone(const struct CoreUObject_Vector& SourceLocation, const struct CoreUObject_Vector& SourceForwardDir, const struct CoreUObject_Vector& TargetLocation, float MinCosine, float* OUTDegree);
	float GetRadBetweenVectors(struct CoreUObject_Vector& VectorA, struct CoreUObject_Vector& VectorB);
	float GetPercentReduction(float DefenseValue);
	enum class ELateralDirection GetLateralDirectionAngle(float Angle);
	float GetDegBetweenVectors(struct CoreUObject_Vector& VectorA, struct CoreUObject_Vector& VectorB);
	float GetDefenseValue(float DesiredPercentReduction);
	bool BoxOverlapComponentsWithRotation(class UObject* WorldContextObject, const struct CoreUObject_Vector& BoxPos, const struct CoreUObject_Vector& Extent, const struct CoreUObject_Rotator& Rotation, TArray<enum class EObjectTypeQuery>& ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*>& ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
};

// 0x0 (0xA0 - 0xA0)
// Class Valhalla.ValMedicClassComponent
class UValMedicClassComponent : public UValClassComponentBase
{
public:

	static class UClass* StaticClass();
	static class UValMedicClassComponent* GetDefaultObj();

};

// 0x18 (0x10D0 - 0x10B8)
// Class Valhalla.ValMeleeAnimInstance
class UValMeleeAnimInstance : public UValGunAnimInstance
{
public:
	TArray<class UAnimMontage*>                  StandardSwingMontages;                             // 0x10B8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                        Pad_52F4[0x8];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValMeleeAnimInstance* GetDefaultObj();

	void PlayStandardSwing(int32 Index);
};

// 0x170 (0x408 - 0x298)
// Class Valhalla.ValPreviewActor
class AValPreviewActor : public AActor
{
public:
	int32                                        Index;                                             // 0x298(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_52F6[0x4];                                     // Fixing Size After Last Property  
	class AStaticMeshActor*                      BackgroundActor;                                   // 0x2A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                PreviewActor;                                      // 0x2A8(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                       AttachPoint;                                       // 0x2B0(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                       SceneComponent;                                    // 0x2B8(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         IsLoading;                                         // 0x2C0(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_52F8[0x7];                                     // Fixing Size After Last Property  
	struct CoreUObject_SoftClassPath             ClassReference;                                    // 0x2C8(0x20)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class AActor>                    LoadedActorClass;                                  // 0x2E8(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_52F9[0xE8];                                    // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnUpdatePreviewActor;                              // 0x3D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnRemovedPreviewActor;                             // 0x3E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnPreviewActorClassReady;                          // 0x3F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValPreviewActor* GetDefaultObj();

	void UpdateActor(const struct CoreUObject_SoftClassPath& ClassPath);
	bool UnloadActor();
	void SpawnActor();
	void OnClassLoaded();
	class AActor* GetPreviewActor();
	int32 GetIndex();
	class AStaticMeshActor* GetBackgroundActor();
};

// 0x118 (0x520 - 0x408)
// Class Valhalla.ValMergedPreviewActor
class AValMergedPreviewActor : public AValPreviewActor
{
public:
	class UValMeshMergeComponent*                MeshMergeComp;                                     // 0x408(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                SkeletalMeshComp;                                  // 0x410(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UValMergeableMesh*>             MergeableMeshes;                                   // 0x418(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	float                                        PrestreamTexturesDuration;                         // 0x428(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_52FF[0x4];                                     // Fixing Size After Last Property  
	TArray<struct CoreUObject_SoftObjectPath>    ObjectReferences;                                  // 0x430(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<struct GameplayTags_GameplayTag, int32> CachedItemIds;                                     // 0x440(0x50)(NativeAccessSpecifierPrivate)
	TMap<struct GameplayTags_GameplayTag, class UValMergeableMesh*> CachedMergeableMeshes;                             // 0x490(0x50)(NativeAccessSpecifierPrivate)
	uint8                                        Pad_5300[0x40];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValMergedPreviewActor* GetDefaultObj();

	void UpdateMerge();
	void SetWeaponData(TSubclassOf<class UValGameplayAbility> AbilityClass, class UMaterialInterface* Material);
	void SetJetpackData(class UValJetpackMeshData* Mesh, class UMaterialInterface* Material);
	void OnClassesLoaded();
	void LoadMeshData(TArray<struct CoreUObject_SoftObjectPath>& ObjectPaths);
	TArray<class UValMergeableMesh*> GetMergeableMeshes();
};

// 0x18 (0x48 - 0x30)
// Class Valhalla.ValMergeableMesh
class UValMergeableMesh : public UDataAsset
{
public:
	class USkeletalMesh*                         Mesh;                                              // 0x30(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            Curvature;                                         // 0x38(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            Normal;                                            // 0x40(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValMergeableMesh* GetDefaultObj();

};

// 0x30 (0xD0 - 0xA0)
// Class Valhalla.ValMeshMergeComponent
class UValMeshMergeComponent : public UActorComponent
{
public:
	class FString                                CurvatureParam;                                    // 0xA0(0x10)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                NormalParam;                                       // 0xB0(0x10)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                    PostMergeMaterial;                                 // 0xC0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseMeshCache;                                     // 0xC8(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5305[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValMeshMergeComponent* GetDefaultObj();

	class USkeletalMesh* MergeMeshes(TArray<class UValMergeableMesh*>& MergeableMeshes);
};

// 0xE0 (0x378 - 0x298)
// Class Valhalla.ValMimicChest
class AValMimicChest : public AActor
{
public:
	uint8                                        Pad_530F[0x10];                                    // Fixing Size After Last Property  
	enum class EValMimicChestState               R_State;                                           // 0x2A8(0x1)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5310[0x3];                                     // Fixing Size After Last Property  
	float                                        R_ExplosionTimeRemaining;                          // 0x2AC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        R_MaterialSelection;                               // 0x2B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5311[0x4];                                     // Fixing Size After Last Property  
	class FText                                  InteractText;                                      // 0x2B8(0x18)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                         bPreventScrubInteract;                             // 0x2D0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5312[0x3];                                     // Fixing Size After Last Property  
	float                                        ChannelTime;                                       // 0x2D4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AValCharacter*                         CachedInitiator;                                   // 0x2D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStateChanged;                                    // 0x2E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnExplosionTimer;                                  // 0x2F0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMaterialSelection;                               // 0x300(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UBoxComponent*                         CollisionComp;                                     // 0x310(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                      InteractCollisionComp;                             // 0x318(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                Mesh;                                              // 0x320(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMaterialInstance*>             BoxMaterialSelections;                             // 0x328(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    ExplosionTimer;                                    // 0x338(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ExplosionDelay;                                    // 0x340(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5313[0x4];                                     // Fixing Size After Last Property  
	TArray<class AValCharacter*>                 CharactersThatCanInteract;                         // 0x348(0x10)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                        Pad_5314[0x18];                                    // Fixing Size After Last Property  
	int32                                        R_TeamId;                                          // 0x370(0x4)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_5315[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValMimicChest* GetDefaultObj();

	void UpdateVisibility(bool Value);
	bool TryToOpen();
	void TriggerTrap();
	void SetTimer(float Time);
	void SetState(enum class EValMimicChestState State);
	void SetMaterialSelection(int32 Value);
	void OnRep_StateChanged();
	void OnRep_MaterialSelection();
	void OnRep_ExplosionTimeRemaining();
	void Interact(class AValCharacter* Initiator);
	class USkeletalMeshComponent* GetMesh();
	class FText GetInteractText();
	class UPrimitiveComponent* GetInteractComponent();
	class UBoxComponent* GetCollisionComp();
	float GetChannelTime(class AValCharacter* Initiator);
	void Explode();
	void EnsureValidInstigator(struct GameplayAbilities_GameplayEffectSpecHandle& InSpec);
	bool CanInteract(class AValCharacter* Initiator);
};

// 0x20 (0x2B8 - 0x298)
// Class Valhalla.ValMinimapManager
class AValMinimapManager : public AActor
{
public:
	TArray<struct Valhalla_PlayerInfo>           R_MinimapPlayers;                                  // 0x298(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnMinimapUpdate;                                   // 0x2A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValMinimapManager* GetDefaultObj();

	void OnRep_MinimapPlayers();
};

// 0xD8 (0x370 - 0x298)
// Class Valhalla.ValMission
class AValMission : public AActor
{
public:
	class FName                                  MissionId;                                         // 0x298(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MissionTeam;                                       // 0x2A0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MissionIndex;                                      // 0x2A4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         MissionFinale;                                     // 0x2A8(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         MissionPrepare;                                    // 0x2A9(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_531F[0x2];                                     // Fixing Size After Last Property  
	int32                                        TimeRemaining;                                     // 0x2AC(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MissionWinner;                                     // 0x2B0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MissionTotalSlots;                                 // 0x2B4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    MissionTimer;                                      // 0x2B8(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValMissionState*                      MissionState;                                      // 0x2C0(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValMissionContainer*                  MissionContainer;                                  // 0x2C8(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AValPlayerState_Frontier*>      MissionPlayers;                                    // 0x2D0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AValPlayerState_Frontier*>      ProximityPlayers;                                  // 0x2E0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_TeamSlots>            MissionTakenSlots;                                 // 0x2F0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<class AValPlayerState_Frontier*, int32> ParticipantScores;                                 // 0x300(0x50)(Protected, NativeAccessSpecifierProtected)
	bool                                         PendingMission;                                    // 0x350(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5322[0x3];                                     // Fixing Size After Last Property  
	int32                                        MissionDuration;                                   // 0x354(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MissionPrepareDuration;                            // 0x358(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MissionMinSlots;                                   // 0x35C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MissionMaxSlots;                                   // 0x360(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MissionRewardValue;                                // 0x364(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AValMissionState>          MissionStateClass;                                 // 0x368(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValMission* GetDefaultObj();

	void OnMissionTimer();
	void OnCharacterParticipant(class AValCharacter* Character, bool Value);
	bool GetPendingMission();
	void GetParticipantScores(TMap<class AValPlayerState_Frontier*, int32>* Scores);
	int32 GetMissionWinner();
	int32 GetMissionTotalSlots();
	int32 GetMissionTeam();
	int32 GetMissionTakenSlots(int32 TeamNum);
	class AValMissionState* GetMissionState();
	int32 GetMissionRewardValue();
	bool GetMissionPrepare();
	int32 GetMissionMinSlots();
	int32 GetMissionMaxSlots();
	int32 GetMissionIndex();
	class FName GetMissionId();
	bool GetMissionFinale();
	class AValMissionContainer* GetMissionContainer();
};

// 0x60 (0x2F8 - 0x298)
// Class Valhalla.ValMissionContainer
class AValMissionContainer : public AActor
{
public:
	FMulticastInlineDelegateProperty_            OnMissionOverlap;                                  // 0x298(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Pad_532E[0x8];                                     // Fixing Size After Last Property  
	class USphereComponent*                      CollisionComponent;                                // 0x2B0(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         MissionFinale;                                     // 0x2B8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_532F[0x3];                                     // Fixing Size After Last Property  
	int32                                        AssignedTeam;                                      // 0x2BC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  AssignedMission;                                   // 0x2C0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AValPlayerStart*>               PlayerStarts;                                      // 0x2C8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AValMissionStart*>              MissionStarts;                                     // 0x2D8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	TArray<class AValMissionObjective*>          Objectives;                                        // 0x2E8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValMissionContainer* GetDefaultObj();

	void SetPlayerStartMax(int32 MaxPlayers);
	void SetActive(bool Value);
	void SetActivated(bool Value);
	void OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct Engine_HitResult& SweepResult);
	void GetPlayerStarts(TArray<class AValPlayerStart*>* StartList);
	void GetObjectives(TArray<class AValMissionObjective*>* ObjectiveList);
	void GetMissionStarts(TArray<class AValMissionStart*>* StartList);
	bool GetMissionFinale();
	int32 GetAssignedTeam();
	class FName GetAssignedMission();
	bool GetActive();
	bool GetActivated();
	void AddObjective(class AValMissionObjective* Objective);
};

// 0x28 (0x2C0 - 0x298)
// Class Valhalla.ValMissionCoordinator
class AValMissionCoordinator : public AActor
{
public:
	enum class ECoordinatorState                 State;                                             // 0x298(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5331[0x3];                                     // Fixing Size After Last Property  
	int32                                        NextIndex;                                         // 0x29C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AValMission*>                   ActiveMissions;                                    // 0x2A0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AValMissionContainer*>          ConfiguredContainers;                              // 0x2B0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValMissionCoordinator* GetDefaultObj();

};

// 0x18 (0x3E8 - 0x3D0)
// Class Valhalla.ValMissionObjective
class AValMissionObjective : public AValAttributeActor
{
public:
	bool                                         R_Active;                                          // 0x3D0(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5334[0x3];                                     // Fixing Size After Last Property  
	int32                                        AssignedTeam;                                      // 0x3D4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                       SceneComponent;                                    // 0x3D8(0x8)(Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValCharacterOverlayComponent*         OverlayComponent;                                  // 0x3E0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValMissionObjective* GetDefaultObj();

	void UpdateActive(bool Value);
	void OnRep_Active();
	bool IsActive();
	int32 GetAssignedTeam();
};

// 0x10 (0x3F8 - 0x3E8)
// Class Valhalla.ValMissionObjective_CapturePoint
class AValMissionObjective_CapturePoint : public AValMissionObjective
{
public:
	int32                                        R_DefendingTeam;                                   // 0x3E8(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_CaptureProgress;                                 // 0x3EC(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EObjectiveState                   R_ObjectiveState;                                  // 0x3F0(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_533A[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValMissionObjective_CapturePoint* GetDefaultObj();

	void UpdateObjectiveState(enum class EObjectiveState State);
	void UpdateDefendingTeam(int32 Value);
	void UpdateCaptureProgress(float Value);
	void OnRep_ObjectiveState();
	void OnRep_DefendingTeam();
	void OnRep_CaptureProgress();
};

// 0x0 (0x3E8 - 0x3E8)
// Class Valhalla.ValMissionObjective_Harvest_Hopper
class AValMissionObjective_Harvest_Hopper : public AValMissionObjective
{
public:

	static class UClass* StaticClass();
	static class AValMissionObjective_Harvest_Hopper* GetDefaultObj();

	void OnCollectedShards(int32 TeamNum, int32 Value);
};

// 0x0 (0x3E8 - 0x3E8)
// Class Valhalla.ValMissionObjective_Harvest_Meteor
class AValMissionObjective_Harvest_Meteor : public AValMissionObjective
{
public:

	static class UClass* StaticClass();
	static class AValMissionObjective_Harvest_Meteor* GetDefaultObj();

};

// 0x8 (0x3F0 - 0x3E8)
// Class Valhalla.ValMissionObjective_Meltdown
class AValMissionObjective_Meltdown : public AValMissionObjective
{
public:
	class AValGameState_Mission*                 R_MissionGameState;                                // 0x3E8(0x8)(Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValMissionObjective_Meltdown* GetDefaultObj();

	void SetMissionGameState(class AValGameState_Mission* GameState);
	void OnRep_GameState();
	void OnGameState(class AValGameState_Mission* GameState);
	class AValGameState_Mission* GetMissionGameState();
};

// 0x8 (0x2C8 - 0x2C0)
// Class Valhalla.ValMissionStart
class AValMissionStart : public ANavigationObjectBase
{
public:
	int32                                        AssignedTeam;                                      // 0x2C0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ESpawnType                        SpawnType;                                         // 0x2C4(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5345[0x3];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValMissionStart* GetDefaultObj();

	enum class ESpawnType GetSpawnType();
	int32 GetAssignedTeam();
};

// 0x108 (0x3A0 - 0x298)
// Class Valhalla.ValMissionState
class AValMissionState : public AInfo
{
public:
	FMulticastInlineDelegateProperty_            OnMissionId;                                       // 0x298(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnMissionTeam;                                     // 0x2A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnMissionIndex;                                    // 0x2B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnMissionTimer;                                    // 0x2C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnMissionFinale;                                   // 0x2D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnMissionPrepare;                                  // 0x2E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnMissionWinner;                                   // 0x2F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnMissionLocation;                                 // 0x308(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnMissionTakenSlots;                               // 0x318(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnMissionTotalSlots;                               // 0x328(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnWarningTimer;                                    // 0x338(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	bool                                         Pending;                                           // 0x348(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5352[0x3];                                     // Fixing Size After Last Property  
	class FName                                  R_MissionId;                                       // 0x34C(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_MissionTeam;                                     // 0x354(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_MissionIndex;                                    // 0x358(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_MissionTimer;                                    // 0x35C(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_MissionFinale;                                   // 0x360(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_MissionPrepare;                                  // 0x361(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5353[0x2];                                     // Fixing Size After Last Property  
	struct Valhalla_MissionWinDetails            R_MissionWinDetails;                               // 0x364(0x8)(Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_5354[0x4];                                     // Fixing Size After Last Property  
	struct CoreUObject_Vector                    R_MissionLocation;                                 // 0x370(0x18)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_TeamSlots>            R_MissionTakenSlots;                               // 0x388(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	int32                                        R_MissionTotalSlots;                               // 0x398(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_WarningTimer;                                    // 0x39C(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValMissionState* GetDefaultObj();

	void SetWarningTimer(int32 Value);
	void SetMissionWinner(int32 Value, int32 EliminatedTeamId);
	void SetMissionTotalSlots(int32 Value);
	void SetMissionTimer(int32 Value);
	void SetMissionTeam(int32 Value);
	void SetMissionTakenSlots(TArray<struct Valhalla_TeamSlots>& Slots);
	void SetMissionPrepare(bool Value);
	void SetMissionLocation(const struct CoreUObject_Vector& Value);
	void SetMissionIndex(int32 Value);
	void SetMissionId(class FName Value);
	void SetMissionFinale(bool Value);
	void OnRep_WarningTimer();
	void OnRep_MissionWinner();
	void OnRep_MissionTotalSlots();
	void OnRep_MissionTimer();
	void OnRep_MissionTeam();
	void OnRep_MissionTakenSlots();
	void OnRep_MissionPrepare();
	void OnRep_MissionLocation();
	void OnRep_MissionIndex();
	void OnRep_MissionId();
	void OnRep_MissionFinale();
	int32 GetWarningTimer();
	bool GetPending();
	struct Valhalla_MissionWinDetails GetMissionWinDetails();
	int32 GetMissionTotalSlots();
	int32 GetMissionTimer();
	int32 GetMissionTeam();
	void GetMissionTakenSlots(TArray<struct Valhalla_TeamSlots>* Slots);
	bool GetMissionPrepare();
	struct CoreUObject_Vector GetMissionLocation();
	int32 GetMissionIndex();
	class FName GetMissionId();
	bool GetMissionFinale();
};

// 0x40 (0x3E0 - 0x3A0)
// Class Valhalla.ValMissionState_CapturePoint
class AValMissionState_CapturePoint : public AValMissionState
{
public:
	FMulticastInlineDelegateProperty_            OnOffensiveTeam;                                   // 0x3A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnObjectiveState;                                  // 0x3B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCaptureProgress;                                 // 0x3C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                        R_OffensiveTeam;                                   // 0x3D0(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_CaptureProgress;                                 // 0x3D4(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EObjectiveState                   R_ObjectiveState;                                  // 0x3D8(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5355[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValMissionState_CapturePoint* GetDefaultObj();

	void OnRep_OffensiveTeam();
	void OnRep_ObjectiveState();
	void OnRep_CaptureProgress();
	int32 GetOffensiveTeam();
	enum class EObjectiveState GetObjectiveState();
	float GetCaptureProgress();
};

// 0x40 (0x3E0 - 0x3A0)
// Class Valhalla.ValMissionState_Harvest
class AValMissionState_Harvest : public AValMissionState
{
public:
	FMulticastInlineDelegateProperty_            OnTeamShardsChanged;                               // 0x3A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerShardsChanged;                             // 0x3B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_TeamScore>            R_TeamShards;                                      // 0x3C0(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_PlayerScore>          R_PlayerShards;                                    // 0x3D0(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValMissionState_Harvest* GetDefaultObj();

	void OnRep_TeamShards();
	void OnRep_PlayerShards();
	void GetTeamShards(int32 TeamNum, int32* Value);
	void GetPlayerShards(class APlayerState* PlayerState, int32* Value);
};

// 0x40 (0x3E0 - 0x3A0)
// Class Valhalla.ValMissionState_Meltdown
class AValMissionState_Meltdown : public AValMissionState
{
public:
	FMulticastInlineDelegateProperty_            OnCoreHealth;                                      // 0x3A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCoreHealthMax;                                   // 0x3B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnOffensiveTeam;                                   // 0x3C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                        R_CoreHealth;                                      // 0x3D0(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_CoreHealthMax;                                   // 0x3D4(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_OffensiveTeam;                                   // 0x3D8(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5357[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValMissionState_Meltdown* GetDefaultObj();

	void OnRep_OffensiveTeam();
	void OnRep_CoreHealthMax();
	void OnRep_CoreHealth();
	int32 GetOffensiveTeam();
	int32 GetCoreHealthMax();
	int32 GetCoreHealth();
};

// 0x68 (0x408 - 0x3A0)
// Class Valhalla.ValMissionState_NeutralPoint
class AValMissionState_NeutralPoint : public AValMissionState
{
public:
	FMulticastInlineDelegateProperty_            OnNeutralTeamChanged;                              // 0x3A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnNeutralScoreChanged;                             // 0x3B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnNeutralObjectiveChanged;                         // 0x3C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCaptureProgressChanged;                          // 0x3D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                        R_OwningTeam;                                      // 0x3E0(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_535A[0x4];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_TeamScore>            R_TeamScores;                                      // 0x3E8(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	enum class EObjectiveState                   R_ObjectiveState;                                  // 0x3F8(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_535B[0x3];                                     // Fixing Size After Last Property  
	struct Valhalla_TeamScore                    R_CaptureProgress;                                 // 0x3FC(0x8)(Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_535C[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValMissionState_NeutralPoint* GetDefaultObj();

	void OnRep_TeamScores();
	void OnRep_OwningTeam();
	void OnRep_ObjectiveState();
	void OnRep_CaptureProgress();
	void GetTeamScore(int32 TeamNum, float* Score);
	int32 GetOwningTeam();
	enum class EObjectiveState GetObjectiveState();
};

// 0x0 (0x3A0 - 0x3A0)
// Class Valhalla.ValMissionState_Pending
class AValMissionState_Pending : public AValMissionState
{
public:

	static class UClass* StaticClass();
	static class AValMissionState_Pending* GetDefaultObj();

};

// 0x88 (0x3F8 - 0x370)
// Class Valhalla.ValMission_CapturePoint
class AValMission_CapturePoint : public AValMission
{
public:
	float                                        CaptureTime;                                       // 0x370(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TeammateMultiplier;                                // 0x374(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5361[0x68];                                    // Fixing Size After Last Property  
	class AValMissionObjective_CapturePoint*     CachedObjective;                                   // 0x3E0(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AValCharacter>>  ObjectiveCharacters;                               // 0x3E8(0x10)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValMission_CapturePoint* GetDefaultObj();

	void OnObjectiveEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnObjectiveBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
};

// 0x28 (0x398 - 0x370)
// Class Valhalla.ValMission_Harvest
class AValMission_Harvest : public AValMission
{
public:
	int32                                        ShardsToWin;                                       // 0x370(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5364[0x4];                                     // Fixing Size After Last Property  
	TArray<class AValMissionObjective_Harvest_Hopper*> CachedHoppers;                                     // 0x378(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AValMissionObjective_Harvest_Meteor*> CachedMeteors;                                     // 0x388(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValMission_Harvest* GetDefaultObj();

	void OnMeteorBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnHopperBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
};

// 0x10 (0x380 - 0x370)
// Class Valhalla.ValMission_Meltdown
class AValMission_Meltdown : public AValMission
{
public:
	uint8                                        Pad_5369[0x8];                                     // Fixing Size After Last Property  
	class AValMissionObjective_Meltdown*         CachedObjective;                                   // 0x378(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValMission_Meltdown* GetDefaultObj();

	void OnCoreHealthMax(int32 OldValue, int32 NewValue);
	void OnCoreHealth(int32 OldValue, int32 NewValue);
};

// 0xB8 (0x428 - 0x370)
// Class Valhalla.ValMission_NeutralPoint
class AValMission_NeutralPoint : public AValMission
{
public:
	float                                        CaptureTime;                                       // 0x370(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        HoldingWinTime;                                    // 0x374(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TeammateMultiplier;                                // 0x378(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        AutoDropPodWarningTime;                            // 0x37C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_536C[0x80];                                    // Fixing Size After Last Property  
	class AValMissionObjective_CapturePoint*     CachedObjective;                                   // 0x400(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AValCharacter>>  ObjectiveCharacters;                               // 0x408(0x10)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	int32                                        RemainingWarningTime;                              // 0x418(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_536E[0x4];                                     // Fixing Size After Last Property  
	struct Engine_TimerHandle                    EndMissionTimer;                                   // 0x420(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValMission_NeutralPoint* GetDefaultObj();

	void OnObjectiveEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnObjectiveBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
};

// 0x0 (0x370 - 0x370)
// Class Valhalla.ValMission_Pending
class AValMission_Pending : public AValMission
{
public:

	static class UClass* StaticClass();
	static class AValMission_Pending* GetDefaultObj();

};

// 0x10 (0x2E0 - 0x2D0)
// Class Valhalla.ValNamedAreaVolume
class AValNamedAreaVolume : public AVolume
{
public:
	class FName                                  AreaName;                                          // 0x2D0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ESecurityLevel                    SecurityLevel;                                     // 0x2D8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5370[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValNamedAreaVolume* GetDefaultObj();

};

// 0x70 (0x308 - 0x298)
// Class Valhalla.ValNavLinkActor
class AValNavLinkActor : public AActor
{
public:
	class USceneComponent*                       DefaultRootComponent;                              // 0x298(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChildActorComponent*                  LeftNavLinkComponent;                              // 0x2A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChildActorComponent*                  RightNavLinkComponent;                             // 0x2A8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChildActorComponent*                  FrontNavLinkComponent;                             // 0x2B0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChildActorComponent*                  BackNavLinkComponent;                              // 0x2B8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ANavLinkProxy>             NavLinkClass;                                      // 0x2C0(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_Rotator                   NavLinkRotation;                                   // 0x2C8(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class AActor*                                InteractionActor;                                  // 0x2E0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USplineComponent*                      LeftNavLinkSpline;                                 // 0x2E8(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USplineComponent*                      RightNavLinkSpline;                                // 0x2F0(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USplineComponent*                      FrontNavLinkSpline;                                // 0x2F8(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USplineComponent*                      BackNavLinkSpline;                                 // 0x300(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValNavLinkActor* GetDefaultObj();

	void SetupNavLink();
	void SetInteractionActor(class AActor* InInteraction);
};

// 0x8 (0x1E8 - 0x1E0)
// Class Valhalla.ValNavLinkComponent
class UValNavLinkComponent : public UNavLinkCustomComponent
{
public:
	enum class ENavLinkAgentType                 SupportedAgentType;                                // 0x1E0(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5372[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValNavLinkComponent* GetDefaultObj();

};

// 0x80 (0x368 - 0x2E8)
// Class Valhalla.ValNavLinkProxy
class AValNavLinkProxy : public ANavLinkProxy
{
public:
	class UNavModifierComponent*                 NavModifierComponent;                              // 0x2E8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                InteractionActor;                                  // 0x2F0(0x8)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AValCharacter>          CurrentAgent;                                      // 0x2F8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EValLinkTravelType                Type;                                              // 0x300(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDoorOpen;                                         // 0x301(0x1)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5377[0x2];                                     // Fixing Size After Last Property  
	float                                        InterpSpeed;                                       // 0x304(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        EnemyLaunchVelocity;                               // 0x308(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bShowDebug;                                        // 0x30C(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bLinksSet;                                         // 0x30D(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_5378[0x2];                                     // Fixing Size After Last Property  
	struct CoreUObject_Vector                    StartPoint;                                        // 0x310(0x18)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct CoreUObject_Vector                    EndPoint;                                          // 0x328(0x18)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct CoreUObject_Vector                    MiddlePoint;                                       // 0x340(0x18)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        CapsuleHalfHeight;                                 // 0x358(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bGoalReached;                                      // 0x35C(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	enum class EValVaultingState                 VaultingState;                                     // 0x35D(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	enum class EValMovementDirection             MovementDirection;                                 // 0x35E(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_5379[0x9];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValNavLinkProxy* GetDefaultObj();

	void SetupLink(const struct CoreUObject_Vector& Left, const struct CoreUObject_Vector& Right, const struct CoreUObject_Vector& Location, const struct CoreUObject_Rotator& Orientation, enum class ENavLinkDirection Direction);
	void SetInteractionActor(class AActor* InInteraction);
	void ResetNavLink(bool bActive);
	void PerformSmartLinkTravel(class AActor* Agent, struct CoreUObject_Vector& Destination);
	void OpenDoor();
	void OnInteractionActorSet();
	void OnFallingTagChanged(const struct GameplayTags_GameplayTag& InTag, int32 NewCount);
	void OnCurrentAgentDied(float TimeToRespawn, class AValCharacter* Pawn);
	float GetDoorChannelTime();
	void CurrentAgentDied();
	bool AreLinksSet();
};

// 0x80 (0xB0 - 0x30)
// Class Valhalla.ValNotificationData
class UValNotificationData : public UPrimaryDataAsset
{
public:
	class FName                                  AssetId;                                           // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsEnabled;                                         // 0x38(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsEntry;                                           // 0x39(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsAlert;                                           // 0x3A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsHero;                                            // 0x3B(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsFriendly;                                        // 0x3C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_537A[0x3];                                     // Fixing Size After Last Property  
	int32                                        Duration;                                          // 0x40(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_537B[0x4];                                     // Fixing Size After Last Property  
	class FText                                  EntryDisplayText;                                  // 0x48(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                  AlertDisplayText;                                  // 0x60(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                  HeroDisplayText;                                   // 0x78(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UTexture2D*                            Icon;                                              // 0x90(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_LinearColor               Color;                                             // 0x98(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         AudioEvent;                                        // 0xA8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValNotificationData* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Valhalla.ValNotificationManager
class UValNotificationManager : public UValNotificationData
{
public:

	static class UClass* StaticClass();
	static class UValNotificationManager* GetDefaultObj();

	class UValNotificationManager* GetNotificationDataFromId(class FName& ID);
};

// 0x38 (0x5D0 - 0x598)
// Class Valhalla.ValNudgeComponent
class UValNudgeComponent : public UCapsuleComponent
{
public:
	TArray<TSubclassOf<class AActor>>            NudgeClassFilters;                                 // 0x598(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class FName>                          IgnoredNudgeTags;                                  // 0x5A8(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                        NudgeSpeed;                                        // 0x5B8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxNudgeDistance;                                  // 0x5BC(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class AActor>>         CachedNudgingActors;                               // 0x5C0(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UValNudgeComponent* GetDefaultObj();

	void GetNudgingActors(TArray<TWeakObjectPtr<class AActor>>* NudgingActors);
	struct CoreUObject_Vector GetNudgeVectorWithActors(TArray<TWeakObjectPtr<class AActor>>& NudgingActors);
	struct CoreUObject_Vector GetNudgeVector();
};

// 0x0 (0x298 - 0x298)
// Class Valhalla.ValObjectiveGrid
class AValObjectiveGrid : public AActor
{
public:

	static class UClass* StaticClass();
	static class AValObjectiveGrid* GetDefaultObj();

	void SetGridPlacement(const struct CoreUObject_Vector& Scale, const struct CoreUObject_Vector& Location);
	void EnableGrid(bool Value);
};

// 0x28 (0x2C0 - 0x298)
// Class Valhalla.ValObjectivePoint
class AValObjectivePoint : public AActor
{
public:
	int32                                        AssignedTeam;                                      // 0x298(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_Active;                                          // 0x29C(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5380[0x3];                                     // Fixing Size After Last Property  
	float                                        R_Progress;                                        // 0x2A0(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EObjectiveState                   R_State;                                           // 0x2A4(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5381[0x3];                                     // Fixing Size After Last Property  
	class USceneComponent*                       DragTransformComponent;                            // 0x2A8(0x8)(Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USmoothTransformComponent*             SmoothDragComponent;                               // 0x2B0(0x8)(Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValCharacterOverlayComponent*         OverlayComponent;                                  // 0x2B8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValObjectivePoint* GetDefaultObj();

	void UpdateState(enum class EObjectiveState State);
	void UpdateProgress(float Value);
	void UpdateActive(bool Value);
	void OnRep_State();
	void OnRep_Progress();
	void OnRep_Active();
	bool IsActive();
	int32 GetAssignedTeam();
};

// 0x60 (0x2F8 - 0x298)
// Class Valhalla.ValObjective_Epicenter
class AValObjective_Epicenter : public AActor
{
public:
	FMulticastInlineDelegateProperty_            OnEpicenterEntered;                                // 0x298(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         R_Active;                                          // 0x2A8(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5385[0x7];                                     // Fixing Size After Last Property  
	class USphereComponent*                      CollisionComp;                                     // 0x2B0(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                        AllCharacters;                                     // 0x2B8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class AActor*>                        CharactersInsideRadius;                            // 0x2C8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	float                                        CachedScaledRadiusSquared;                         // 0x2D8(0x4)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5386[0x4];                                     // Fixing Size After Last Property  
	struct CoreUObject_Vector                    CachedCenter;                                      // 0x2E0(0x18)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValObjective_Epicenter* GetDefaultObj();

	void UpdateOverlaps(bool bInitial);
	void UpdateActive(bool Value);
	void SetActive(bool Value);
	void OnRep_Active();
	void OnCharacterOutsideRadius(class AValCharacter* Character);
	void OnCharacterInsideRadius(class AValCharacter* Character);
	bool GetActive();
};

// 0x58 (0x2F0 - 0x298)
// Class Valhalla.ValObjective_Loot
class AValObjective_Loot : public AActor
{
public:
	FMulticastInlineDelegateProperty_            OnLootState;                                       // 0x298(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class AValLootCrate*>                 PendingLoot;                                       // 0x2A8(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	enum class ELootState                        R_State;                                           // 0x2B8(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5389[0x7];                                     // Fixing Size After Last Property  
	TArray<class AValLootCrate*>                 Loot;                                              // 0x2C0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class AValLootCrate>>     LootClassesToSpawn;                                // 0x2D0(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class USceneComponent*>               LootSpawnLocations;                                // 0x2E0(0x10)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValObjective_Loot* GetDefaultObj();

	void SpawnLoot();
	void OnRep_State();
	void OnLootPending();
	void OnLootLooted();
	void OnLootDeactivated();
	void OnLootActivated();
	void OnDropShipTriggered();
	void OnCrateOpened(class AValLootCrate* LootCrate);
	enum class ELootState GetState();
	void ClientOnDropShipTriggered();
};

// 0x80 (0x318 - 0x298)
// Class Valhalla.ValObjective_LootExtractionSite
class AValObjective_LootExtractionSite : public AActor
{
public:
	TSubclassOf<class AValLootDepositPod>        DepositPodClass;                                   // 0x298(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USceneComponent*>               PodSpawnLocations;                                 // 0x2A0(0x10)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AValLootDepositPod*>            DepositPods;                                       // 0x2B0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnOwnedPodStateChanged;                            // 0x2C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPodDataUpdated;                                  // 0x2D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnExtractionTimeChanged;                           // 0x2E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USceneComponent*                       SceneComponent;                                    // 0x2F0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                      ObjectiveArea;                                     // 0x2F8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_LootDepositPodData>   R_PodData;                                         // 0x300(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	float                                        R_ExtractionTime;                                  // 0x310(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_538D[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValObjective_LootExtractionSite* GetDefaultObj();

	bool TrySetSiteEnabled(bool Value);
	void SpawnPods();
	void SetPodLocations();
	void OnRep_PodData();
	void OnRep_ExtractionTime();
	void OnExtractingLegendary(bool Value);
	void OnDepositPodStateChanged(const struct Valhalla_LootDepositPodData& PodData);
	void MulticastNotifyPodStateChanged(const struct Valhalla_LootDepositPodData& PodData);
	void GetPodData(TArray<struct Valhalla_LootDepositPodData>* OutLootDepositPodData);
};

// 0x28 (0x2C0 - 0x298)
// Class Valhalla.ValObjective_Portal
class AValObjective_Portal : public AActor
{
public:
	FMulticastInlineDelegateProperty_            OnPortalActivated;                                 // 0x298(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         R_bDoorsClosing;                                   // 0x2A8(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5398[0x3];                                     // Fixing Size After Last Property  
	int32                                        PlayersAllowed;                                    // 0x2AC(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EFrontierPortalState              R_State;                                           // 0x2B0(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5399[0x7];                                     // Fixing Size After Last Property  
	class USceneComponent*                       SceneComp;                                         // 0x2B8(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValObjective_Portal* GetDefaultObj();

	void UpdateState(enum class EFrontierPortalState Value);
	void SetState(enum class EFrontierPortalState Value);
	void SetDoorsClosing(bool bDoorsClosing);
	void OnRep_StateChanged();
	void OnRep_DoorsClosing();
	void OnPortalEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnPortalBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct Engine_HitResult& SweepResult);
	void OnOverlappingActorDied(float TimeToRespawn, class AValCharacter* Char);
	enum class EFrontierPortalState GetState();
	bool GetDoorsClosing();
	class UShapeComponent* GetCollisionComp();
};

// 0x18 (0x3E8 - 0x3D0)
// Class Valhalla.ValObjective_Titan
class AValObjective_Titan : public AValAttributeActor
{
public:
	int32                                        AssignedTeam;                                      // 0x3D0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_539A[0x4];                                     // Fixing Size After Last Property  
	class USceneComponent*                       SceneComponent;                                    // 0x3D8(0x8)(Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValCharacterOverlayComponent*         OverlayComponent;                                  // 0x3E0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValObjective_Titan* GetDefaultObj();

	int32 GetAssignedTeam();
};

// 0x0 (0xA0 - 0xA0)
// Class Valhalla.ValOrderManager
class UValOrderManager : public URHOrderManager
{
public:

	static class UClass* StaticClass();
	static class UValOrderManager* GetDefaultObj();

};

// 0x68 (0x690 - 0x628)
// Class Valhalla.ValOutlineComponent
class UValOutlineComponent : public UStaticMeshComponent
{
public:
	bool                                         bOutlineEnabled;                                   // 0x628(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_539E[0x7];                                     // Fixing Size After Last Property  
	struct CoreUObject_Vector                    ParentOrigin;                                      // 0x630(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_Vector                    ParentExtents;                                     // 0x648(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*              Mid;                                               // 0x660(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                    TemplateMaterial;                                  // 0x668(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  ColorParameter;                                    // 0x670(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  ThicknessParameter;                                // 0x678(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  StencilParameter;                                  // 0x680(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        BoundsExpand;                                      // 0x688(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCachedUseFixedSkelBounds;                         // 0x68C(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        StencilIndex;                                      // 0x68D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_53A0[0x2];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValOutlineComponent* GetDefaultObj();

	void SetOutlineEnabled(bool bEnabled);
	bool IsOutlineEnabled();
	uint8 GetStencilIndex();
};

// 0xA0 (0x338 - 0x298)
// Class Valhalla.ValPhaseShiftPortal
class AValPhaseShiftPortal : public AActor
{
public:
	uint8                                        Pad_53A7[0x8];                                     // Fixing Size After Last Property  
	TMap<TWeakObjectPtr<class AValCharacter>, float> CachedTimerMap;                                    // 0x2A0(0x50)(Protected, NativeAccessSpecifierProtected)
	class USphereComponent*                      InteractCollisionComp;                             // 0x2F0(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  InteractText;                                      // 0x2F8(0x18)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                        ReactivateTime;                                    // 0x310(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DecayTime;                                         // 0x314(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanEnemyUse;                                      // 0x318(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOneWay;                                           // 0x319(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         R_bEntrance;                                       // 0x31A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         R_bReady;                                          // 0x31B(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_53A8[0x1C];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValPhaseShiftPortal* GetDefaultObj();

	void SetIsReady(bool bIsReady);
	void SetIsOneWay(bool bIsOneWay);
	void SetIsEntrance(bool bIsEntrance);
	void ServerOnInteract(class AValCharacter* Initiator);
	void PredictInteract(class AValCharacter* Initiator);
	void Interact(class AValCharacter* Initiator);
	float GetRemainTime(class AValCharacter* Initiator);
	class FText GetInteractText();
	void ClientOnInteract(class AValCharacter* Initiator);
	bool CheckCanInteract(class AValCharacter* Initiator);
	bool CanInteract(class AValCharacter* Initiator);
};

// 0x18 (0x2F8 - 0x2E0)
// Class Valhalla.ValPhysicsVolume
class AValPhysicsVolume : public APhysicsVolume
{
public:
	float                                        GroundFriction;                                    // 0x2E0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BrakingDecelerationWalking;                        // 0x2E4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GroundMovementAccelerationMultiplier;              // 0x2E8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SkiFriction;                                       // 0x2EC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SkiBrakingDeceleration;                            // 0x2F0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_53A9[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValPhysicsVolume* GetDefaultObj();

};

// 0x8 (0x3D8 - 0x3D0)
// Class Valhalla.ValPickup_Chest
class AValPickup_Chest : public AValPickup
{
public:
	int32                                        CurrencyValue;                                     // 0x3D0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        CustomValue;                                       // 0x3D4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValPickup_Chest* GetDefaultObj();

	void SetCurrencyValue(int32 Value);
};

// 0x50 (0x420 - 0x3D0)
// Class Valhalla.ValPickup_Item
class AValPickup_Item : public AValPickup
{
public:
	class FText                                  SwapText;                                          // 0x3D0(0x18)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                         bUseRarityOverride;                                // 0x3E8(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ERarity                           RarityOverride;                                    // 0x3E9(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_53AD[0x2];                                     // Fixing Size After Last Property  
	int32                                        RevealTimerLength;                                 // 0x3EC(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_53AE[0x10];                                    // Fixing Size After Last Property  
	struct Valhalla_PendingItem                  R_GeneratedItem;                                   // 0x400(0x20)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValPickup_Item* GetDefaultObj();

	void SetLootRarity(enum class ERarity Rarity);
	void SetLootItem(const struct Valhalla_PendingItem& LootItem);
	void OnRep_GeneratedItem();
	void OnLootUpdated();
	enum class ERarity GetLootRarity();
	void AutoDeposit(class AValCharacter* Looter);
};

// 0x50 (0x420 - 0x3D0)
// Class Valhalla.ValPickup_Upgrade
class AValPickup_Upgrade : public AValPickup
{
public:
	class UValItemOverlayComponent*              OverlayComponent;                                  // 0x3D0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ERarity                           PickupRarity;                                      // 0x3D8(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_53B5[0x7];                                     // Fixing Size After Last Property  
	class FText                                  ItemDescription;                                   // 0x3E0(0x18)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FName                                  R_PickupItemName;                                  // 0x3F8(0x8)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  DefaultItemName;                                   // 0x400(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUseDefaultName;                                   // 0x408(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bUpgradeActive;                                  // 0x409(0x1)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_53B6[0x6];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnItemChanged;                                     // 0x410(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValPickup_Upgrade* GetDefaultObj();

	void UpdateItemVFX(class FName ItemUpgrade);
	bool TryToEquip(class AValCharacter* Initiator);
	void SetPickupItem(class FName ItemName);
	void OnRep_PickupItemName();
	enum class ERarity GetPickupRarity();
	class FName GetPickupItemName();
	class UValItemOverlayComponent* GetOverlayComponent();
	class FText GetItemDescription();
	bool CanPlayerInteract(class AValCharacter* Initiator);
};

// 0x160 (0x200 - 0xA0)
// Class Valhalla.ValPingComponent
class UValPingComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnPingLimited;                                     // 0xA0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class AValPing>>       LocalPings;                                        // 0xB0(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                        EnemyCheckRadius;                                  // 0xC0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ETraceTypeQuery                   EnemyCheckTraceChannel;                            // 0xC4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_53C0[0x3];                                     // Fixing Size After Last Property  
	float                                        EnemyCheckRange;                                   // 0xC8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        EnemyCheckLenience;                                // 0xCC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        EnemyDoublePingPreventionDistance;                 // 0xD0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        BestPingableCheckAngle;                            // 0xD4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxPreviewRange;                                   // 0xD8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShouldDisplayPingPreviewOverride;                 // 0xDC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_53C1[0x3];                                     // Fixing Size After Last Property  
	TWeakObjectPtr<class AValCharacter>          CachedPingableEnemy;                               // 0xE0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct Engine_HitResult>              CachedHitResults;                                  // 0xE8(0x10)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class AValPing>                  PingClassToSpawn;                                  // 0xF8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValCharacter*                         Owner;                                             // 0x100(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValPlayerState*                       OwnerState;                                        // 0x108(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValPlayerController*                  OwnerController;                                   // 0x110(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_53C2[0x8];                                     // Fixing Size After Last Property  
	TWeakObjectPtr<class AValPing>               CachedLocationPing;                                // 0x120(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValPing>               CachedFocusedPing;                                 // 0x128(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AValPing>>       CachedConfirmedPings;                              // 0x130(0x10)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMap<TWeakObjectPtr<class AActor>, TWeakObjectPtr<class AValPing>> CachedActorPings;                                  // 0x140(0x50)(Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_ValCachedEnemyPing>   R_CachedEnemyPings;                                // 0x190(0x10)(Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                 BestPingable;                                      // 0x1A0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_53C4[0x8];                                     // Fixing Size After Last Property  
	class AValPing*                              BestPingablePreviewPing;                           // 0x1B0(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_Vector                    ContextLocationOffset;                             // 0x1B8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        PingCountToRateLimit;                              // 0x1D0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeOverToRateLimit;                               // 0x1D4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RateLimitTimout;                                   // 0x1D8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_53C5[0xC];                                     // Fixing Size After Last Property  
	bool                                         R_bIsRateLimited;                                  // 0x1E8(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_53C6[0x17];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValPingComponent* GetDefaultObj();

	void TryToPing();
	void ServerAddTypedPingWithLocation(enum class EValPingType PingType, struct Engine_Vector_NetQuantize& Location);
	void ServerAddObjectivePing(const struct Valhalla_ValCachedObjectivePing& PingData);
	void ServerAddLocationPing(struct Engine_Vector_NetQuantize& Location);
	void ServerAddEnemyPing(class AActor* EnemyActor);
	void ServerAddContextPingWithLocation(class AActor* Object, const struct Engine_Vector_NetQuantize& TargetLocation);
	void ServerAddContextPing(class AActor* Object);
	void PingLocationFromMap(struct CoreUObject_Vector& Location, bool bIsObjective, class AActor* ObjectiveActor, enum class EFrontierDirectionType ObjectiveType);
	void OnRep_RateLimited(bool OldValue);
	void OnEnemyPingDestroyed(class AActor* DestroyedPing);
	bool IsRateLimited();
	bool GetImmediatePingTarget(struct CoreUObject_Vector* OutPingLocation);
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValPlatformBlueprintFunctionLibrary
class UValPlatformBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UValPlatformBlueprintFunctionLibrary* GetDefaultObj();

	class APawn* SpawnBotFromDataWithTeamId(class UObject* WorldContextObject, class UValBotData* BotData, int32 TeamId, bool bCreateTeamIfMissing, bool bStandInPlayer, struct CoreUObject_Vector& Location, struct CoreUObject_Rotator& Rotation, bool bNoCollisionFail, class AActor* Owner, class UBehaviorTree* BTOverride);
	class APawn* SpawnBotFromData(class UObject* WorldContextObject, class UValBotData* BotData, class FName& TeamDefinition, bool bCreateTeamIfMissing, bool bStandInPlayer, struct CoreUObject_Vector& Location, struct CoreUObject_Rotator& Rotation, bool bNoCollisionFail, class AActor* Owner, class UBehaviorTree* BTOverride);
	class APawn* SpawnAIWithTeamId(class UObject* WorldContextObject, TSubclassOf<class APawn> PawnClass, class UBehaviorTree* BehaviorTree, int32 TeamId, bool bCreateTeamIfMissing, bool bStandInPlayer, struct CoreUObject_Vector& Location, struct CoreUObject_Rotator& Rotation, bool bNoCollisionFail, class AActor* Owner);
	class APawn* SpawnAIWithTeamDefinition(class UObject* WorldContextObject, TSubclassOf<class APawn> PawnClass, class UBehaviorTree* BehaviorTree, class FName& TeamDefinition, bool bCreateTeamIfMissing, bool bStandInPlayer, struct CoreUObject_Vector& Location, struct CoreUObject_Rotator& Rotation, bool bNoCollisionFail, class AActor* Owner);
	bool IsPlatform(bool IsWindows, bool IsLinux, bool IsMac, bool IsIOS, bool IsAndroid, bool IsXboxOne, bool IsXboxSeriesX, bool IsPS4, bool IsPS5, bool IsSwitch);
	bool IsOnlineEnvironment(class UObject* WorldContextObject, bool IsDevelopment, bool IsCertification, bool IsProduction);
	bool IsAntiCheatDisabled();
	class FString GetGameVersion();
	void FrameDelay(class UObject* WorldContextObject, int32 NumFramesToDelay, const struct Engine_LatentActionInfo& LatentInfo);
	void DestroyAIWithTeam(class AAIController* Controller);
};

// 0xA0 (0xC8 - 0x28)
// Class Valhalla.PlayerAttributeConfig
class UPlayerAttributeConfig : public UObject
{
public:
	TMap<enum class EPlayerAttributeType, struct Valhalla_PlayerAttributeConfigData> AttributeConfigDataMap;                            // 0x28(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<struct GameplayTags_GameplayTag, struct Valhalla_PlayerAttributeGroup> ClassAttributeConfig;                              // 0x78(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UPlayerAttributeConfig* GetDefaultObj();

	bool GetClassAttributeConfig(struct GameplayTags_GameplayTag& CharacterClass, struct Valhalla_PlayerAttributeGroup* AttributeGroup);
	bool GetAttributeEffectClass(enum class EPlayerAttributeType AttributeType, TSubclassOf<class UGameplayEffect>* EffectClass);
	bool GetAttributeConfigData(enum class EPlayerAttributeType AttributeType, struct Valhalla_PlayerAttributeConfigData* AttributeConfigData);
};

// 0x50 (0x2410 - 0x23C0)
// Class Valhalla.ValPlayerCameraManager
class AValPlayerCameraManager : public APlayerCameraManager
{
public:
	float                                        ReticleOffsetTraceDist;                            // 0x23C0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_53E3[0x4];                                     // Fixing Size After Last Property  
	struct CoreUObject_Vector2D                  ReticleOffset;                                     // 0x23C8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_Vector                    AccumulatedCameraOnlyShakeLocation;                // 0x23D8(0x18)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_Rotator                   AccumulatedCameraOnlyShakeRotation;                // 0x23F0(0x18)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UValCameraModifier_CameraOnlyCameraShake* CachedCameraOnlyCameraShakeMod;                    // 0x2408(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValPlayerCameraManager* GetDefaultObj();

	void RemoveAllModifiers();
	void GetCameraAimViewPoint(struct CoreUObject_Vector* OutCamLoc, struct CoreUObject_Rotator* OutCamRot);
};

// 0xF0 (0xAE8 - 0x9F8)
// Class Valhalla.ValPlayerControllerBase
class AValPlayerControllerBase : public ARHPlayerController
{
public:
	uint8                                        Pad_53E9[0x8];                                     // Fixing Size After Last Property  
	struct Engine_TimerHandle                    GuaranteedKickHandle;                              // 0xA00(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_53EA[0x18];                                    // Fixing Size After Last Property  
	TArray<FDelegateProperty_>                   DelayedTeamRegistrationDelegates;                  // 0xA20(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnValPlayerInfoReady;                              // 0xA30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnValInventoryItemsUpdated;                        // 0xA40(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnValSettingsSubsystemReady;                       // 0xA50(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnValPlayerInventoryReady;                         // 0xA60(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UValPlayerInfo>         WeakValPlayerInfo;                                 // 0xA70(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UValPlayerInventory>    WeakValPlayerInventory;                            // 0xA78(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UValSettingsSubsystem>  WeakValSettingsSubsystem;                          // 0xA80(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<int32, struct Valhalla_VPCB_InventoryCountUpdatedEvents> InventoryCountUpdatedEvents;                       // 0xA88(0x50)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class URH_JoinedSession*                     JoinedSession;                                     // 0xAD8(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         LeaveSessionOnDestroy;                             // 0xAE0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_53EC[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValPlayerControllerBase* GetDefaultObj();

	void ServerValidateIdToken(const class FString& ProductUserId, const class FString& JsonWebToken);
	void OnTeamChanged(int32 OldTeamId, int32 NewTeamId);
	void OnInventoryCacheUpdated(TArray<int32>& ItemIds);
	class UValSettingsSubsystem* GetValSettingsSubsystem();
	class UValPlayerInventory* GetValPlayerInventory();
	class UValPlayerInfo* GetValPlayerInfo();
	int32 GetInventoryCount(int32& ItemId);
	void ClientRequestIdToken();
	void ClientNotifyOpponentDisconnected();
	void BindInventoryCountUpdated(int32& ItemId, FDelegateProperty_& Event);
	void AntiCheatServerMessageToClient(TArray<uint8>& Data);
	void AntiCheatClientMessageToServer(TArray<uint8>& Data);
};

// 0xA38 (0x1520 - 0xAE8)
// Class Valhalla.ValPlayerController
class AValPlayerController : public AValPlayerControllerBase
{
public:
	uint8                                        Pad_5452[0x10];                                    // Fixing Size After Last Property  
	TSoftObjectPtr<class UValControllerInputConfigData> ControllerInputConfig;                             // 0xAF8(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPawnChanged;                                     // 0xB20(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharPlayer;                                      // 0xB30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnNotifyKill;                                      // 0xB40(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnNotifyDeath;                                     // 0xB50(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnNotifyAward;                                     // 0xB60(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPinpointAdded;                                   // 0xB70(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPinpointRemoved;                                 // 0xB80(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPinpointsUpdated;                                // 0xB90(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerStateReady;                                // 0xBA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSpectatingChanged;                               // 0xBB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnViewTargetChanged;                               // 0xBC0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLootFinderUpdated;                               // 0xBD0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnShop;                                            // 0xBE0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnShowScoreboard;                                  // 0xBF0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHideScoreboard;                                  // 0xC00(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnShowMap;                                         // 0xC10(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHideMap;                                         // 0xC20(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHideDeathcrate;                                  // 0xC30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBoostMenu;                                       // 0xC40(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBackpack;                                        // 0xC50(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCloseBackpack;                                   // 0xC60(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSettingsMenu;                                    // 0xC70(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnShowFabricator;                                  // 0xC80(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHideFabricator;                                  // 0xC90(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnOpenBackpack;                                    // 0xCA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnShowTeamCount;                                   // 0xCB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTeleportAlert;                                   // 0xCC0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMissionReport;                                   // 0xCD0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPendingItem;                                     // 0xCE0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCurrencyInventoryUpdated;                        // 0xCF0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnContractComplete;                                // 0xD00(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnContractTaskComplete;                            // 0xD10(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnContractTaskProgress;                            // 0xD20(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTeammateEliminated;                              // 0xD30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnUIPackAvailableStatusChanged;                    // 0xD40(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnInterruptedDepositPod;                           // 0xD50(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnContractInventoryChanged;                        // 0xD60(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnNotifyBlockedForceFieldEntered;                  // 0xD70(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnNotifyBlockedForceFieldExited;                   // 0xD80(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnNotifyInsufficientBackpackSpace;                 // 0xD90(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnNotifyTeamFlagNeedsReturning;                    // 0xDA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDogTagFoundContract;                             // 0xDB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnObjectiveTerminalUsed;                           // 0xDC0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMissionProgress;                                 // 0xDD0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnInteractableMissionLocationsUpdated;             // 0xDE0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSecurityLevelHealthUpdated;                      // 0xDF0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBanStatusUpdated;                                // 0xE00(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnVIPStatusChanged;                                // 0xE10(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraModifier>           CameraLookAtTargetCameraModifierClass;             // 0xE20(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraModifier*                       CameraLookAtTargetCameraModifier;                  // 0xE28(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                 CameraLookAtTargetActor;                           // 0xE30(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnZoomLevelChanged;                                // 0xE38(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_5454[0x4];                                     // Fixing Size After Last Property  
	float                                        TravelToEndOfMatchFailsafeDuration;                // 0xE4C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    TravelFailsafeTimerHandle;                         // 0xE50(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5455[0x20];                                    // Fixing Size After Last Property  
	TSubclassOf<class UValCheatComponent>        M_CheatComponentClass;                             // 0xE78(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValCheatComponent*                    R_CheatComponent;                                  // 0xE80(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValCheatData*                         CheatData;                                         // 0xE88(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AActor>>         PinpointTargets;                                   // 0xE90(0x10)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_Pinpoint>             Pinpoints;                                         // 0xEA0(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct CoreUObject_Box2D>             PinpointAreas;                                     // 0xEB0(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    EnsureValidViewTargetTimer;                        // 0xEC0(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    RespawnPlayerTimer;                                // 0xEC8(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    SpectateTimer;                                     // 0xED0(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_CurrencyData>         R_CurrencyInventory;                               // 0xED8(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	bool                                         bShowTrainingIcons;                                // 0xEE8(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5457[0x7];                                     // Fixing Size After Last Property  
	struct CoreUObject_Vector                    TrainingIconLocation;                              // 0xEF0(0x18)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APawn*                                 CachedPawn;                                        // 0xF08(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_5458[0x10];                                    // Fixing Size After Last Property  
	TArray<TWeakObjectPtr<class AValProjectile>> PredictedProjectiles;                              // 0xF20(0x10)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                        Pad_5459[0x50];                                    // Fixing Size After Last Property  
	float                                        R_PredictionLeeway;                                // 0xF80(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_545A[0x4];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnBindingReady;                                    // 0xF88(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<enum class EBindingType>              ReadyBindings;                                     // 0xF98(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                         LoadingAwaitsPawn;                                 // 0xFA8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bReceivedInitialPossession;                        // 0xFA9(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         LoadingAwaitsPlayerState;                          // 0xFAA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_545C[0x5];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnShowAIOnMinimap;                                 // 0xFB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        SmoothedDeltaSeconds;                              // 0xFC0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TargetSmoothedDeltaSecondsMax;                     // 0xFC4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SmoothedDeltaSecondsTolerance;                     // 0xFC8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SmoothedDeltaSecondsRate;                          // 0xFCC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SmoothedDeltaCheckDelay;                           // 0xFD0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_545E[0x4];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnForceUpdateLights;                               // 0xFD8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class AValDamageIndicatorActor>  DamageIndicatorClass;                              // 0xFE8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AValDamageIndicatorActor*>      DamageIndicators;                                  // 0xFF0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class AValGrenadeIndicatorActor> GrenadeIndicatorClass;                             // 0x1000(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AValGrenadeIndicatorActor*>     GrenadeIndicators;                                 // 0x1008(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnExperienceManager;                               // 0x1018(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHideHUDCheat;                                    // 0x1028(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bHideHUDCheat;                                     // 0x1038(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5460[0x7];                                     // Fixing Size After Last Property  
	class AValExperienceManager*                 R_ExperienceManager;                               // 0x1040(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5461[0x190];                                   // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnAreaMissionCompleted;                            // 0x11D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         R_bUsedEnemyPortal;                                // 0x11E8(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5462[0x7];                                     // Fixing Size After Last Property  
	class UValContractManager*                   R_ContractManager;                                 // 0x11F0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5463[0x8];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnContractShopRefreshed;                           // 0x1200(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UValContractShop>          ContractShopClass;                                 // 0x1210(0x8)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValContractShop*                      R_ContractShop;                                    // 0x1218(0x8)(Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnMinimapLineTargetChange;                         // 0x1220(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_5464[0x8];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnCTAShowText;                                     // 0x1238(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCTAShowTimer;                                    // 0x1248(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnShowAbilityFailReason;                           // 0x1258(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AValRespawnPoint*                      ClosestRespawnPoint;                               // 0x1268(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AValObjective_LootExtractionSite*      ClosestNeutralExtractionPoint;                     // 0x1270(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AValObjective_LootExtractionSite*      ClosestEnemyExtractionPoint;                       // 0x1278(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AValObjective_LootExtractionSite*      ClosestFriendlyExtractionPoint;                    // 0x1280(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AValObjective_Portal*                  ClosestEvacPoint;                                  // 0x1288(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5466[0x8];                                     // Fixing Size After Last Property  
	TSoftClassPtr<class AHUD>                    HUDClass;                                          // 0x1298(0x28)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class AHUD>                    RHHUDOverrideClass;                                // 0x12C0(0x28)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValSpatialAudioManagerComponent*      SpatialAudioManager;                               // 0x12E8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5467[0x18];                                    // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnInventoryManagerReady;                           // 0x1308(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AValInventoryManager*                  R_InventoryManager;                                // 0x1318(0x8)(Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         InitialInventoryRequested;                         // 0x1320(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         InitialInventoryRetrieved;                         // 0x1321(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5468[0xE];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_InventorySlot>        CachedInteractableSlots;                           // 0x1330(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnViewInteractableInventory;                       // 0x1340(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnUpdateInteractableInventory;                     // 0x1350(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class AActor*                                InteractableActor;                                 // 0x1360(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5469[0x18];                                    // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnShopManagerReady;                                // 0x1380(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AValShopManager*                       R_ShopManager;                                     // 0x1390(0x8)(Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnVendorManagerReady;                              // 0x1398(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AValVendorManager*                     R_VendorManager;                                   // 0x13A8(0x8)(Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValActivityPlayer*                    R_ActivityPlayer;                                  // 0x13B0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTagContainer     R_ActiveMissionTags;                               // 0x13B8(0x20)(BlueprintVisible, BlueprintReadOnly, Net, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_TrackedMission>       R_TrackedMissions;                                 // 0x13D8(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_MissionLocations>     R_InteractableMissionLocations;                    // 0x13E8(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnActivityPlayerReady;                             // 0x13F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_546A[0x10];                                    // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnActivityRewardsGranted;                          // 0x1418(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActivityTimer;                                   // 0x1428(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMissionSequenceProgressed;                       // 0x1438(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAccoladeProgress;                                // 0x1448(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMissionOptionsGenerated;                         // 0x1458(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMissionOptionsUpdated;                           // 0x1468(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMissionVoted;                                    // 0x1478(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMissionSelected;                                 // 0x1488(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_MissionSequence>      R_GeneratedMissions;                               // 0x1498(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	struct Valhalla_MissionSequence              R_SelectedMission;                                 // 0x14A8(0x48)(Net, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<enum class EGameStatType>             DebugStatDisplayList;                              // 0x14F0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	bool                                         R_IsPlayerVIP;                                     // 0x1500(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_546B[0x3];                                     // Fixing Size After Last Property  
	float                                        PitchDeltaRotationLimit;                           // 0x1504(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        YawDeltaRotationLimit;                             // 0x1508(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         LimitViewRotationDuringMelee;                      // 0x150C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_546C[0x3];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnQueuedLoadoutStatusChange;                       // 0x1510(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValPlayerController* GetDefaultObj();

	void UpdateViewMods(class AValCharacter* OldChar, class AValCharacter* NewChar);
	void UpdatePinpoints(float DeltaSeconds);
	void UpdateMinimapLineTarget();
	void UpdateClosestRespawnPoint();
	void UpdateClosestNeutralExtractionPoint();
	void UpdateClosestFriendlyExtractionPoint();
	void UpdateClosestEvacPoint();
	void UpdateClosestEnemyExtractionPoint();
	void TravelToEndOfMatch(bool bWipeInventory);
	void ToggleZoomLevel();
	void ToggleVoiceChat();
	void ToggleShop();
	void ToggleSettingsScreen();
	void ToggleBoostMenu();
	void ToggleBackpack();
	void StopCameraLookAtTarget();
	void StartSpectating(bool bIsNoClip);
	void StartCameraLookAtTarget(class AActor* TargetActor);
	void SpectatePlayerDeferred(float Time);
	void Spectate();
	void SpawnGrenadeIndicator(class AActor* ActorToTrack);
	void SpawnDamageIndicator(class AActor* ActorToTrack);
	void ShowScoreboard();
	void ShowMap();
	void ShowFabricator(class AValVendingMachine* Fabricator);
	void SetUsedEnemyPortal();
	void SetTutorialCompleted(bool bCompletedTutorial);
	void SetPlayerMutedLocal(const struct CoreUObject_Guid& PlayerUuid, bool bSetMuted);
	void SetPinpointAreasFromGeometry(TArray<struct SlateCore_Geometry>& Areas);
	void SetPinpointAreas(TArray<struct CoreUObject_Box2D>& Areas);
	void SetCachedPawn(class APawn* NewValue);
	void SetAllNonTeamMembersMuted();
	void ServerVoteMission(int32 MissionIndex);
	void ServerUpdateSafeVoiceConsentStatus(bool bConfirmConsent);
	void ServerUpdatePartyFillChoice(bool bFillParty, bool bIsPartyLeader);
	void ServerTravelToEndOfMatch(bool bWipeInventory);
	void ServerSpectatePrevTeammate();
	void ServerSpectateNextTeammate();
	void ServerSpectateNext(int32 Direction);
	void ServerSetDeployablePreview(bool Value);
	void ServerSendHideNameplateInMatchLobby(bool bHideNameplateInMatchLobby);
	void ServerRequestStartSpectating();
	void ServerRequestMatchVivoxVoiceToken(bool bIsTeamToken);
	void ServerRequestChangeQueuedLoadout(struct GameplayTags_GameplayTag& RequestedClass);
	void ServerReportPlayersToVivoxSafeVoice(const class FString& ReportType, const class FString& ReportReason, bool bIsTeamReport, TArray<struct CoreUObject_Guid>& PlayerUuidsToReport);
	void ServerProcessPredictedHits(int32 PredictionID, TArray<struct Valhalla_LaggedProjectileHit>& PredictedHits);
	void ServerLeaveMatch();
	void ServerGetSafeVoiceConsentStatus();
	void SaveMatchSummaryData();
	void RespawnPlayerDeferred(float Time, bool bFindRespawnPoint);
	void ResetCharacter();
	void RequestRespawn(bool bFindRespawnPoint);
	void RequestJump();
	void RequestChangeQueuedLoadout(struct GameplayTags_GameplayTag& RequestedClass);
	void ReportPlayersFromPositionalChatToSafeVoice();
	void RemovePinpoint(class AActor* PinpointTarget);
	void RemoveAllPinpoints();
	void ReinitializeActivityInstance(class UValActivityAsset* Asset, bool bUnlocked, struct RallyHereIntegration_RH_ItemInventory& ActivityItem);
	void ReaddAllPinpoints();
	void PushToTalkReleased();
	void PushToTalkPressed();
	void PushPreventFlushPressedKeys();
	void PopPreventFlushPressedKeys(bool bPopAll);
	void OnWindowFocusChanged(bool bIsFocused);
	void OnViewTargetDealtDamage(const struct Valhalla_DamageData& Data, class AActor* Target);
	void OnTravelFailsafeTimer();
	void OnSpectateStart();
	void OnSpectateEnd();
	void OnSpectatedPlayerExtracted();
	void OnSpectatedPlayerDied(float TimeToRespawn, class AValCharacter* Char);
	void OnShopRerolled(TArray<struct Valhalla_ContractData>& ShopContracts);
	void OnShopInitialized(TArray<struct Valhalla_ContractData>& ShopContracts, const struct CoreUObject_DateTime& ShopRerollTime);
	void OnRep_VendorManager();
	void OnRep_ShopManager();
	void OnRep_SelectedMission();
	void OnRep_IsPlayerVIP();
	void OnRep_InventoryManager();
	void OnRep_InteractableMissionLocations();
	void OnRep_GeneratedMissions();
	void OnRep_ExperienceManager();
	void OnRep_CurrencyInventory();
	void OnRep_ActivityPlayer();
	void OnPlayerFinalized(class APlayerState* FinalizedPlayer, bool bPlayerFinalized);
	void OnInteractableInventoryLoaded();
	void NotifyPredictedFireRejected(TSubclassOf<class UGameplayAbility> RejectedWeapon);
	void NotifyPlayerExitedBlockedForceField();
	void NotifyPlayerEnteredBlockedForceField(enum class ESecurityLevel SecurityLevel);
	void NoClipSpectate(bool bEnable);
	void ModifyInShopTagOnPlayer(bool ShouldGiveTag);
	void LeaveMatch();
	TArray<class AActor*> K2_GetPinpointTargets();
	bool IsCheatSpectatingPlayerBots();
	bool IsCheatSpectatingHunterBots();
	bool IsCheatSpectating();
	bool IsBindingReady(enum class EBindingType Type);
	void InvalidatePredictedProjectile(class AValProjectile* Projectile);
	void InvalidateAllPredictedProjectiles();
	void InterruptDeferredSpectate();
	void InterruptDeferredRespawn();
	void HideScoreboard();
	void HideMap();
	void HideFabricator();
	void HideDeathcrate();
	bool HasVIPStatus();
	int32 GetVIPTimeRemaining();
	class AValVendorManager* GetVendorManager();
	class AValCharacter* GetValCharacter();
	bool GetUsedEnemyPortal();
	void GetUnassignedShopContracts(TArray<struct Valhalla_PlayerContract>* PlayerContracts, TArray<struct Valhalla_ContractShop>* UnassignedShopContracts);
	class AValTeamState* GetTeamState();
	class AValShopManager* GetShopManager();
	bool GetSelectedMission(int32 ActivityId, struct Valhalla_MissionSequence* OutMission);
	void GetReadyBindings(TArray<enum class EBindingType>* Types);
	float GetProjectileSleepTime();
	float GetPredictionTime();
	float GetPredictionLeeway();
	int32 GetPlayerMissionProgress(class AValInteractableMission* InteractableMission);
	void GetPlayerCurrencies(TArray<struct Valhalla_CurrencyData>* PlayerCurrency);
	class UValActivityPlayerInstance* GetPlayerActivityById(int64 ActivityId);
	void GetPlayerActivities(TArray<class UValActivityPlayerInstance*>* OutActivities, bool bIgnoreOwnership);
	TArray<struct Valhalla_Pinpoint> GetPinpoints();
	bool GetIsPlayerMuted(const struct CoreUObject_Guid& PlayerUuid, bool* bIsPlayerFound);
	class AValInventoryManager* GetInventoryManager();
	void GetInteractableMissionLocations(TArray<struct Valhalla_MissionLocations>* OutLocations);
	void GetGeneratedMissions(TArray<struct Valhalla_MissionSequence>* OutMissions);
	class AValExperienceManager* GetExperienceManager();
	bool GetDeployablePreviewSynced();
	bool GetDeployablePreview();
	bool GetCrouchMode();
	class UValContractShop* GetContractShop();
	class UValContractManager* GetContractManager();
	class APawn* GetCachedPawn();
	class AValActivityPlayer* GetActivityPlayer();
	void GetActiveMissionTags(struct GameplayTags_GameplayTagContainer* GameplayTags);
	void GameStateSet(class AGameStateBase* GameState);
	void ForceUpdateLights();
	void EndSpectating();
	void DestroyGrenadeIndicator(class AActor* TrackedActor);
	void DebugToggleShowPlayerStat(enum class EGameStatType Stat, bool bOn);
	void DebugShowPlayerStats();
	void DebugHidePlayerStats();
	void CTAShowTimer(float Duration);
	void CTAShowText(class FText& Text);
	void ClientViewInteractableInventory(TArray<struct Valhalla_InventorySlot>& Inventory, class AActor* ContainingActor);
	void ClientUpdateInteractableInventory(TArray<struct Valhalla_InventorySlot>& Inventory);
	void ClientUpdateActivityProgressGameInstance(int64 ActivityId, int32 ProgressValue);
	void ClientUpdateActivityProgress(int64 ActivityId, int32 ProgressValue);
	void ClientUpdateActivityOwnership(int64 ActivityId, bool bOwnership);
	void ClientTravelToEndOfMatch();
	void ClientToggleVoiceChatOnCharacterDied(bool bCharacterDead);
	void ClientToggleTeamCount(bool bShowTeamCount);
	void ClientTeleportAlert(enum class ETeleportAlert Type);
	void ClientSyncInventory(TArray<int32>& ItemIds);
	void ClientStopCameraLookAtTarget();
	void ClientStartSpectating(bool bIsNoClip);
	void ClientStartCameraLookAtTarget(class AActor* TargetActor);
	void ClientShowFabricator(class AValVendingMachine* Fabricator);
	void ClientShowAbilityFailReason(const struct GameplayTags_GameplayTag& Tag);
	void ClientSetTutorialCompleted(bool bCompletedTutorial);
	void ClientSetGeneratedMissions(TArray<struct Valhalla_MissionSequence>& GeneratedMissions);
	void ClientSendActivityProgress(int64 ActivityId, int32 ProgressValue);
	void ClientRequestPartyFillChoice();
	void ClientOnSafeVoiceConsentStatus(bool bConfirmConsent);
	void ClientOnMissionSequenceCompleted(class UValActivityTracker* SequenceTracker, int32 MissionCompleted, bool bSuccess);
	void ClientOnMatchVivoxToken(bool bIsTeamToken, struct Valhalla_VivoxJoinData& JoinData);
	void ClientOnInterruptedDepositPod();
	void ClientOnDealtDamage(const struct Valhalla_DamageData& Data, class AActor* TargetActor);
	void ClientOnActivityTimerStarted(int32 TimeUntilFailure);
	void ClientOnAccoladeProgressed(class UValActivityAsset* Asset);
	void ClientNotifyTeamFlagNeedsReturning();
	void ClientNotifyShopRerolled(TArray<struct Valhalla_ContractData>& ShopContracts);
	void ClientNotifyShopInitialized(TArray<struct Valhalla_ContractData>& ShopContracts, const struct CoreUObject_DateTime& ShopRerollTime);
	void ClientNotifySecurityLevelHealthUpdated();
	void ClientNotifyQueuedLoadoutResult(bool bSuccess);
	void ClientNotifyObjectiveTerminalUsed(int32 XpReward, enum class ESecurityLevel PreviousSecurityLevel);
	void ClientNotifyMissionProgress(int32 XpReward, class FText& MissionProgressMsg, bool bIsTeammateMission);
	void ClientNotifyKill(enum class EAwardType Type, class AValPlayerState* VictimState, bool bTeamWipe);
	void ClientNotifyInsufficientBackpackSpace();
	void ClientNotifyDogTagFound(bool bIsFriendly, int32 Split, struct Valhalla_InventoryItem& InventoryItem, enum class EPlayerLevelType LevelType);
	void ClientNotifyDeath(struct Valhalla_DeathData& Data);
	void ClientNotifyContractTaskProgress(const class FString& ContractId, class FName TaskId, int32 Progress);
	void ClientNotifyContractTaskComplete(const class FString& ContractId, class FName TaskId);
	void ClientNotifyContractsInitialized(TArray<struct Valhalla_ContractData>& Contracts);
	void ClientNotifyContractComplete(const class FString& ContractId);
	void ClientNotifyBanned();
	void ClientNotifyAward(enum class EAwardType Type, int32 Value);
	void ClientNoClipSpectate();
	void ClientMissionReport(class FName MissionId, int32 WinningTeam);
	void ClientHideFabricator();
	void ClientHideDeathcrate();
	void ClientEndSpectating();
	void ClientDrawDebugSphere(struct CoreUObject_Vector& Center, float Radius, struct CoreUObject_Color& Color, float Duration);
	void ClientDrawDebugLine(struct CoreUObject_Vector& Start, struct CoreUObject_Vector& End, struct CoreUObject_Color& Color, float Duration);
	void ClientDrawDebugCapsule(struct CoreUObject_Transform& Transform, float Radius, float HalfHeight, struct CoreUObject_Color& Color, float Duration);
	void ClientDrawDebugBox(struct CoreUObject_Transform& Transform, struct CoreUObject_Vector& Extent, struct CoreUObject_Color& Color, float Duration);
	void ClientDebugShowAIOnMinimap(class ATeamState* AITeam);
	void ClientConfirmDeployablePreview();
	void ClientCloseBackpack();
	void ClientClearActivityUnlocks();
	void ClientCacheStartingXP(int32 StartingXp, const struct GameplayTags_GameplayTag& LevelType);
	void ClientAddUnlockedItems(TArray<int32>& UnlockedItems);
	void ClientAddPlayerXP(int32 XpToAdd, const struct GameplayTags_GameplayTag& LevelType, enum class EPlayerExperienceSource XPSource);
	void ClientAddActivityReward(int32 ItemId, TArray<struct Valhalla_InventoryItem>& ActivityRewards);
	void ClientActivityPlayerIsReady(class AValActivityPlayer* ActivityPlayer);
	void ClearInvalidActionMappings();
	void ClearCameraLookAtTargetAndSpectate();
	void ClearCameraLookAtTargetAndRespawn(bool bFindRespawnPoint);
	void CheckInventoryManagement(class AGameModeBase* GameModeClass);
	void CalltoActionManagerReady(class AValCallToActionManager* Manager);
	void ApplyInputSettings();
	void AddPredictedProjectile(class AValProjectile* Projectile);
	void AddPinpoint(class AActor* PinpointTarget);
	void AddActiveMissionTag(const struct GameplayTags_GameplayTag& GameplayTag);
	void ActivityPlayerIsReady(const struct CoreUObject_Guid& OwningRHGuid);
};

// 0x58 (0x1578 - 0x1520)
// Class Valhalla.ValPlayerController_City
class AValPlayerController_City : public AValPlayerController
{
public:
	FMulticastInlineDelegateProperty_            OnVendorEvent_Deprecated;                          // 0x1520(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnVendorInteractEvent;                             // 0x1530(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLobbyConnected;                                  // 0x1540(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	enum class EVendorType                       Vendor;                                            // 0x1550(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_546D[0x7];                                     // Fixing Size After Last Property  
	class FString                                R_RemoteLobbyQueueId;                              // 0x1558(0x10)(Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_546E[0x8];                                     // Fixing Size After Last Property  
	class UValPreviewManager*                    PreviewManager;                                    // 0x1570(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValPlayerController_City* GetDefaultObj();

	void ToggleThirdPerson();
	void SetVendor_Deprecated(enum class EVendorType Type);
	void ServerRequestInventoryUpdate();
	void RequestInventoryUpdate();
	void OnRep_Vendor();
	void OnRep_RemoteLobbyQueueId();
	bool IsRemoteLobbyConnected();
	bool IsLocalLobbyConnected();
	void InteractPressed();
	enum class EVendorType GetVendor_Deprecated();
	class FString GetRemoteLobbyQueueId();
	class UValPreviewManager* GetPreviewManager();
};

// 0x0 (0x260 - 0x260)
// Class Valhalla.ValPlayerInfo
class UValPlayerInfo : public URHS_PlayerInfo
{
public:

	static class UClass* StaticClass();
	static class UValPlayerInfo* GetDefaultObj();

	class UValSettingsSubsystem* GetValSettingsSubsystem();
	class UValPlayerInventory* GetValPlayerInventory();
};

// 0x0 (0x138 - 0x138)
// Class Valhalla.ValPlayerInfoSubsystem
class UValPlayerInfoSubsystem : public URHS_PlayerInfoSubsystem
{
public:

	static class UClass* StaticClass();
	static class UValPlayerInfoSubsystem* GetDefaultObj();

};

// 0x8 (0x228 - 0x220)
// Class Valhalla.ValPlayerInventory
class UValPlayerInventory : public URHS_PlayerInventory
{
public:
	uint8                                        Pad_546F[0x8];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValPlayerInventory* GetDefaultObj();

};

// 0xB8 (0x158 - 0xA0)
// Class Valhalla.ValPlayerJoinTaskComponent
class UValPlayerJoinTaskComponent : public UActorComponent
{
public:
	uint8                                        Pad_5473[0xB8];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValPlayerJoinTaskComponent* GetDefaultObj();

	bool ValidatePlayerJoin(class APlayerController* NewPlayer);
	bool NewPlayerStarting(class APlayerController* NewPlayer);
	bool HasJoinTasksForPlayer(class APlayerController* Player);
	bool HasAnyJoinTasks();
	void CreateValidationTasksForPlayer(class APlayerController* NewPlayer, TArray<class UValPlayerJoinTask*>* OutValidationTasks);
	class UValPlayerJoinTask* CreateTask(TSubclassOf<class UValPlayerJoinTask> TaskClass, class APlayerController* Owner, TArray<class UValPlayerJoinTask*>* TaskContainer);
	void CreateJoinTasksForPlayer(class APlayerController* NewPlayer, TArray<class UValPlayerJoinTask*>* OutTasks);
	void AbandonJoinTasksForPlayer(class APlayerController* AbandonPlayer);
};

// 0x0 (0x158 - 0x158)
// Class Valhalla.ValPlayerJoinTaskComponent_Lobby
class UValPlayerJoinTaskComponent_Lobby : public UValPlayerJoinTaskComponent
{
public:

	static class UClass* StaticClass();
	static class UValPlayerJoinTaskComponent_Lobby* GetDefaultObj();

};

// 0x68 (0x90 - 0x28)
// Class Valhalla.ValPlayerJoinTask
class UValPlayerJoinTask : public UObject
{
public:
	uint8                                        Pad_5474[0x20];                                    // Fixing Size After Last Property  
	TWeakObjectPtr<class APlayerController>      OwningPlayer;                                      // 0x48(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5475[0x30];                                    // Fixing Size After Last Property  
	struct Engine_TimerHandle                    TaskTimeoutHandle;                                 // 0x80(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TaskTimeout;                                       // 0x88(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5476[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValPlayerJoinTask* GetDefaultObj();

};

// 0xA0 (0x130 - 0x90)
// Class Valhalla.ValPlayerJoinTask_DailyContract
class UValPlayerJoinTask_DailyContract : public UValPlayerJoinTask
{
public:
	uint8                                        Pad_5477[0x90];                                    // Fixing Size After Last Property  
	TArray<struct Valhalla_ContractRewards>      ContractRewardData;                                // 0x120(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UValPlayerJoinTask_DailyContract* GetDefaultObj();

	void OnLootAssetsLoaded();
	void OnInventoryManagerReady(class AValInventoryManager* InventoryManager);
	void OnActivityPlayerReady(class AValActivityPlayer* ActivityPlayer);
};

// 0x8 (0x98 - 0x90)
// Class Valhalla.ValPlayerJoinTask_SVConsent
class UValPlayerJoinTask_SVConsent : public UValPlayerJoinTask
{
public:
	uint8                                        Pad_5478[0x8];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValPlayerJoinTask_SVConsent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValPlayerProperty
class IValPlayerProperty : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IValPlayerProperty* GetDefaultObj();

	float GetBaseValue();
};

// 0x20 (0x2E8 - 0x2C8)
// Class Valhalla.ValPlayerStart
class AValPlayerStart : public APlayerStart
{
public:
	int32                                        TeamNumber;                                        // 0x2C8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bScrubSpawn;                                       // 0x2CC(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOrientTowardsCenter;                              // 0x2CD(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPlayerStartPriority              PlayerStartPriority;                               // 0x2CE(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5479[0x1];                                     // Fixing Size After Last Property  
	int32                                        SpawnIndex;                                        // 0x2D0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxPlayers;                                        // 0x2D4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PlayerStartRadius;                                 // 0x2D8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_547A[0x4];                                     // Fixing Size After Last Property  
	TSubclassOf<class AValGameMode>              GameModeClass;                                     // 0x2E0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValPlayerStart* GetDefaultObj();

};

// 0x60 (0x3C8 - 0x368)
// Class Valhalla.ValPlayerStateBase
class AValPlayerStateBase : public ARHPlayerState
{
public:
	uint8                                        Pad_547B[0x8];                                     // Fixing Size After Last Property  
	int32                                        R_TeamId;                                          // 0x370(0x4)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_547C[0x4];                                     // Fixing Size After Last Property  
	TArray<FDelegateProperty_>                   TeamChangedDelegates;                              // 0x378(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class FString                                EOSProductUserIdString;                            // 0x388(0x10)(Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnPlayerJoinTasksCompleted;                        // 0x398(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         R_bJoinTasksCompleted;                             // 0x3A8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_547D[0x7];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnPlayerFinalized;                                 // 0x3B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         R_bFinalizedPlayer;                                // 0x3C0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_547E[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValPlayerStateBase* GetDefaultObj();

	void SetPlayerJoinTasksComplete(bool bComplete);
	void SetFinalizedPlayer(bool bFinalized);
	void OnTeamChanged(int32 OldTeamId, int32 NewTeamId);
	void OnRep_TeamId(int32 OldTeamId);
	void OnRep_JoinTasksCompleted();
	void OnRep_FinalizedPlayer();
	bool HasPlayerCompletedJoinTasks();
	bool HasFinalizedPlayer();
};

// 0x430 (0x7F8 - 0x3C8)
// Class Valhalla.ValPlayerState
class AValPlayerState : public AValPlayerStateBase
{
public:
	uint8                                        Pad_54AC[0x8];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnLocalWeaponSwap;                                 // 0x3D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnIsDefenderChanged;                               // 0x3E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnRevealed;                                        // 0x3F0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEliminated;                                      // 0x400(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnReviveInProgress;                                // 0x410(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStatsChanged;                                    // 0x420(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStreaksChanged;                                  // 0x430(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerReady;                                     // 0x440(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnColorIndex;                                      // 0x450(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMatchCurrency;                                   // 0x460(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEntryCost;                                       // 0x470(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLivesRemaining;                                  // 0x480(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnUpdateDead;                                      // 0x490(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnUpdateInterface;                                 // 0x4A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSpectateModeChanged;                             // 0x4B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPendingInventory;                                // 0x4C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPendingLegendaryInventory;                       // 0x4D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnReviveBeaconSet;                                 // 0x4E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnKillerUpdated;                                   // 0x4F0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDeathRecap;                                      // 0x500(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDeathDamage;                                     // 0x510(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnProjectilesFired;                                // 0x520(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnProjectilesHit;                                  // 0x530(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnProjectilesRejected;                             // 0x540(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDungeonPortalLocationsUpdated;                   // 0x550(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActiveObjectiveTerminalLocationsUpdated;         // 0x560(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSecurityLevelAccessUpdated;                      // 0x570(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLocalVisibilityChanged;                          // 0x580(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPendingLoadoutChanges;                           // 0x590(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<enum class EGameStatType, class UValGameStatArchiver*> StatsToArchive;                                    // 0x5A0(0x50)(Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_GameStatData>         R_Stats;                                           // 0x5F0(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_GameStatData>         R_Streaks;                                         // 0x600(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	bool                                         R_bRevealed;                                       // 0x610(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bEliminated;                                     // 0x611(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bReviveInProgress;                               // 0x612(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_ClientReady;                                     // 0x613(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_IsGrantingItems;                                 // 0x614(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_54B0[0x3];                                     // Fixing Size After Last Property  
	int32                                        R_ColorIndex;                                      // 0x618(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_MatchCurrency;                                   // 0x61C(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_EntryCost;                                       // 0x620(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        R_PlayerAccountLevel;                              // 0x624(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_54B1[0x3];                                     // Fixing Size After Last Property  
	int32                                        R_LivesRemaining;                                  // 0x628(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bDead;                                           // 0x62C(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_54B2[0x3];                                     // Fixing Size After Last Property  
	float                                        R_TimeOfDeath;                                     // 0x630(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ESpectateMode                     R_SpectateMode;                                    // 0x634(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_54B4[0x3];                                     // Fixing Size After Last Property  
	int32                                        R_MaxPendingLoot;                                  // 0x638(0x4)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_MaxPendingLegendaryLoot;                         // 0x63C(0x4)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_PendingItem>          R_PendingInventory;                                // 0x640(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_PendingItem>          R_PendingLegendaryInventory;                       // 0x650(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	struct Valhalla_DeathData                    R_DeathRecap;                                      // 0x660(0x28)(Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class AValReviveBeacon*                      R_ReviveBeacon;                                    // 0x688(0x8)(Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Valhalla_DeathDamage                  R_DeathDamage;                                     // 0x690(0x10)(Net, RepNotify, Protected, NativeAccessSpecifierProtected)
	struct Valhalla_ValCachedObjectivePing       R_MapLineDestination;                              // 0x6A0(0x20)(Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TMap<class AValWaypoint*, class FName>       Waypoints;                                         // 0x6C0(0x50)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class AValPlayerState*                       R_Killer;                                          // 0x710(0x8)(Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_fRespawnCompleteTime;                            // 0x718(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LegendaryRevealTimer;                              // 0x71C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bRevealLegendaryArtifact;                        // 0x720(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_54B6[0x10];                                    // Fixing Size After Last Property  
	bool                                         R_bForceHideNameplate;                             // 0x731(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_54B7[0x6];                                     // Fixing Size After Last Property  
	TArray<struct CoreUObject_Vector2f>          R_ActiveDungeonPortalLocations;                    // 0x738(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TMap<TWeakObjectPtr<class AValDungeonPortal>, struct CoreUObject_Vector2f> DungeonPortalLocations;                            // 0x748(0x50)(Protected, NativeAccessSpecifierProtected)
	TArray<struct CoreUObject_Vector2f>          R_ActiveObjectiveTerminalLocations;                // 0x798(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	enum class ESecurityLevel                    R_SecurityLevelAccess;                             // 0x7A8(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bIsRemoteControlled;                             // 0x7A9(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         C_LocalVisible;                                    // 0x7AA(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_PendingLoadoutChanges;                           // 0x7AB(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_54B8[0x18];                                    // Fixing Size After Last Property  
	int32                                        ProjectilesFired;                                  // 0x7C4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ProjectilesHit;                                    // 0x7C8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ProjectilesRejected;                               // 0x7CC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class AValPlayerStateBase>> R_RevivableTeammates;                              // 0x7D0(0x10)(Net, ZeroConstructor, Transient, RepNotify, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnRevivableTeammatesUpdated;                       // 0x7E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_54B9[0x8];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValPlayerState* GetDefaultObj();

	void UpdateActiveObjectiveTerminalLocations();
	void SpawnWaypoint_Client(struct CoreUObject_Vector& Location, struct CoreUObject_Rotator& Rotation, class FName& UILabel, float VisibilityDistSq);
	void SetWaypointDebugText_Client(class FName& UILabel, const class FString& DebugText);
	void SetWaypointColor_Client(class FName& UILabel, struct CoreUObject_LinearColor& Color);
	void SetReviveBeacon(class AValReviveBeacon* ReviveBeacon);
	void SetRevealed(bool Value);
	void SetMaxPendingLoot(int32 Value);
	void SetMapLineDestination(struct Valhalla_ValCachedObjectivePing* ObjectivePing);
	void SetIsRemoteControlled(bool Value);
	void SetIsABotBP(bool bNewIsABot);
	void SetForceHideNameplate(bool Value);
	void SetEliminated(bool Value);
	void SetActiveObjectiveTerminalLocations(TArray<struct CoreUObject_Vector2f>* NewLocations);
	void SetActiveDungeonPortals(TArray<class AValDungeonPortal*>* DungeonPortals);
	void ServerSetMapLineDestination(const struct Valhalla_ValCachedObjectivePing& ObjectivePing);
	void ServerRequestReady();
	void SaveDeathRecap(struct Valhalla_DeathData& DeathData);
	void SaveDeathDamage(struct Valhalla_DamageData& DamageData);
	void ReviveAtReviveBeacon();
	void RevealLegendaryArtifact();
	void ResetWaypoints_Client();
	void RepPortalLocations();
	void RemovePendingInventory(struct Valhalla_PendingItem& Item);
	int32 ProjectileRejected(enum class EProjectileRejection Rejection);
	int32 ProjectileHit();
	int32 ProjectileFired();
	void OnTeamMembersChanged();
	void OnRep_TimeOfDeath();
	void OnRep_Streaks();
	void OnRep_Stats();
	void OnRep_SpectateMode();
	void OnRep_SecurityLevelAccessUpdated();
	void OnRep_ReviveInProgress();
	void OnRep_ReviveBeacon();
	void OnRep_RevivableTeammates();
	void OnRep_Revealed();
	void OnRep_PlayerAccountLevel();
	void OnRep_PendingLoadoutChanges();
	void OnRep_PendingLegendaryInventory();
	void OnRep_PendingInventory();
	void OnRep_MatchCurrency();
	void OnRep_MapLineDestination();
	void OnRep_LivesRemaining();
	void OnRep_Killer();
	void OnRep_IsGrantingItems();
	void OnRep_ForceHideNameplate();
	void OnRep_EntryCost();
	void OnRep_Eliminated();
	void OnRep_DungeonPortalsUpdated();
	void OnRep_DeathRecap();
	void OnRep_DeathDamage();
	void OnRep_Dead();
	void OnRep_ColorIndex();
	void OnRep_ClientReady();
	void OnRep_ActiveObjectiveTerminalLocations();
	bool IsWaitingTeam();
	bool IsReviveInProgress();
	bool IsRevealed();
	bool IsPlayerRevivable(class AValPlayerStateBase* PlayerState);
	bool IsHazard();
	bool IsGrantingItems();
	bool IsEliminated();
	bool IsDead();
	bool IsABotPlayerState(bool bExcludePlayerBots);
	void HandlePhaseChange(const struct GameplayTags_GameplayTag& Phase);
	float GetTimeOfDeath();
	int32 GetStreak(enum class EGameStatType Type);
	int32 GetStat(enum class EGameStatType Type);
	enum class ESpectateMode GetSpectateMode();
	enum class ESecurityLevel GetSecurityLevelAccess();
	int32 GetRevivesRemaining();
	class AValReviveBeacon* GetReviveBeacon();
	void GetRevivableTeammates(TArray<class AValPlayerStateBase*>* OutRevivableTeammates);
	int32 GetRevivableTeammateCount();
	int32 GetRarityCount(enum class ERarity Rarity);
	float GetProjectileAccuracy();
	uint8 GetPlayerAccountLevel();
	float GetPing();
	void GetPendingLegendaryInventory(TArray<struct Valhalla_PendingItem>* Inventory);
	void GetPendingInventory(TArray<struct Valhalla_PendingItem>* Inventory);
	float GetPacketLossSliding(int32 NumberOfAverages);
	int32 GetMaxPendingLoot();
	int32 GetMaxPendingLegendaryLoot();
	float GetMaxPacketLoss();
	int32 GetMatchCurrency();
	struct Valhalla_ValCachedObjectivePing GetMapLineDestination();
	int32 GetLivesRemaining();
	class AValPlayerState* GetKiller();
	bool GetIsRemoteControlled();
	enum class ERarity GetHighestRarity();
	bool GetForceHideNameplate();
	int32 GetEntryCost();
	struct Valhalla_DeathData GetDeathRecap();
	void GetDeathDamageSummary(TArray<struct Valhalla_DamageSummaryData>* Summary);
	struct Valhalla_DeathDamage GetDeathDamage();
	int32 GetColorIndex();
	bool GetClientReady();
	float GetCachedPacketLossSliding();
	void GetActiveObjectiveTerminalLocations(TArray<struct CoreUObject_Vector2f>* Locations);
	void GetActiveDungeonPortalLocations(TArray<struct CoreUObject_Vector2f>* Locations);
	void EmptyPendingLegendaryInventory();
	void EmptyPendingInventory();
	void DestroyReviveBeacon();
	void ClientSetHideNameplateInMatchLobby(bool bValue);
	void ClientSetEquippedItem(struct GameplayTags_GameplayTag& ItemTag);
	void ClearDeathDamage();
	void ClearActiveObjectiveTerminalLocations();
	class APawn* BPGetPawn();
	void AddPendingInventory(struct Valhalla_PendingItem& Item);
};

// 0x248 (0xA40 - 0x7F8)
// Class Valhalla.ValPlayerState_Frontier
class AValPlayerState_Frontier : public AValPlayerState
{
public:
	TArray<TWeakObjectPtr<class AValDropCrate>>  DropCrates;                                        // 0x7F8(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnFrontierState;                                   // 0x808(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterReset;                                  // 0x818(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLootValue;                                       // 0x828(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnSpectateTime;                                    // 0x838(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnItemSlotChanged;                                 // 0x848(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnItemSlotRemoved;                                 // 0x858(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnEquippedItem;                                    // 0x868(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnLootToDrop;                                      // 0x878(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnArtifactDeposit;                                 // 0x888(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnDepositInventory;                                // 0x898(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnScanTowerUsed;                                   // 0x8A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnDroppedDeathCrateUpdated;                        // 0x8B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	int32                                        R_MaxDepositInventory;                             // 0x8C8(0x4)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_LootValue;                                       // 0x8CC(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EFrontierState                    R_FrontierState;                                   // 0x8D0(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_54E2[0x3];                                     // Fixing Size After Last Property  
	float                                        R_SpectateTime;                                    // 0x8D4(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                          R_EquippedItems;                                   // 0x8D8(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class AValPickup>>        R_LootToDrop;                                      // 0x8E8(0x10)(Edit, BlueprintVisible, Net, ZeroConstructor, RepNotify, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_PendingItem>          R_DepositInventory;                                // 0x8F8(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	int32                                        R_AugmentBonusScore;                               // 0x908(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValDeathCrate>         R_DroppedDeathCrate;                               // 0x90C(0x8)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        BoostOptionPerRoll;                                // 0x914(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPendingBoostUpdated;                             // 0x918(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPendingBoostRolled;                              // 0x928(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBoostEquipped;                                   // 0x938(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBoostPurchasedFromFabricator;                    // 0x948(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_BoostChoices>         R_PendingBoosts;                                   // 0x958(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_54E4[0x8];                                     // Fixing Size After Last Property  
	float                                        R_PlayerSurviveTimerStartTime;                     // 0x970(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PlayerTimerDuration;                               // 0x974(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_54E5[0x8];                                     // Fixing Size After Last Property  
	float                                        R_MissionTimerDuration;                            // 0x980(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_54E6[0x4];                                     // Fixing Size After Last Property  
	struct Valhalla_LootDepositPodData           R_ActiveDepositPodData;                            // 0x988(0x28)(Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnActiveLootDepositData;                           // 0x9B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         R_ActiveObjective;                                 // 0x9C0(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_54E7[0x7];                                     // Fixing Size After Last Property  
	class AValMissionState*                      R_SelectedMission;                                 // 0x9C8(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValMissionState*                      R_ProximityMission;                                // 0x9D0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnActiveObjectiveSet;                              // 0x9D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSelectedMissionSet;                              // 0x9E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnProximityMissionSet;                             // 0x9F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct GameplayTags_GameplayTag              R_QueuedLoadoutTag;                                // 0xA08(0x8)(Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              R_ActiveLoadoutTag;                                // 0xA10(0x8)(Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_InventoryStationCooldownEndtime;                 // 0xA18(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_54E9[0x4];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnQueuedLoadoutTagChanged;                         // 0xA20(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActiveLoadoutTagChanged;                         // 0xA30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValPlayerState_Frontier* GetDefaultObj();

	void UseScanTower(bool bIsInitiatingPlayer);
	void TogglePlayerSurviveTimer(bool bPause);
	void StartSurviveTimer();
	void StartMissionVotingTimer(float TimerDuration);
	void SimulateAddEquippedItem(class FName& ItemName);
	void SetQueuedLoadoutTag(const struct GameplayTags_GameplayTag& NewTag);
	void SetInventoryStationCooldownEndtime(float NewEndtime);
	void SetActiveLoadoutTag(const struct GameplayTags_GameplayTag& NewTag);
	void ServerRequestRollNextPendingBoost();
	void ServerRequestChooseBoost(class FName BoostChoice);
	bool RollPendingBoostRarity(struct Valhalla_BoostChoices* OutBoost);
	bool RollPendingBoost(struct Valhalla_BoostChoices* OutBoost);
	bool RollPendingAttributeBoost(struct Valhalla_BoostChoices* OutBoost);
	void RemoveNextPendingBoost();
	void OnRep_SpectateTime();
	void OnRep_SelectedMission();
	void OnRep_QueuedLoadoutTag();
	void OnRep_ProximityMission();
	void OnRep_PlayerSurviveTimerStartTime();
	void OnRep_PendingBoosts();
	void OnRep_MissionTimerDuration();
	void OnRep_LootValue();
	void OnRep_LootToDrop();
	void OnRep_InventoryStationCooldownEndtime();
	void OnRep_FrontierState();
	void OnRep_EquippedItems();
	void OnRep_DroppedDeathCrate();
	void OnRep_DepositInventory();
	void OnRep_ActiveObjective();
	void OnRep_ActiveLoadoutTag();
	void OnRep_ActiveDepositPodData();
	void IncrementAugmentBonusScore(int32 Amount);
	bool HasPendingBoostSpace();
	bool HasPendingBoosts();
	float GetSpectateTime();
	class AValMissionState* GetSelectedMission();
	float GetRemainingPlayerTime();
	struct GameplayTags_GameplayTagContainer GetRemainingEquipSlots();
	struct GameplayTags_GameplayTag GetQueuedLoadoutTag();
	class AValMissionState* GetProximityMission();
	void GetPendingBoosts(TArray<struct Valhalla_BoostChoices>* OutBoostChoices);
	int32 GetNumEquippedItems();
	bool GetNextPendingBoost(struct Valhalla_BoostChoices* OutBoost);
	float GetMissionVotingTimeRemaining();
	int32 GetLootValue();
	float GetInventoryStationCooldownEndtime();
	enum class ERarity GetHighestRarityFromBoost(struct Valhalla_BoostChoices& BoostToCheck);
	enum class ERarity GetHighestEquippedBoostRarity();
	enum class EFrontierState GetFrontierState();
	TArray<struct Valhalla_BoostItem> GetEquippedItems();
	TArray<class FName> GetEquippedItemNames();
	class AValDeathCrate* GetDroppedDeathCrate();
	void GetDepositedItems(TArray<struct Valhalla_PendingItem>* DepositedItems);
	int32 GetAugmentBonusScore();
	bool GetActiveObjective();
	struct GameplayTags_GameplayTag GetActiveLoadoutTag();
	struct Valhalla_LootDepositPodData GetActiveDepositPodData();
	void ExtendSurviveTimer(float ExtraTime);
	void EquipChosenBoost(class FName BoostChoice);
	void DropScrubLoot(int32 DropNum, TMap<TSubclassOf<class AValPickup>, int32> DropContents);
	void DropPlayerBotDeathCrate(class UValLootConfigData* LootTable);
	void DropDeathCrate();
	void DropBotDeathCrate(class UValLootConfigData* LootTable, int32 BotLootIncrease);
	void ClientUseScanTower(bool bIsInitiatingPlayer);
	void ClientRemoveItemSlot(const struct GameplayTags_GameplayTag& ItemSlot);
	void ClientOnPendingBoostRolled(struct Valhalla_BoostChoices& RolledBoost);
	void ClientAddEquippedItem(class FName ItemName, const struct GameplayTags_GameplayTag& ItemSlot);
	void ClientAddAttributeBoost(TArray<struct Valhalla_UpgradeTreeAttribute>& Boosts);
	bool CanBeRevived();
	bool AllBoostSlotsFilled();
	bool AddPendingBoost();
	bool AddEquippedItemIgnorePrevious(class FName& ItemName);
	bool AddEquippedItem(class FName ItemName, class AActor* ItemActor);
	bool AddAttributeBoost(class FName BoostChoice);
};

// 0x98 (0x890 - 0x7F8)
// Class Valhalla.ValPlayerState_Mission
class AValPlayerState_Mission : public AValPlayerState
{
public:
	FMulticastInlineDelegateProperty_            OnActiveObjective;                                 // 0x7F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSelectedMission;                                 // 0x808(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnProximityMission;                                // 0x818(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLevelChanged;                                    // 0x828(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnXPChanged;                                       // 0x838(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDropPodChanged;                                  // 0x848(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UCurveTable*                           LevelingInformation;                               // 0x858(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_ActiveObjective;                                 // 0x860(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_54F4[0x7];                                     // Fixing Size After Last Property  
	class AValMissionState*                      R_SelectedMission;                                 // 0x868(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValMissionState*                      R_ProximityMission;                                // 0x870(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_DropPodStatus;                                   // 0x878(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bReadyToDropPod;                                 // 0x879(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_54F5[0x2];                                     // Fixing Size After Last Property  
	int32                                        R_XP;                                              // 0x87C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        PlayerLevel;                                       // 0x880(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_54F6[0xC];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValPlayerState_Mission* GetDefaultObj();

	void SetReadyToDropPod(bool Value);
	void OnRep_XP(int32 OldValue);
	void OnRep_SelectedMission();
	void OnRep_ReadyToDropPod();
	void OnRep_ProximityMission();
	void OnRep_DropPodStatus();
	void OnRep_ActiveObjective();
	class AValMissionState* GetSelectedMission();
	bool GetReadyToDropPod();
	class AValMissionState* GetProximityMission();
	bool GetDropPodStatus();
	bool GetActiveObjective();
	void AddXP(int32 Amount);
};

// 0xB8 (0xE0 - 0x28)
// Class Valhalla.ValPlayerStats
class UValPlayerStats : public UObject
{
public:
	struct CoreUObject_Guid                      StatsPlayerUuid;                                   // 0x28(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        TaskForce;                                         // 0x38(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        PlacementRanking;                                  // 0x3C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct CoreUObject_Guid, struct Valhalla_TeamingStats> SoloTeamingMap;                                    // 0x40(0x50)(Protected, NativeAccessSpecifierProtected)
	TMap<enum class EPlayerStats, int32>         PlayerStatsMap;                                    // 0x90(0x50)(Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValPlayerStats* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValPlayerTypes
class UValPlayerTypes : public UObject
{
public:

	static class UClass* StaticClass();
	static class UValPlayerTypes* GetDefaultObj();

};

// 0x30 (0x2C8 - 0x298)
// Class Valhalla.ValPodLauncher
class AValPodLauncher : public AActor
{
public:
	class UCapsuleComponent*                     CapsuleComponent;                                  // 0x298(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                  StaticMeshComponent;                               // 0x2A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_Vector                    CachedTargetLocation;                              // 0x2A8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CurveArc;                                          // 0x2C0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_54FB[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValPodLauncher* GetDefaultObj();

	class UStaticMeshComponent* GetStaticMeshComp();
	struct CoreUObject_Vector GetPodStartLocation();
	class UCapsuleComponent* GetCapsuleComp();
	void EventOnLaunched(class AValCharacter* CharacterToLaunch, const struct CoreUObject_Vector& LaunchVel);
	void BeginLaunch(class AValCharacter* CharacterToLaunch, const struct CoreUObject_Vector& TargetLocation);
};

// 0x38 (0xD8 - 0xA0)
// Class Valhalla.ValPositionHistoryComponent
class UValPositionHistoryComponent : public UActorComponent
{
public:
	enum class EPositionHistoryRecordMode        PositionRecordMode;                                // 0xA0(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         ExtrapolateFromLastEntry;                          // 0xA1(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAutoPopulateOnBeginPlay;                          // 0xA2(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_54FE[0x15];                                    // Fixing Size After Last Property  
	TArray<struct Valhalla_PrimitivePriority>    TrackedPrimitives;                                 // 0xB8(0x10)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        Pad_54FF[0x10];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValPositionHistoryComponent* GetDefaultObj();

	void RemoveTrackedPrimitive(class UPrimitiveComponent* InPrimitive);
	void AddTrackedPrimitive(class UPrimitiveComponent* InPrimitive, int32 Priority);
};

// 0xC8 (0xF0 - 0x28)
// Class Valhalla.ValPreviewManager
class UValPreviewManager : public UObject
{
public:
	uint8                                        Pad_550D[0x1C];                                    // Fixing Size After Last Property  
	class FName                                  LocalTag;                                          // 0x44(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  PartyTag;                                          // 0x4C(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  ArmoryTag;                                         // 0x54(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  ArmoryItemTag;                                     // 0x5C(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  ArmoryItemDetailTag;                               // 0x64(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  ShopItemTag;                                       // 0x6C(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  ShopSuitTag;                                       // 0x74(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_550E[0x4];                                     // Fixing Size After Last Property  
	TArray<class AValItemPreviewActor*>          ItemPreviews;                                      // 0x80(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AValMergedPreviewActor*>        SuitPreviews;                                      // 0x90(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AValMergedPreviewActor*>        LocalPreviews;                                     // 0xA0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AValMergedPreviewActor*>        PartyPreviews;                                     // 0xB0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class AValItemPreviewActor*                  ArmoryItemPreview;                                 // 0xC0(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValItemPreviewActor*                  ArmoryItemDetailPreview;                           // 0xC8(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValMergedPreviewActor*                ArmoryPreview;                                     // 0xD0(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URHPartyManager*                       PartyManager;                                      // 0xD8(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct RallyHereStart_RH_PartyMemberData> PartyMembers;                                      // 0xE0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValPreviewManager* GetDefaultObj();

	void UpdateSuitPreviews(TArray<struct Valhalla_InventoryItem>& Items);
	void UpdateLocalPreviews();
	void UpdateItemPreviews(TArray<struct Valhalla_InventoryItem>& Items);
	void UpdateArmorySlots(TArray<struct Valhalla_InventorySlot>& ArmorySlots);
	void UpdateArmorySkinWithAsset(class UValItemAsset* SkinItemAsset, bool HideCape);
	void UpdateArmorySkin(struct Valhalla_InventoryItem& SkinItem, bool HideCape);
	void UpdateArmoryLoadout(class UValLoadoutAsset* LoadoutAsset, class UValItemAsset* OverrideWeaponAsset, bool HideCape);
	void UpdateArmoryItemWithAsset(class UValItemAsset* Item);
	void UpdateArmoryItem(struct Valhalla_InventoryItem& Item);
	void UpdateArmoryEquippedWeapon(class UValItemAsset* WeaponAsset, class UValItemAsset* WeaponSkinAsset);
	void UpdateArmoryDetailItem(struct GameplayTags_GameplayTag& EquipSlot, struct Valhalla_InventoryItem& Item);
	void ResetEquippedSlots();
	void PreviewEquippedSlots(TArray<struct Valhalla_InventorySlot>& EquippedSlots);
	void OnUpdateLobbyPartyActors();
	void OnShopManagerReady(class AValShopManager* ShopManager);
	void OnLoadoutConfigReady();
	void OnInventoryManagerReady(class AValInventoryManager* InventoryManager);
	void OnGameStateSet(class AGameStateBase* GameState);
	void OnEquippedSlotsUpdated(TArray<struct Valhalla_InventorySlot>& EquippedSlots);
	void OnCosmeticSlotsUpdated(TArray<struct Valhalla_InventorySlot>& CosmeticSlots);
	class AValMergedPreviewActor* GetPartyPreviewAt(int32 Index);
};

// 0x248 (0x4E0 - 0x298)
// Class Valhalla.ValProjectile
class AValProjectile : public AActor
{
public:
	uint8                                        Pad_551D[0x10];                                    // Fixing Size After Last Property  
	class USphereComponent*                      CollisionComp;                                     // 0x2A8(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                       VisualRootSceneComponent;                          // 0x2B0(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UProjectileMovementComponent*          ProjectileMovement;                                // 0x2B8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bApplyImpulseOnHit;                                // 0x2C0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_551E[0x3];                                     // Fixing Size After Last Property  
	float                                        ImpulseOnHitMagnitude;                             // 0x2C4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Valhalla_ValGameplayEffectContainerSpec EffectSpec;                                        // 0x2C8(0x10)(Edit, BlueprintVisible, EditConst, ExposeOnSpawn, NativeAccessSpecifierPublic)
	struct CoreUObject_Vector                    ProjectileOrigin;                                  // 0x2D8(0x18)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Engine_Vector_NetQuantize             R_NetProjectileOrigin;                             // 0x2F0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, Net, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        R_BotMuzzleSocketIndex;                            // 0x308(0x4)(Edit, BlueprintVisible, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanPlayBulletWhiz;                                // 0x30C(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_551F[0x3];                                     // Fixing Size After Last Property  
	float                                        ExplosionRadius;                                   // 0x310(0x4)(Edit, BlueprintVisible, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bReplicateExplosionRadius;                         // 0x314(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5520[0x3];                                     // Fixing Size After Last Property  
	float                                        ProjectileSpeedModify;                             // 0x318(0x4)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOffsetProjectileToMuzzleSocket;                   // 0x31C(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanTargetInstigator;                              // 0x31D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5521[0x2];                                     // Fixing Size After Last Property  
	float                                        KnockbackAmount;                                   // 0x320(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InheritForwardVelocityPercent;                     // 0x324(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InheritLateralVelocityPercent;                     // 0x328(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSingleHit;                                        // 0x32C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5522[0x3];                                     // Fixing Size After Last Property  
	class UValDeviceAudioVisual*                 AudioVisual;                                       // 0x330(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ClientShutdownFXDelay;                             // 0x338(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  TimeElapsedParam;                                  // 0x33C(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAllowFriendlyFire;                                // 0x344(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5523[0x3];                                     // Fixing Size After Last Property  
	struct CoreUObject_Vector                    CachedInitialVelocity;                             // 0x348(0x18)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5524[0x4];                                     // Fixing Size After Last Property  
	bool                                         bIsTerminatedEarly;                                // 0x364(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5525[0x3];                                     // Fixing Size After Last Property  
	struct Valhalla_RepValProjMovement           ValProjReplicatedMovement;                         // 0x368(0x38)(Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                         bReplicateValMovement;                             // 0x3A0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5526[0x7];                                     // Fixing Size After Last Property  
	class AController*                           R_InstigatorController;                            // 0x3A8(0x8)(BlueprintVisible, Net, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_PredictionID;                                    // 0x3B0(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5527[0x1];                                     // Fixing Size After Last Property  
	bool                                         bIsClientProjectile;                               // 0x3B5(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5528[0x2];                                     // Fixing Size After Last Property  
	class AValProjectile*                        PredictedProjectile;                               // 0x3B8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValProjectile*                        MasterProjectile;                                  // 0x3C0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHasSpawnedFully;                                  // 0x3C8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDebugPrediction;                                  // 0x3C9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDebugGrowCurve;                                   // 0x3CA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5529[0x69];                                    // Fixing Size After Last Property  
	float                                        HitValidationLenience;                             // 0x434(0x4)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDoNotValidate;                                    // 0x438(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_552A[0x7];                                     // Fixing Size After Last Property  
	struct Valhalla_MinimalHitResult             R_StoppingHit;                                     // 0x440(0x38)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                         bDeferStoppingHit;                                 // 0x478(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_552B[0x3];                                     // Fixing Size After Last Property  
	float                                        AdditionalPredictionTimeLenience;                  // 0x47C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AdditionalPredictionArcTime;                       // 0x480(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_552C[0x4];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_LaggedProjectileHit>  CachedPredictedHits;                               // 0x488(0x10)(ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                         bStopped;                                          // 0x498(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_552D[0x7];                                     // Fixing Size After Last Property  
	class UCurveFloat*                           GrowCurve;                                         // 0x4A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  GrowCollisionProfile;                              // 0x4A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_Vector                    CachedPreviousTickLocation;                        // 0x4B0(0x18)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bProjectileCanBeDamaged;                           // 0x4C8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_552E[0x3];                                     // Fixing Size After Last Property  
	int32                                        R_ProjectileHealth;                                // 0x4CC(0x4)(Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnDamagedDel;                                      // 0x4D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValProjectile* GetDefaultObj();

	bool ValidateHit(struct Valhalla_LaggedProjectileHit& LaggedPredictedHit, float AdditionalPredictionTime, struct Engine_HitResult* ValidHit, struct CoreUObject_Vector* VelocityAtHit, enum class EProjectileRejection* Rejection);
	void ShutDown();
	void SetHealth(int32 NewHealth);
	void ServerProcessPredictedHits(TArray<struct Valhalla_LaggedProjectileHit>& PredictedHits);
	void RecordPredictedHits(TArray<struct Engine_HitResult>& HitResults, enum class EProjectilePredictionType PredictionType);
	void RecordPredictedHit(struct Engine_HitResult& HitResult, enum class EProjectilePredictionType PredictionType);
	void PlayBulletWhizFX(const struct CoreUObject_Vector& SpawnLocation, float DistanceFromSpawn, const struct CoreUObject_Vector& BulletDirection);
	void OnStoppingHit();
	void OnShutdown();
	void OnRep_ValProjReplicatedMovement();
	void OnRep_StoppingHit();
	void OnRep_PredictionID();
	void OnProjectileStopped(struct Engine_HitResult& HitResult);
	void OnHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct CoreUObject_Vector& NormalImpulse, struct Engine_HitResult& Hit);
	void OnGrowSphereOverlap(const struct Engine_HitResult& Hit);
	void OnDestroyedByDamage();
	void OnDamaged(const struct Valhalla_DamageData& DamageData);
	void NotifyPredictedHitRejected(enum class EProjectileRejection Rejection);
	bool IsValidTargetActor(struct Engine_HitResult& HitResult);
	bool IsAlive();
	void InitBindings();
	void HandlePredictedStop(struct Engine_HitResult& HitResult);
	void HandlePredictedGrenade(struct Engine_HitResult& HitResult);
	class UProjectileMovementComponent* GetProjectileMovement();
	int32 GetHealth();
	class USphereComponent* GetCollisionComp();
	class UValDeviceAudioVisual* GetAudioVisual();
	void FireProjectile();
	void FinishExisting();
	bool EventOnProjectileStopped(struct Engine_HitResult& HitResult);
	void DeactivateFX();
	bool CheckTeam(class AActor* OtherActor);
	bool CanBeDamaged();
	bool AlwaysDamageable();
};

// 0x10 (0x3E0 - 0x3D0)
// Class Valhalla.ValProjectileEater
class AValProjectileEater : public AValAttributeActor
{
public:
	class USceneComponent*                       Root;                                              // 0x3D0(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                  CollisionBox;                                      // 0x3D8(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValProjectileEater* GetDefaultObj();

	void BeginOverlap(class UPrimitiveComponent* OverlapComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct Engine_HitResult& SweepResult);
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValProjectileFunctionLibrary
class UValProjectileFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UValProjectileFunctionLibrary* GetDefaultObj();

	bool ValidateHitscanHit(struct Engine_HitResult& PredictedHit, class AController* InstigatorController, enum class ECollisionChannel TraceChannel, bool bAllowFriendlyFire);
	struct Engine_HitResult ValidateHeadshot(struct Engine_HitResult& InputHit);
	struct Engine_HitResult MakeHitResultFromMinimal(struct Valhalla_MinimalHitResult& MinimalHit, float Radius);
	void BreakMinimalHitResult(struct Valhalla_MinimalHitResult& Hit, struct CoreUObject_Vector* ImpactPoint, struct CoreUObject_Vector* ImpactNormal, class UPhysicalMaterial** PhysMat);
};

// 0x48 (0x2A0 - 0x258)
// Class Valhalla.ValProjectileMovementComponent
class UValProjectileMovementComponent : public UProjectileMovementComponent
{
public:
	float                                        MinLifetimeUponStop;                               // 0x258(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AccelRate;                                         // 0x25C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_Vector                    PreStopVelocity;                                   // 0x260(0x18)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LifetimeUponStop;                                  // 0x278(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCheckBulletWhiz;                                  // 0x27C(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5535[0x3];                                     // Fixing Size After Last Property  
	float                                        TotalDistanceTraveled;                             // 0x280(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5536[0x4];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnProjectileImpact;                                // 0x288(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_5537[0x8];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValProjectileMovementComponent* GetDefaultObj();

	void ForceBounce(const struct Engine_HitResult& ValidHitResult);
};

// 0x60 (0x300 - 0x2A0)
// Class Valhalla.ValProxyAudioThreatComponent
class UValProxyAudioThreatComponent : public USceneComponent
{
public:
	uint8                                        Pad_5538[0x10];                                    // Fixing Size After Last Property  
	float                                        ComparisionFOV;                                    // 0x2B0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  PlayerTraceChannel;                                // 0x2B4(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValCharacter>          Owner;                                             // 0x2BC(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_5539[0x3C];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValProxyAudioThreatComponent* GetDefaultObj();

	void OnPlayerStateReady(class AValPlayerStateBase* State);
};

// 0x18 (0x40 - 0x28)
// Class Valhalla.ValTeamConfig
class UValTeamConfig : public UObject
{
public:
	class FString                                MatchmakingDefinitionName;                         // 0x28(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Count;                                             // 0x38(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PlayerCount;                                       // 0x3C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValTeamConfig* GetDefaultObj();

};

// 0x30 (0x70 - 0x40)
// Class Valhalla.ValBotFilledTeamConfig
class UValBotFilledTeamConfig : public UValTeamConfig
{
public:
	TSoftObjectPtr<class UValBotData>            BotClassData;                                      // 0x40(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ExtraBotCount;                                     // 0x68(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSpawnBotsOnPlayerTeams;                           // 0x6C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_553A[0x3];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValBotFilledTeamConfig* GetDefaultObj();

};

// 0x8 (0x78 - 0x70)
// Class Valhalla.ValBotTeamOnlyConfig
class UValBotTeamOnlyConfig : public UValBotFilledTeamConfig
{
public:
	int32                                        ExtraBotTeamCount;                                 // 0x70(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_553B[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValBotTeamOnlyConfig* GetDefaultObj();

};

// 0x50 (0x78 - 0x28)
// Class Valhalla.ValOfflineQueueData
class UValOfflineQueueData : public UObject
{
public:
	TSoftObjectPtr<class UWorld>                 Map;                                               // 0x28(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class AGameModeBase>           GameModeOverride;                                  // 0x50(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValOfflineQueueData* GetDefaultObj();

	void ToTravelParameters(class FName* OutMapName, class FString* OutOptions);
};

// 0x130 (0x160 - 0x30)
// Class Valhalla.ValQueueData
class UValQueueData : public UPrimaryDataAsset
{
public:
	class FString                                QueueId;                                           // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EValQueueOnlineSupport            OnlineSupport;                                     // 0x40(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5542[0x3];                                     // Fixing Size After Last Property  
	int32                                        RequiredLevel;                                     // 0x44(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  Name;                                              // 0x48(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                  Description;                                       // 0x60(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             Icon;                                              // 0x78(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UValTeamConfig*>                TeamConfiguration;                                 // 0xA0(0x10)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UValOfflineQueueData*                  OfflineData;                                       // 0xB0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class UValBotTierData*>          BotData;                                           // 0xB8(0x50)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<int32, class UValBotTierData*>          PlayerBotData;                                     // 0x108(0x50)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class AValGameMode>              GameModeClass;                                     // 0x158(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValQueueData* GetDefaultObj();

	class UValQueueData* GetQueueDataFromQueueId(const class FString& ID);
	int32 GetMaxPlayerCount();
	TArray<struct Valhalla_EntryRequirement> GetGameModeEntryRequirements();
	class UValBotTierData* GetBotTierData(int32 SkillRating, bool bPlayerBots);
};

// 0x10 (0x38 - 0x28)
// Class Valhalla.ValPendingQueue
class UValPendingQueue : public UObject
{
public:
	class UValQueueData*                         Queue;                                             // 0x28(0x8)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EQueueType                        Type;                                              // 0x30(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5547[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValPendingQueue* GetDefaultObj();

	void GetOfflineTravelParameters(class FName* OutMapName, class FString* OutOptions);
	class UValPendingQueue* CreatePendingQueue(class UObject* Outer, class UValQueueData* InQueue, enum class EQueueType InType);
};

// 0x10 (0x48 - 0x38)
// Class Valhalla.ValPendingQueue_Raid
class UValPendingQueue_Raid : public UValPendingQueue
{
public:
	class FName                                  MapOverride;                                       // 0x38(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SecurityLevel;                                     // 0x40(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        RandomSeedOverride;                                // 0x44(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValPendingQueue_Raid* GetDefaultObj();

	class UValPendingQueue_Raid* CreatePendingRaidQueue(class UObject* Outer, class UValQueueData* InQueue, enum class EQueueType InType, class FName& InMapOverride, int32 InSecurityLevel, int32 InRandomSeedOverride);
};

// 0x48 (0x70 - 0x28)
// Class Valhalla.ValRecipeConfig
class UValRecipeConfig : public UObject
{
public:
	uint8                                        Pad_554C[0x30];                                    // Fixing Size After Last Property  
	class UValRecipeGroup*                       RecipeGroup;                                       // 0x58(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_554D[0x10];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValRecipeConfig* GetDefaultObj();

	void OnRecipeGroupLoaded();
	void OnRecipeAssetsLoaded();
	void OnGameStateSet(class AGameStateBase* GameState);
};

// 0x20 (0x50 - 0x30)
// Class Valhalla.ValRecipeGroup
class UValRecipeGroup : public UDataAsset
{
public:
	TArray<struct Valhalla_CraftingRecipe>       CraftingRecipes;                                   // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_UpgradeRecipe>        UpgradeRecipes;                                    // 0x40(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValRecipeGroup* GetDefaultObj();

};

// 0x0 (0xA0 - 0xA0)
// Class Valhalla.ValReconClassComponent
class UValReconClassComponent : public UValClassComponentBase
{
public:

	static class UClass* StaticClass();
	static class UValReconClassComponent* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class Valhalla.ValRepairToolExecutionCalc
class UValRepairToolExecutionCalc : public UGameplayEffectExecutionCalculation
{
public:

	static class UClass* StaticClass();
	static class UValRepairToolExecutionCalc* GetDefaultObj();

};

// 0x160 (0x6D0 - 0x570)
// Class Valhalla.ValReplicationGraph
class UValReplicationGraph : public UReplicationGraph
{
public:
	TArray<TSubclassOf<class UObject>>           AlwaysRelevantClasses;                             // 0x570(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UReplicationGraphNode_GridSpatialization2D* GridNode;                                          // 0x580(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReplicationGraphNode_ActorList*       AlwaysRelevantNode;                                // 0x588(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_554E[0xF0];                                    // Fixing Size After Last Property  
	TMap<int32, class UValReplicationGraphNode_TeamRelevant*> TeamOnlyNodes;                                     // 0x680(0x50)(NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UValReplicationGraph* GetDefaultObj();

};

// 0x218 (0x358 - 0x140)
// Class Valhalla.ValReplicationGraphNode_AlwaysRelevant_ForConnection
class UValReplicationGraphNode_AlwaysRelevant_ForConnection : public UReplicationGraphNode_AlwaysRelevant_ForConnection
{
public:
	uint8                                        Pad_554F[0x218];                                   // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValReplicationGraphNode_AlwaysRelevant_ForConnection* GetDefaultObj();

};

// 0x28 (0x78 - 0x50)
// Class Valhalla.ValReplicationGraphNode_PlayerStateFrequencyLimiter
class UValReplicationGraphNode_PlayerStateFrequencyLimiter : public UReplicationGraphNode
{
public:
	uint8                                        Pad_5550[0x28];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValReplicationGraphNode_PlayerStateFrequencyLimiter* GetDefaultObj();

};

// 0x20 (0xF0 - 0xD0)
// Class Valhalla.ValReplicationGraphNode_TeamRelevant
class UValReplicationGraphNode_TeamRelevant : public UReplicationGraphNode_ActorList
{
public:
	uint8                                        Pad_5552[0x20];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValReplicationGraphNode_TeamRelevant* GetDefaultObj();

	void OnTeamActorDestroyed(class AActor* Actor, enum class EEndPlayReason EndPlayReason);
};

// 0x50 (0x80 - 0x30)
// Class Valhalla.ValReputationTierData
class UValReputationTierData : public UPrimaryDataAsset
{
public:
	class FName                                  AssetId;                                           // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                DisplayName;                                       // 0x38(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         Enabled;                                           // 0x48(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5554[0x3];                                     // Fixing Size After Last Property  
	int32                                        Floor;                                             // 0x4C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Ceiling;                                           // 0x50(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_LinearColor               Color;                                             // 0x54(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5555[0x4];                                     // Fixing Size After Last Property  
	class UTexture2D*                            Icon;                                              // 0x68(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  PreviousTier;                                      // 0x70(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  NextTier;                                          // 0x78(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValReputationTierData* GetDefaultObj();

	class UValReputationTierData* GetReputationTierFromReputationValue(int32 Reputation);
	class UValReputationTierData* GetReputationTierFromId(class FName& ID);
};

// 0x128 (0x3C0 - 0x298)
// Class Valhalla.ValRespawnPoint
class AValRespawnPoint : public AActor
{
public:
	uint8                                        Pad_5562[0x10];                                    // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnRespawnPointStateChanged;                        // 0x2A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USceneComponent*                       SceneComponent;                                    // 0x2B8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                      InteractCollisionComp;                             // 0x2C0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                  InteractText;                                      // 0x2C8(0x18)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                        RespawnChannelDuration;                            // 0x2E0(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DogtagRespawnChannelDuration;                      // 0x2E4(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_RespawnCompleteTime;                             // 0x2E8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_RespawnChannelDuration;                          // 0x2EC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValCharacter*                         R_CachedChanneler;                                 // 0x2F0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ERespawnPointState                R_State;                                           // 0x2F8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5564[0x3];                                     // Fixing Size After Last Property  
	float                                        InteractChannelTime;                               // 0x2FC(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DogtagInteractChannelTime;                         // 0x300(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValCharacter>          CachedInitiator;                                   // 0x304(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5565[0x4];                                     // Fixing Size After Last Property  
	TSubclassOf<class UGameplayEffect>           DefaultRespawnEffect;                              // 0x310(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5566[0x4];                                     // Fixing Size After Last Property  
	float                                        RespawnShieldPercentage;                           // 0x31C(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ModShieldPercentageBonus;                          // 0x320(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RespawnHealthPercentage;                           // 0x324(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ModHealthPercentageBonus;                          // 0x328(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ModTotalRegenPercentageBonus;                      // 0x32C(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ModRespawnRegenDuration;                           // 0x330(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5567[0x4];                                     // Fixing Size After Last Property  
	TSubclassOf<class UGameplayEffect>           DefaultRespawnRegenEffect;                         // 0x338(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bRequiresDogTags;                                  // 0x340(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5568[0x1F];                                    // Fixing Size After Last Property  
	TArray<class AValCharacter*>                 CharactersThatCanInteract;                         // 0x360(0x10)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class AValPlayerState*                       PlayerToRespawn;                                   // 0x370(0x8)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        CreditCost;                                        // 0x378(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5569[0x4];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnRespawnFailed;                                   // 0x380(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnRespawnCompleted;                                // 0x390(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_556A[0x20];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValRespawnPoint* GetDefaultObj();

	void UpdateState(enum class ERespawnPointState Value);
	void TryToSelfRevive(class AValCharacter* Initiator);
	void TryToRespawn(class AValCharacter* Initiator);
	void SetState(enum class ERespawnPointState NewState);
	void SetRespawnCompleteTime(float RespawnCompleteTime);
	void SetCachedChanneler(class AValCharacter* Initiator);
	void OnRep_State();
	void OnRep_RespawnCompleteTime();
	void OnChannelingUpdated(class AValCharacter* Initiator, bool bStatus);
	void MulticastChannelingUpdated(class AValCharacter* Initiator, bool bStatus);
	void Interact(class AValCharacter* Initiator);
	bool HasReviviablePlayer(class AValCharacter* Initiator);
	enum class ERespawnPointState GetState();
	struct CoreUObject_Vector GetRespawnLocation();
	class FText GetInteractText();
	class UPrimitiveComponent* GetInteractComponent();
	float GetChannelTime(class AValCharacter* Initiator);
	class AValCharacter* GetCachedChanneler();
	enum class EInteractionFailureType GetBlockInteractReason(class AValCharacter* Initiator);
	bool ExtraInteractChecks(class AValCharacter* Initiator);
	void EventRespawnCompleteTimeChanged(float RespawnCompleteTime);
	void DoRespawn();
	bool CanInteract(class AValCharacter* Initiator);
};

// 0x140 (0x510 - 0x3D0)
// Class Valhalla.ValReviveBeacon
class AValReviveBeacon : public AValAttributeActor
{
public:
	uint8                                        Pad_5584[0x8];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnRespawnPlayerSet;                                // 0x3D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnRespawnCompleteTimeChanged;                      // 0x3E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLifetimeEndChanged;                              // 0x3F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnReviveBeaconStateChanged;                        // 0x408(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnRespawnInProgress;                               // 0x418(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AValPlayerState*                       R_PlayerToRespawn;                                 // 0x428(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RespawnTime;                                       // 0x430(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_RespawnCompleteTime;                             // 0x434(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_LifetimeEndTime;                                 // 0x438(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5585[0x14];                                    // Fixing Size After Last Property  
	float                                        RevivePossibleLifetime;                            // 0x450(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5586[0x4];                                     // Fixing Size After Last Property  
	TSubclassOf<class UGameplayEffect>           DefaultRespawnEffect;                              // 0x458(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EReviveBeaconState                R_BeaconState;                                     // 0x460(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5587[0x3];                                     // Fixing Size After Last Property  
	float                                        RespawnShieldPercentage;                           // 0x464(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ModShieldPercentageBonus;                          // 0x468(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RespawnHealthPercentage;                           // 0x46C(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ModHealthPercentageBonus;                          // 0x470(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ModTotalRegenPercentageBonus;                      // 0x474(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ModRespawnRegenDuration;                           // 0x478(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5588[0x4];                                     // Fixing Size After Last Property  
	TSubclassOf<class UGameplayEffect>           DefaultRespawnRegenEffect;                         // 0x480(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCanEnemiesInteractToDestroy;                      // 0x488(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bRequiresDogTags;                                  // 0x489(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCanReviveWithDogTagsInCrate;                      // 0x48A(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bOwnerDogTagsInCrate;                            // 0x48B(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5589[0x4];                                     // Fixing Size After Last Property  
	class UStaticMeshComponent*                  DefaultStaticMesh;                                 // 0x490(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                      InteractCollisionComp;                             // 0x498(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                  InteractText;                                      // 0x4A0(0x18)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class AValCharacter*                         R_CachedChanneler;                                 // 0x4B8(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ReviveChannelTime;                                 // 0x4C0(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        EnemyChannelTime;                                  // 0x4C4(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    ChannelTimerHandle;                                // 0x4C8(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              RequiredEffectTag;                                 // 0x4D0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>           EffectToRemove;                                    // 0x4D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bReviveTriggeredByBeacon;                        // 0x4E0(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_558A[0x1F];                                    // Fixing Size After Last Property  
	TArray<class AValCharacter*>                 CharactersThatCanInteract;                         // 0x500(0x10)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValReviveBeacon* GetDefaultObj();

	void UpdateLocalVisibility();
	void TryToRespawn(class AValCharacter* Initiator);
	void StartChanneledInteract(class AValCharacter* Initiator);
	bool ShouldShowOnMinimap(class AValPlayerController* Controller);
	bool ShouldBeVisibleToLocalPlayer();
	void SetPlayerToRespawn(class AValPlayerState* PlayerState);
	void SetCachedChanneler(class AValCharacter* Initiator);
	void SetBeaconState(enum class EReviveBeaconState State);
	void OnReviveInProgress(bool Value, float RespawnCompleteTime);
	void OnRep_RespawnCompleteTime();
	void OnRep_PlayerToRespawn();
	void OnRep_OwnerDogTagsInCrate();
	void OnRep_LifetimeEndTime();
	void OnRep_BeaconState();
	void OnPlayerDeathCrateInventoryChanged();
	void OnLocalPlayerRevivableTeammatesChanged(class AValPlayerState* LocalPlayerState);
	void OnFrontierStateChanged(enum class EFrontierState FrontierState);
	void OnChannelingUpdated(class AValCharacter* Initiator, bool bStatus);
	void MulticastChannelingUpdated(class AValCharacter* Initiator, bool bStatus);
	void LifetimeExpired();
	bool IsFriendlyWithLocalViewTarget();
	void Interact(class AValCharacter* Initiator);
	bool GetShowOnMinimap(class AValPlayerController* Controller);
	bool GetReviveTriggeredByBeacon();
	float GetRespawnPossibleLifetime();
	struct CoreUObject_Vector GetRespawnLocation();
	enum class EInteractType GetInteractType();
	class FText GetInteractText();
	int32 GetInteractPriority();
	class UPrimitiveComponent* GetInteractComponent();
	class UStaticMeshComponent* GetDefaultStaticMesh();
	float GetChannelTime(class AValCharacter* Initiator);
	class AValCharacter* GetCachedChanneler();
	enum class EInteractionFailureType GetBlockInteractReason(class AValCharacter* Initiator);
	enum class EReviveBeaconState GetBeaconState();
	void EventRespawnCompleteTimeChanged(float RespawnCompleteTime);
	void EndChanneledInteract(class AValCharacter* Initiator);
	void DoRespawn();
	bool CanInteract(class AValCharacter* Initiator);
	void CancelRespawn();
};

// 0x60 (0x5B0 - 0x550)
// Class Valhalla.ValRHWidget
class UValRHWidget : public URHWidget
{
public:
	uint8                                        bPreventFlushPressedKeysOnFocusChangeEvent : 1;    // Mask: 0x1, PropSize: 0x10x550(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1A4 : 7;                                    // Fixing Bit-Field Size  
	bool                                         RegisterForBindings;                               // 0x551(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bMouseInputWhenNotFocusable;                       // 0x552(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_558B[0x5];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_UIPanelJiggleInstance> ActiveJiggles;                                     // 0x558(0x10)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UValInputBlocker>       InputBlockerConfig;                                // 0x568(0x28)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                          ActionsBlocked;                                    // 0x590(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                          AxesBlocked;                                       // 0x5A0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValRHWidget* GetDefaultObj();

	void UnblockConfiguredInputs();
	void StopListeningForInputAxis(class FName AxisName);
	void StartNewJiggle(class UUIJiggle* NewJiggle, class UCanvasPanel* CanvasToJiggle);
	void OnBindingReady(enum class EBindingType Type);
	void NullAxis(float Value);
	void NullAction();
	void ListenForInputAxis(class FName AxisName, FDelegateProperty_ Callback);
	void BlockConfiguredInputs();
	void BindingReady(enum class EBindingType Type);
};

// 0x180 (0x418 - 0x298)
// Class Valhalla.ValRoyaleFogVolume
class AValRoyaleFogVolume : public AActor
{
public:
	FMulticastInlineDelegateProperty_            OnCurrentData;                                     // 0x298(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEndLocation;                                     // 0x2A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEndRadius;                                       // 0x2B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnWaitPhaseEndTime;                                // 0x2C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPhaseEndTime;                                    // 0x2D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnWaitTimeStart;                                   // 0x2E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnWaitTimeEnd;                                     // 0x2F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPhaseStart;                                      // 0x308(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPhaseEnd;                                        // 0x318(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bFogEnabled;                                       // 0x328(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_558C[0x7];                                     // Fixing Size After Last Property  
	class UMaterialParameterCollection*          FogMPC;                                            // 0x330(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialParameterCollectionInstance*  FogMPCInst;                                        // 0x338(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  FogMPCCenterRadiusGridParam;                       // 0x340(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>           FogDamageEffect;                                   // 0x348(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              FogDamageTag;                                      // 0x350(0x8)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    PlayerDamageTimer;                                 // 0x358(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_558D[0x48];                                    // Fixing Size After Last Property  
	struct Valhalla_CurrentFogCircleData         R_CurrentData;                                     // 0x3A8(0x20)(Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct Engine_Vector_NetQuantize             R_EndLocation;                                     // 0x3C8(0x18)(Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_EndRadius;                                       // 0x3E0(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_WaitPhaseEndTime;                                // 0x3E4(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_PhaseEndTime;                                    // 0x3E8(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CurrentTime;                                       // 0x3EC(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bWaitPhaseActive;                                  // 0x3F0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_558E[0x7];                                     // Fixing Size After Last Property  
	struct CoreUObject_Vector                    PhaseStartLocation;                                // 0x3F8(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PhaseStartRadius;                                  // 0x410(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_558F[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValRoyaleFogVolume* GetDefaultObj();

	void OnRep_WaitPhaseEndTime();
	void OnRep_PhaseEndTime();
	void OnRep_EndRadius();
	void OnRep_EndLocation();
	void OnRep_CurrentData();
	float GetWaitPhaseEndTime();
	float GetPhaseEndTime();
	float GetEndRadius();
	struct CoreUObject_Vector GetEndLocation();
	struct Valhalla_CurrentFogCircleData GetCurrentData();
	void EnableFog(bool bEnabled);
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValScannable
class IValScannable : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IValScannable* GetDefaultObj();

	void AddScanner(int32 Amount);
};

// 0x60 (0x2F8 - 0x298)
// Class Valhalla.ValScanPoint
class AValScanPoint : public AActor
{
public:
	uint8                                        Pad_5592[0x8];                                     // Fixing Size After Last Property  
	class USceneComponent*                       SceneComponent;                                    // 0x2A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                      InteractCollisionComp;                             // 0x2A8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                  InteractText;                                      // 0x2B0(0x18)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int32                                        CreditCost;                                        // 0x2C8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5593[0x4];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnSurveyInteractFailed;                            // 0x2D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_5594[0x18];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValScanPoint* GetDefaultObj();

	void Interact(class AValCharacter* Initiator);
	class FText GetInteractText();
	class UPrimitiveComponent* GetInteractComponent();
	bool CanInteract(class AValCharacter* Initiator);
};

// 0x0 (0xC8 - 0xC8)
// Class Valhalla.ValSettingsSubsystem
class UValSettingsSubsystem : public URH_SettingsSubsystem
{
public:

	static class UClass* StaticClass();
	static class UValSettingsSubsystem* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class Valhalla.ValShieldRegenExecutionCalc
class UValShieldRegenExecutionCalc : public UGameplayEffectExecutionCalculation
{
public:

	static class UClass* StaticClass();
	static class UValShieldRegenExecutionCalc* GetDefaultObj();

};

// 0x0 (0x138 - 0x138)
// Class Valhalla.ValShippingConsole
class UValShippingConsole : public URHShippingConsole
{
public:

	static class UClass* StaticClass();
	static class UValShippingConsole* GetDefaultObj();

};

// 0x230 (0x528 - 0x2F8)
// Class Valhalla.ValShopManager
class AValShopManager : public AValDataManager
{
public:
	FMulticastInlineDelegateProperty_            OnSuitSkinsUpdated;                                // 0x2F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnWeaponSkinsUpdated;                              // 0x308(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnShopPurchaseResponse;                            // 0x318(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_55AA[0xC8];                                    // Fixing Size After Last Property  
	TArray<struct Valhalla_InventoryItem>        R_DailySuits;                                      // 0x3F0(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_InventoryItem>        R_DailyWeapons;                                    // 0x400(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	int32                                        DailySuitCount;                                    // 0x410(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        DailyWeaponCount;                                  // 0x414(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        ShopDailyItemId;                                   // 0x418(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        ShopDailyLootId;                                   // 0x41C(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        DailySuitId;                                       // 0x420(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        DailyWeaponId;                                     // 0x424(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<int32, int32>                           ShopToItemIdMap;                                   // 0x428(0x50)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<int32, struct Valhalla_ShopPrice>       ItemPrices;                                        // 0x478(0x50)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UCosmeticGenerator*                    CosmeticGenerator;                                 // 0x4C8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCustomNameGenerator*                  CustomNameGenerator;                               // 0x4D0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct GameplayTags_GameplayTag, TSoftObjectPtr<class UDataAsset>> WeaponTypeModels;                                  // 0x4D8(0x50)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValShopManager* GetDefaultObj();

	void ServerRequestShopItems();
	void ServerPurchaseDailyId(struct CoreUObject_Guid& DailyId);
	void PurchaseInventoryId(int64 InventoryId);
	void PurchaseDailyId(struct CoreUObject_Guid& DailyId);
	void OnWeaponAssetsLoaded();
	void OnSuitAssetsLoaded();
	void OnShopItemsLoaded();
	void OnRep_DailyWeapons();
	void OnRep_DailySuits();
	void GetWeaponSkins(TArray<struct Valhalla_InventoryItem>* WeaponSkins);
	bool GetWeaponSkinAt(int32 Index, struct Valhalla_InventoryItem* WeaponSkin);
	void GetSuitSkins(TArray<struct Valhalla_InventoryItem>* SuitSkins);
	bool GetSuitSkinAt(int32 Index, struct Valhalla_InventoryItem* SuitSkin);
	bool GetShopPrice(int32 ItemId, struct Valhalla_ShopPrice* ShopPrice);
	void GetDailyWeapons(TArray<struct Valhalla_InventoryItem>* WeaponSkins);
	bool GetDailyWeaponAt(int32 Index, struct Valhalla_InventoryItem* DailyWeapon);
	void GetDailySuits(TArray<struct Valhalla_InventoryItem>* SuitSkins);
	bool GetDailySuitAt(int32 Index, struct Valhalla_InventoryItem* DailySuit);
	void ClientPurchaseResponse(struct CoreUObject_Guid& InventoryId, enum class EShopPurchaseResponse Response);
};

// 0x40 (0x70 - 0x30)
// Class Valhalla.CosmeticGenerator
class UCosmeticGenerator : public UDataAsset
{
public:
	TArray<struct Valhalla_CosmeticGroup>        SuitGroups;                                        // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_CosmeticGroup>        WeaponGroups;                                      // 0x40(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTagContainer     WeaponTypes;                                       // 0x50(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UCosmeticGenerator* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class Valhalla.CustomNameGenerator
class UCustomNameGenerator : public UDataAsset
{
public:
	TArray<class FText>                          Names;                                             // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UCustomNameGenerator* GetDefaultObj();

};

// 0x0 (0x2D0 - 0x2D0)
// Class Valhalla.ValShopVolume
class AValShopVolume : public AVolume
{
public:

	static class UClass* StaticClass();
	static class AValShopVolume* GetDefaultObj();

};

// 0x0 (0x2E0 - 0x2E0)
// Class Valhalla.ValSkydiveVolume
class AValSkydiveVolume : public APhysicsVolume
{
public:

	static class UClass* StaticClass();
	static class AValSkydiveVolume* GetDefaultObj();

};

// 0x20 (0x490 - 0x470)
// Class Valhalla.ValSmoothProgressBar
class UValSmoothProgressBar : public UProgressBar
{
public:
	class UCurveFloat*                           InterpolationCurve;                                // 0x470(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InitialValue;                                      // 0x478(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TargetValue;                                       // 0x47C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsInterpolating;                                  // 0x480(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55AD[0x3];                                     // Fixing Size After Last Property  
	float                                        InterpProgress;                                    // 0x484(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        CachedDuration;                                    // 0x488(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_55AE[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValSmoothProgressBar* GetDefaultObj();

	void StopSmoothProgress();
	void SetSmoothProgress(float NewValue);
};

// 0x20 (0x348 - 0x328)
// Class Valhalla.ValSocialHubBeaconClient
class AValSocialHubBeaconClient : public AOnlineBeaconClient
{
public:
	uint8                                        Pad_55AF[0x20];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValSocialHubBeaconClient* GetDefaultObj();

	void ServerVerifyGameVersion(const class FString& ClientVersion);
	void ClientGameVersionVerified(bool VersionValid);
};

// 0x0 (0x2C0 - 0x2C0)
// Class Valhalla.ValSocialHubBeaconHost
class AValSocialHubBeaconHost : public AOnlineBeaconHostObject
{
public:

	static class UClass* StaticClass();
	static class AValSocialHubBeaconHost* GetDefaultObj();

};

// 0x8 (0x350 - 0x348)
// Class Valhalla.ValSpectatorPawn
class AValSpectatorPawn : public ASpectatorPawn
{
public:
	bool                                         bIsNoClipSpectator;                                // 0x348(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAllowsMovement;                                   // 0x349(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55B0[0x6];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValSpectatorPawn* GetDefaultObj();

	void SpectatePrev();
	void SpectateNext();
};

// 0x10 (0x40 - 0x30)
// Class Valhalla.ValSpreadPattern
class UValSpreadPattern : public UDataAsset
{
public:
	TArray<struct CoreUObject_Vector2D>          Pattern;                                           // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValSpreadPattern* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Valhalla.ValStoreItem
class UValStoreItem : public URHStoreItem
{
public:

	static class UClass* StaticClass();
	static class UValStoreItem* GetDefaultObj();

};

// 0x0 (0x2B0 - 0x2B0)
// Class Valhalla.ValStoreItemHelper
class UValStoreItemHelper : public URHStoreItemHelper
{
public:

	static class UClass* StaticClass();
	static class UValStoreItemHelper* GetDefaultObj();

};

// 0x0 (0x550 - 0x550)
// Class Valhalla.ValStoreWidget
class UValStoreWidget : public URHStoreWidget
{
public:

	static class UClass* StaticClass();
	static class UValStoreWidget* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class Valhalla.ValSuicideExecutionCalc
class UValSuicideExecutionCalc : public UGameplayEffectExecutionCalculation
{
public:

	static class UClass* StaticClass();
	static class UValSuicideExecutionCalc* GetDefaultObj();

};

// 0x30 (0x210 - 0x1E0)
// Class Valhalla.ValSupportComponent
class UValSupportComponent : public UValThreatComponent
{
public:
	TArray<struct GameplayTags_GameplayTag>      IgnoreAlliesOfType;                                // 0x1E0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                         bUniqueAllySupport;                                // 0x1F0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55B2[0x3];                                     // Fixing Size After Last Property  
	float                                        SearchRadius;                                      // 0x1F4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55B3[0x8];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnHasAlliesUpdated;                                // 0x200(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValSupportComponent* GetDefaultObj();

	void OnAllyDied(float RespawnTimer, class AValCharacter* Pawn);
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValTargetType
class UValTargetType : public UObject
{
public:

	static class UClass* StaticClass();
	static class UValTargetType* GetDefaultObj();

	void GetTargets(class AValCharacter* TargetingCharacter, class AActor* TargetingActor, const struct GameplayAbilities_GameplayEventData& EventData, TArray<struct GameplayAbilities_GameplayAbilityTargetDataHandle>* OutTargetData, TArray<struct Engine_HitResult>* OutHitResults, TArray<class AActor*>* OutActors);
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValTargetType_UseOwner
class UValTargetType_UseOwner : public UValTargetType
{
public:

	static class UClass* StaticClass();
	static class UValTargetType_UseOwner* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValTargetType_UseEventData
class UValTargetType_UseEventData : public UValTargetType
{
public:

	static class UClass* StaticClass();
	static class UValTargetType_UseEventData* GetDefaultObj();

};

// 0x1B0 (0x478 - 0x2C8)
// Class Valhalla.ValTeamState
class AValTeamState : public ATeamState
{
public:
	uint8                                        Pad_55BB[0x10];                                    // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnMatchPlace;                                      // 0x2D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMissionChanged;                                  // 0x2E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMissionStateChanged;                             // 0x2F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMissionScoreChanged;                             // 0x308(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMissionTimerChanged;                             // 0x318(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPreRoundTimerChanged;                            // 0x328(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMissionEnemiesChanged;                           // 0x338(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnObjectivePointChanged;                           // 0x348(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMissionDescriptionChanged;                       // 0x358(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTeamLivesRemaining;                              // 0x368(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMemberDeathStateUpdated;                         // 0x378(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTeamEliminated;                                  // 0x388(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AValUtopiaMissionState*                MissionState;                                      // 0x398(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MissionWins;                                       // 0x3A0(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MissionScore;                                      // 0x3A4(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MissionTimer;                                      // 0x3A8(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        PreRoundTimer;                                     // 0x3AC(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  MissionRowName;                                    // 0x3B0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MissionWinningScore;                               // 0x3B8(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_MatchPlace;                                      // 0x3BC(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bTeamEliminated;                                 // 0x3C0(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55BC[0x57];                                    // Fixing Size After Last Property  
	TArray<class AValTeamState*>                 MissionEnemies;                                    // 0x418(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	class AValUtopiaObjectivePoint*              ObjectivePoint;                                    // 0x428(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                  MissionDescription;                                // 0x430(0x18)(BlueprintVisible, Net, RepNotify, Protected, NativeAccessSpecifierProtected)
	enum class ESecurityLevel                    MaxSecurityLevelAccess;                            // 0x448(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55BD[0x3];                                     // Fixing Size After Last Property  
	int32                                        R_TeamLivesRemaining;                              // 0x44C(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bIsScrubTeam;                                    // 0x450(0x1)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55BE[0x1F];                                    // Fixing Size After Last Property  
	class UValSquad*                             BotSquad;                                          // 0x470(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValTeamState* GetDefaultObj();

	void UpdateMemberDead(bool bDead);
	void SetTeamLivesRemaining(int32 Value);
	void SetPreRoundTimer(int32 Value);
	void SetMissionTimer(int32 Value);
	void SetMissionState(class AValUtopiaMissionState* NewMissionState);
	void SetMissionScore(int32 Value);
	void SetMission(class AValUtopiaMission* Mission);
	void SetMaxSecurityLevelAccess(enum class ESecurityLevel SecurityLevel);
	void SetIsScrubTeam(bool bValue);
	void RemoveAllReviveBeacons();
	void OnTeamStateChanged();
	void OnTeamStateChange__DelegateSignature(class AValTeamState* PTeamState);
	void OnRep_TeamLivesRemaining();
	void OnRep_TeamEliminated();
	void OnRep_PreRoundTimer();
	void OnRep_ObjectivePoint(class AValUtopiaObjectivePoint* OldObjectivePoint);
	void OnRep_MissionTimer();
	void OnRep_MissionState();
	void OnRep_MissionScore();
	void OnRep_MissionEnemies();
	void OnRep_MissionDescription();
	void OnRep_Mission();
	void OnRep_MatchPlace();
	void OnRep_IsScrubTeam();
	void NotifyMissionComplete(bool Winner);
	void Multicast_OnUpdateMemberDeathState();
	bool IsSpectatedTeamState();
	bool IsScrubTeam();
	bool IsLocalTeamState();
	bool IsEliminated();
	int32 GetTeamLivesRemaining();
	void GetRevivablePlayers(TArray<class AValPlayerState_Frontier*>* RevivablePlayers);
	int32 GetRespawningPlayerNum();
	int32 GetPlayerCount();
	class UValSquad* GetOrCreateBotSquad();
	class AValUtopiaObjectivePoint* GetObjectivePoint();
	int32 GetNumRevivablePlayers();
	int32 GetNonEliminatedPlayerNum();
	int32 GetMissionWins();
	int32 GetMissionScore();
	enum class ESecurityLevel GetMaxSecurityLevelAccess();
	int32 GetMatchPlace();
	int32 GetLivingPlayerNum();
	int32 GetDeadPlayerNum();
	class UValSquad* GetBotSquad();
	struct CoreUObject_Vector GetAverageLocation();
	void CacheAverageLocation();
	void AddMissionWin();
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValThrowable
class IValThrowable : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IValThrowable* GetDefaultObj();

};

// 0x98 (0xC8 - 0x30)
// Class Valhalla.ValDivisionConfig
class UValDivisionConfig : public UPrimaryDataAsset
{
public:
	TSoftObjectPtr<class UTexture2D>             DivisionIcon;                                      // 0x30(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialInterface>     Material;                                          // 0x58(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        EntryCost;                                         // 0x80(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        DivisionNumber;                                    // 0x84(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         Enabled;                                           // 0x88(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55BF[0x3];                                     // Fixing Size After Last Property  
	class FName                                  AssetId;                                           // 0x8C(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55C0[0x4];                                     // Fixing Size After Last Property  
	class FText                                  DisplayName;                                       // 0x98(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                  Description;                                       // 0xB0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValDivisionConfig* GetDefaultObj();

};

// 0x130 (0x160 - 0x30)
// Class Valhalla.ValTierConfig
class UValTierConfig : public UPrimaryDataAsset
{
public:
	struct CoreUObject_LinearColor               Color;                                             // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_LinearColor               TextColor;                                         // 0x40(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_LinearColor               ColorLight;                                        // 0x50(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_LinearColor               ColorDark;                                         // 0x60(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>             TierIcon;                                          // 0x70(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class USkeletalMesh>          JetpackMesh;                                       // 0x98(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UValJetpackMeshData>    JetpackMeshData;                                   // 0xC0(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UValDivisionConfig*>            Divisions;                                         // 0xE8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                         Enabled;                                           // 0xF8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55C2[0x3];                                     // Fixing Size After Last Property  
	class FName                                  AssetId;                                           // 0xFC(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55C3[0x4];                                     // Fixing Size After Last Property  
	class FText                                  DisplayRank;                                       // 0x108(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                  DisplayName;                                       // 0x120(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                  Description;                                       // 0x138(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                         RankUpSound;                                       // 0x150(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundBase*                            MetaRankUpSound;                                   // 0x158(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValTierConfig* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class Valhalla.ValGameStatArchiver
class UValGameStatArchiver : public UDataAsset
{
public:
	enum class EGameStatType                     Type;                                              // 0x30(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55C5[0x3];                                     // Fixing Size After Last Property  
	int32                                        ItemId;                                            // 0x34(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MinValue;                                          // 0x38(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MaxValue;                                          // 0x3C(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValGameStatArchiver* GetDefaultObj();

};

// 0x60 (0x90 - 0x30)
// Class Valhalla.ValJetpackMeshData
class UValJetpackMeshData : public UDataAsset
{
public:
	class USkeletalMesh*                         Mesh;                                              // 0x30(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UValAnimInstance>          ABP;                                               // 0x38(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_JetpackThrustSocketAndFX> ThrustFX;                                          // 0x40(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_JetpackThrustSocketAndFX> StartFX;                                           // 0x50(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_JetpackThrustSocketAndFX> EndFX;                                             // 0x60(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UTexture2D*                            CurvatureTexture;                                  // 0x70(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            NormalTexture;                                     // 0x78(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>            MaterialOverrides;                                 // 0x80(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValJetpackMeshData* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class Valhalla.DataColorConfig
class UDataColorConfig : public UDataAsset
{
public:
	TArray<struct Valhalla_UIColorConfig>        ColorConfig;                                       // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UDataColorConfig* GetDefaultObj();

};

// 0x80 (0xB0 - 0x30)
// Class Valhalla.ValLootConfigData
class UValLootConfigData : public UDataAsset
{
public:
	int32                                        MinNumLootDrops;                                   // 0x30(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxNumLootDrops;                                   // 0x34(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UValLootAsset>          LootAsset;                                         // 0x38(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<enum class ERarity, int32>              RaritySpawnWeights;                                // 0x60(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValLootConfigData* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class Valhalla.ValAbilityConfigData
class UValAbilityConfigData : public UDataAsset
{
public:
	TArray<struct Valhalla_AbilityConfig>        Abilities;                                         // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValAbilityConfigData* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class Valhalla.ValWeaponCosmeticConfigData
class UValWeaponCosmeticConfigData : public UDataAsset
{
public:
	TArray<struct Valhalla_WeaponCosmeticConfig> WeaponCosmetics;                                   // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValWeaponCosmeticConfigData* GetDefaultObj();

};

// 0xB0 (0xE0 - 0x30)
// Class Valhalla.ValCharacterInputConfigData
class UValCharacterInputConfigData : public UDataAsset
{
public:
	class UInputAction*                          InputMove;                                         // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          InputLook;                                         // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          InputSki;                                          // 0x40(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          InputSprint;                                       // 0x48(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          InputSwapUp;                                       // 0x50(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          InputSwapDown;                                     // 0x58(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          InputSwapToMelee;                                  // 0x60(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          InputSwapToPrimary;                                // 0x68(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          InputSwapToSecondary;                              // 0x70(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          InputPing;                                         // 0x78(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          InputAbilitySlot4;                                 // 0x80(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          RadialGrenade;                                     // 0x88(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          InputPrimaryFire;                                  // 0x90(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          InputSecondaryFire;                                // 0x98(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          InputReload;                                       // 0xA0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          InputInteract;                                     // 0xA8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          InputAbilitySlot1;                                 // 0xB0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          InputAbilitySlot2;                                 // 0xB8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          InputCrouch;                                       // 0xC0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          InputCrouchToggle;                                 // 0xC8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          InputFlashlight;                                   // 0xD0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          InputRecall;                                       // 0xD8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValCharacterInputConfigData* GetDefaultObj();

};

// 0x18 (0x48 - 0x30)
// Class Valhalla.ValControllerInputConfigData
class UValControllerInputConfigData : public UDataAsset
{
public:
	class UInputMappingContext*                  InputMappingContext;                               // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          ToggleInventory;                                   // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                          SettingsMenu;                                      // 0x40(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValControllerInputConfigData* GetDefaultObj();

};

// 0x50 (0x80 - 0x30)
// Class Valhalla.ValMasteriesConfigData
class UValMasteriesConfigData : public UDataAsset
{
public:
	TMap<enum class EPlayerProperty, struct Valhalla_ValMasteryData> MasteryLevelData;                                  // 0x30(0x50)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValMasteriesConfigData* GetDefaultObj();

};

// 0x50 (0x80 - 0x30)
// Class Valhalla.ValStatModMap
class UValStatModMap : public UDataAsset
{
public:
	TMap<int32, class FString>                   StatMods;                                          // 0x30(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValStatModMap* GetDefaultObj();

};

// 0x20 (0x5D0 - 0x5B0)
// Class Valhalla.ValUIGameMinimapMarker
class UValUIGameMinimapMarker : public UValRHWidget
{
public:
	bool                                         bShouldClamp;                                      // 0x5B0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsClamped;                                        // 0x5B1(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsActive;                                         // 0x5B2(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55CC[0x5];                                     // Fixing Size After Last Property  
	class AActor*                                CachedActor;                                       // 0x5B8(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_Vector2D                  CachedLocation;                                    // 0x5C0(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValUIGameMinimapMarker* GetDefaultObj();

	void UpdateLocation(class UObject* WorldContextObject, const struct CoreUObject_Vector& ObjectiveLocation);
	void UpdateActorLocation(class UObject* WorldContextObject, class AActor* ObjectiveActor);
	void UpdateActive();
	bool IsActive();
};

// 0x40 (0x70 - 0x30)
// Class Valhalla.UIJiggle
class UUIJiggle : public UDataAsset
{
public:
	float                                        Duration;                                          // 0x30(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_55CE[0x4];                                     // Fixing Size After Last Property  
	struct CoreUObject_Vector2D                  Amplitude;                                         // 0x38(0x10)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_Vector2D                  Frequency;                                         // 0x48(0x10)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_Vector2D                  AdditiveScaleAmplitude;                            // 0x58(0x10)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRandomPhaseStartX;                                // 0x68(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRandomPhaseStartY;                                // 0x69(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_55D0[0x6];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UUIJiggle* GetDefaultObj();

};

// 0x10 (0x70 - 0x60)
// Class Valhalla.ValUIManagerSubsystem
class UValUIManagerSubsystem : public UGameUIManagerSubsystem
{
public:
	uint8                                        Pad_55D1[0x10];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValUIManagerSubsystem* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValUpgradableAbility
class IValUpgradableAbility : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IValUpgradableAbility* GetDefaultObj();

	void SetAbilityRange(float Value);
	void SetAbilityProjectileSpeed(float Value);
	void SetAbilityDuration(float Value);
	void SetAbilityDeployTime(float Value);
	void SetAbilityCastTime(float Value);
	float GetAbilityRange();
	float GetAbilityProjectileSpeed(float Value);
	TArray<TSubclassOf<class UGameplayEffect>> GetAbilityEffectsToApply();
	float GetAbilityDuration();
	float GetAbilityDeployTime();
	float GetAbilityCooldownModifier();
	float GetAbilityCastTime();
	void AddAbilityEffectToApply(TSubclassOf<class UGameplayEffect> Value);
};

// 0x50 (0x2E8 - 0x298)
// Class Valhalla.ValUtopiaBotSpawner
class AValUtopiaBotSpawner : public AActor
{
public:
	FMulticastInlineDelegateProperty_            OnBotSpawned;                                      // 0x298(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UBillboardComponent*                   SpriteComponent;                                   // 0x2A8(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UClass*                                BotClass;                                          // 0x2B0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        BotTeamNum;                                        // 0x2B8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55D7[0x4];                                     // Fixing Size After Last Property  
	class FString                                BotTeamUniqueId;                                   // 0x2C0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  BotTeamDefinition;                                 // 0x2D0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bApplyBotProfileData;                              // 0x2D8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55D8[0x3];                                     // Fixing Size After Last Property  
	float                                        SpawnInterval;                                     // 0x2DC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    SpawnTimerHandle;                                  // 0x2E0(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValUtopiaBotSpawner* GetDefaultObj();

	void SpawnBot();
	void Activate(bool Active);
};

// 0x58 (0x2F0 - 0x298)
// Class Valhalla.ValUtopiaMission
class AValUtopiaMission : public AActor
{
public:
	class AValUtopiaMissionState*                MissionState;                                      // 0x298(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AValUtopiaMissionState>    MissionStateClass;                                 // 0x2A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MissionTimeRemaining;                              // 0x2A8(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MissionTimeRemainingReplicated;                    // 0x2AC(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PreRoundTimeRemaining;                             // 0x2B0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        PreRoundTimeRemainingReplicated;                   // 0x2B4(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MissionDuration;                                   // 0x2B8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55EB[0x4];                                     // Fixing Size After Last Property  
	class AValUtopiaObjectivePoint*              ObjectivePoint;                                    // 0x2C0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AValTeamState*>                 Teams;                                             // 0x2C8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FName                                  DataRowName;                                       // 0x2D8(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        WinningScore;                                      // 0x2E0(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        NumRequiredTeams;                                  // 0x2E4(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinObjectivePointVisibilityDistanceSq;             // 0x2E8(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EMissionWinCondition              WinCondition;                                      // 0x2EC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55EC[0x3];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValUtopiaMission* GetDefaultObj();

	bool TickDownPreRoundTimer(float DeltaTime);
	bool TickDownMissionTimer(float DeltaTime);
	void StartMission();
	void SetTeamScore(int32 TeamNumber, int32 TeamScore, bool* Found);
	class AActor* SelectPlayerStart(TArray<class AActor*>& ValidPlayerStarts);
	void OnStartMission();
	void OnMissionTimerFinished();
	void OnMissionTimeOverridden(float OldTime, float NewTime);
	void OnEndMission();
	void OnBeginPreRound(float PreRoundTime);
	bool IsValidMission();
	bool IsPlayerAssignedToMission(class APlayerController* Player);
	bool HasTeam(int32 TeamNum);
	class AValTeamState* GetWinningTeam(TArray<class AValTeamState*>* LosingTeams);
	int32 GetTeamScore(int32 TeamNumber, bool* Found);
	TArray<int32> GetTeamNums();
	class AValTeamState* GetTeam(int32 TeamNum);
	int32 GetNumRequiredTeams();
	void GetEnemyTeams(class AValTeamState* OtherTeam, TArray<class AValTeamState*>* EnemyTeams);
	void GetDataRowName(class FName* RowName);
	void GetAssignedPlayers(TArray<class AValPlayerController*>* OutPlayers);
	void EndMission();
	void BeginPreRound(float PreRoundTime);
};

// 0x18 (0x2B0 - 0x298)
// Class Valhalla.ValUtopiaMissionState
class AValUtopiaMissionState : public AInfo
{
public:
	FMulticastInlineDelegateProperty_            OnMissionPhaseChanged;                             // 0x298(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	enum class EMissionPhase                     MissionPhase;                                      // 0x2A8(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55ED[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValUtopiaMissionState* GetDefaultObj();

	void OnRep_MissionPhase();
};

// 0x28 (0x2D8 - 0x2B0)
// Class Valhalla.ValUtopiaMissionState_Domination
class AValUtopiaMissionState_Domination : public AValUtopiaMissionState
{
public:
	FMulticastInlineDelegateProperty_            OnObjectivePointDataArrayUpdated;                  // 0x2B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_DominationPointData>  ObjectivePointDataArray;                           // 0x2C0(0x10)(BlueprintVisible, Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	float                                        CaptureTime;                                       // 0x2D0(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55EE[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValUtopiaMissionState_Domination* GetDefaultObj();

	void OnRep_ObjectivePointDataArray();
};

// 0x48 (0x2E0 - 0x298)
// Class Valhalla.ValUtopiaObjectivePoint
class AValUtopiaObjectivePoint : public AActor
{
public:
	class UBillboardComponent*                   SpriteComponent;                                   // 0x298(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHasBeenUsed;                                      // 0x2A0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55F0[0x7];                                     // Fixing Size After Last Property  
	class AValUtopiaMission*                     CurrentMission;                                    // 0x2A8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AValPlayerStart*>               PlayerStarts;                                      // 0x2B0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	TArray<class AValUtopiaBotSpawner*>          BotSpawners;                                       // 0x2C0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	bool                                         bIsSubObjective;                                   // 0x2D0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55F1[0x3];                                     // Fixing Size After Last Property  
	float                                        CurrentRadius;                                     // 0x2D4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         R_bIsEnabled;                                      // 0x2D8(0x1)(Edit, BlueprintVisible, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_55F2[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValUtopiaObjectivePoint* GetDefaultObj();

	void SetHasBeenUsed(bool HasBeenUsed);
	void SetFogRadius(float Value);
	TArray<class AValPlayerStart*> GetPlayerStarts();
	bool GetHasBeenUsed();
	void EnableFog(bool Value);
};

// 0xD0 (0x368 - 0x298)
// Class Valhalla.ValVendingMachine
class AValVendingMachine : public AActor
{
public:
	uint8                                        Pad_55F4[0x8];                                     // Fixing Size After Last Property  
	class UStaticMeshComponent*                  Mesh;                                              // 0x2A0(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                      InteractCollisionComp;                             // 0x2A8(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  InteractText;                                      // 0x2B0(0x18)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                        UseTimeDelay;                                      // 0x2C8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        CreditCost;                                        // 0x2CC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<enum class EFabricatorShopType, int32>  ScrapCosts;                                        // 0x2D0(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                        Pad_55F6[0x4];                                     // Fixing Size After Last Property  
	bool                                         R_bShouldUseScrapCosts;                            // 0x324(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55F7[0x3];                                     // Fixing Size After Last Property  
	TArray<enum class EFabricatorShopType>       R_ScrapCostKeys;                                   // 0x328(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                R_ScrapCostValues;                                 // 0x338(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class AValCharacter*                         CachedInteractor;                                  // 0x348(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_55F8[0x18];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValVendingMachine* GetDefaultObj();

	void SetShouldUseScrapCosts(bool Value);
	void SetScrapCosts(TMap<enum class EFabricatorShopType, int32> UpdatedCosts);
	void ServerOnInteract();
	void PredictInteract(class AValCharacter* Initiator);
	void Interact(class AValCharacter* Initiator);
	class FText GetInteractText();
	class UPrimitiveComponent* GetInteractComponent();
	void ClientOnInteract();
	bool CheckCanInteract();
	bool CanInteract(class AValCharacter* Initiator);
};

// 0xC0 (0x358 - 0x298)
// Class Valhalla.ValVendorBase
class AValVendorBase : public AInfo
{
public:
	uint8                                        Pad_5622[0x18];                                    // Fixing Size After Last Property  
	TArray<struct Valhalla_VendorItem>           R_DynamicItems;                                    // 0x2B0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UValVendorRulesetBase>     R_RulesetClass;                                    // 0x2C0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValVendorRulesetBase*                 Ruleset;                                           // 0x2C8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5623[0x20];                                    // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnVendorRulesetClass;                              // 0x2F0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnVendorItemsUpdate;                               // 0x300(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPurchaseFail;                                    // 0x310(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UValVendorFilter*>              ItemFilters;                                       // 0x320(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFilterIconsLoad;                                 // 0x330(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_5624[0x10];                                    // Fixing Size After Last Property  
	TWeakObjectPtr<class AValVendorManager>      WeakVendorManager;                                 // 0x350(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValVendorBase* GetDefaultObj();

	bool ShouldEnforceCurrencyRequirements();
	bool ShouldEnforceCraftingRequirements();
	void ServerTryToSellFromFilter(const struct CoreUObject_SoftClassPath& StashFilter);
	void ServerSellItems(struct CoreUObject_Guid& OrderReferenceId, TArray<struct Valhalla_InventoryItem>& InventoryItems);
	void ServerSalvageItem(struct CoreUObject_Guid& OrderReferenceId, struct Valhalla_InventoryItem& InventoryItem);
	void ServerPurchaseItem(struct Valhalla_VendorItem& RequestedItem, int32 Quantity);
	void SellItems(struct CoreUObject_Guid& OrderReferenceId, TArray<struct Valhalla_InventoryItem>& InventoryItems);
	void SellItem(struct CoreUObject_Guid& OrderReferenceId, struct Valhalla_InventoryItem& InventoryItem, int32 Quantity);
	void SalvageItem(struct CoreUObject_Guid& OrderReferenceId, struct Valhalla_InventoryItem& InventoryItem);
	void PurchaseItem(struct Valhalla_VendorItem& RequestedItem, int32 Quantity);
	void OnVendorItemsLoaded();
	void OnVendorItemsLoadComplete();
	void OnRep_RulesetClass();
	void OnRep_DynamicItems();
	bool MeetsCurrencyRequirements(struct Valhalla_VendorItem& InVendorItem, int32 Quantity);
	bool MeetsCraftingRequirements(struct Valhalla_VendorItem& InVendorItem, int32 Quantity);
	bool ItemShouldBeFilteredOut(struct Valhalla_VendorItem& InVendorItem);
	void GetVendorItems(TArray<struct Valhalla_VendorItem>* OutItems);
	class FString GetVendorId();
	class FText GetVendorDisplayName();
	class FText GetVendorDescription();
	void GetSortedVendorItems(enum class EItemSortOrder SortType, TArray<struct Valhalla_VendorItem>* OutItems);
	struct Valhalla_ShopItemPrice GetSellPrice(struct Valhalla_InventoryItem& InInventoryItem, int32 Quantity);
	int32 GetPreferredCurrencyItemId();
	class UValPlayerInventory* GetPlayerInventory();
	bool GetItemSalvageRecipeById(int32 ItemId, enum class ERarity Rarity, TMap<int32, int32>* OutRecipe);
	bool GetItemSalvageRecipe(struct Valhalla_VendorItem& Item, TMap<int32, int32>* OutRecipe);
	bool GetItemCraftingRecipe(struct Valhalla_VendorItem& Item, int32 Quantity, TMap<int32, int32>* OutRecipe);
	int32 GetInventorySellPrice(struct CoreUObject_Guid& InventoryId, int32 Count);
	int32 GetInventoryItemQuantity(int32 ItemId);
	void GetInventoryItemFromVendorItem(struct Valhalla_VendorItem& InVendorItem, struct Valhalla_InventoryItem* OutInventoryItem);
	struct Valhalla_ShopItemPrice GetCurrencyOwned();
	bool GetCraftingRecipeLimit(TMap<int32, int32>& CraftingRecipe, int32* Limit);
	void CreateFilters();
	bool ClientTryToSellFromFilter(class UValVendorStashFilter* StashFilter);
	void ClientNotifyPurchaseFail(enum class EPurchaseFailReason FailReason);
	bool CanSell(struct Valhalla_InventoryItem& InInventoryItem);
	bool CanPurchase(struct Valhalla_VendorItem& InVendorItem, enum class EPurchaseFailReason* OutFailReason, int32 Quantity);
	int32 CalcNumSellable(struct Valhalla_InventoryItem& InInventoryItem);
	int32 CalcNumPurchasable(struct Valhalla_VendorItem& InVendorItem);
};

// 0x30 (0x388 - 0x358)
// Class Valhalla.ValVendor
class AValVendor : public AValVendorBase
{
public:
	FMulticastInlineDelegateProperty_            OnExpirationDateUpdate;                            // 0x358(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnVendorItemLockStatusUpdated;                     // 0x368(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_5627[0x8];                                     // Fixing Size After Last Property  
	struct CoreUObject_DateTime                  R_ExpirationDate;                                  // 0x380(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValVendor* GetDefaultObj();

	void UpdateItemLockStatus(const struct GameplayTags_GameplayTag& LevelType, int32 Count);
	bool ShouldRegenerateAfterPurchase();
	bool ShouldHideItemProperties();
	void OnRep_ExpirationDate();
	void OnInventoryUpdated(TArray<int32>& ItemIds);
	void OnInventoryLoaded();
	enum class EItemGenerationMode GetItemGenerationMode();
	struct CoreUObject_DateTime GetExpirationDate();
	void BindToExperienceManager(class AValExperienceManager* ExperienceManager);
};

// 0x70 (0x368 - 0x2F8)
// Class Valhalla.ValVendorManager
class AValVendorManager : public AValDataManager
{
public:
	FMulticastInlineDelegateProperty_            OnPurchaseFailed;                                  // 0x2F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnVendorResponse;                                  // 0x308(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnVendorInventoryUpdated;                          // 0x318(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnVendorsReady;                                    // 0x328(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_5634[0x10];                                    // Fixing Size After Last Property  
	TWeakObjectPtr<class UValRecipeConfig>       WeakRecipeConfig;                                  // 0x348(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValVendorBase*                        CurrentlyFocusedVendor;                            // 0x350(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AValVendorBase*>                R_Vendors;                                         // 0x358(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValVendorManager* GetDefaultObj();

	void UpgradeItem(struct Valhalla_InventoryItem& InventoryItem);
	void SetCurrentlyFocusedVendor(class AValVendorBase* FocusedVendor);
	void ServerUpgradeItem(struct Valhalla_InventoryItem& InventoryItem);
	void OnRep_Vendors();
	void OnRecipeConfigReady();
	bool IsStashFull();
	bool IsManagerReady();
	void GetVendors(TArray<class AValVendorBase*>* Vendors);
	class AValVendorBase* GetVendorById(const class FString& VendorId);
	bool GetUpgradeRecipe(struct Valhalla_InventoryItem& InventoryItem, struct Valhalla_UpgradeRecipe* OutUpgradeRecipe);
	class UValItemModAsset* GetItemModAssetById(int32 ItemId);
	class UValItemAsset* GetItemAssetById(int32 ItemId);
	class AValVendorBase* GetCurrentlyFocusedVendor();
	void ClientVendorResponse(struct CoreUObject_Guid& ClientRefId, enum class EVendorResponse Response);
	bool CanAffordUpgrade(struct Valhalla_InventoryItem& InventoryItem);
	int32 CalcNumQuerySetsMatchable(TArray<struct Valhalla_EquipmentQuery>& Queries);
	int32 CalcNumItemsOwnedFromQuery(struct Valhalla_EquipmentQuery& Query);
};

// 0x50 (0x78 - 0x28)
// Class Valhalla.ValVendorFilter
class UValVendorFilter : public UObject
{
public:
	class AValVendorBase*                        Owner;                                             // 0x28(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FText                                  DisplayName;                                       // 0x30(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             FilterIcon;                                        // 0x48(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShouldBeCheckbox;                                 // 0x70(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsEnabled;                                        // 0x71(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5636[0x6];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValVendorFilter* GetDefaultObj();

	void ToggleEnabled();
	bool ShouldBeFilteredOut(struct Valhalla_VendorItem& Item);
	void SetEnabled(bool Enabled);
	class AValVendorBase* GetVendorOwner();
	bool GetEnabled();
};

// 0x60 (0x88 - 0x28)
// Class Valhalla.ValVendorRulesetBase
class UValVendorRulesetBase : public UObject
{
public:
	class FString                                VendorId;                                          // 0x28(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  VendorDisplayName;                                 // 0x38(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                  VendorDescription;                                 // 0x50(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                         bEnforceCurrencyRequirement;                       // 0x68(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5637[0x3];                                     // Fixing Size After Last Property  
	int32                                        PreferredCurrencyItemId;                           // 0x6C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnforceCraftingRequirements;                      // 0x70(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRequirePreviousItemTierForCrafting;               // 0x71(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5638[0x6];                                     // Fixing Size After Last Property  
	TArray<TSubclassOf<class UValVendorFilter>>  Filters;                                           // 0x78(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValVendorRulesetBase* GetDefaultObj();

};

// 0xA8 (0x130 - 0x88)
// Class Valhalla.ValVendorRuleset
class UValVendorRuleset : public UValVendorRulesetBase
{
public:
	TArray<struct Valhalla_VendorListingConfig>  Listings;                                          // 0x88(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_VendorItemPool>       ItemPools;                                         // 0x98(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                        PriceMultipliersPerRarity[0x8];                    // 0xA8(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bEnforceRarityUnlockConditions;                    // 0xC8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_563A[0x7];                                     // Fixing Size After Last Property  
	TMap<enum class ERarity, struct Valhalla_RarityUnlockConfig> RarityUnlockConditions;                            // 0xD0(0x50)(Edit, NativeAccessSpecifierPublic)
	bool                                         bOverridePlayerLevel;                              // 0x120(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_563B[0x3];                                     // Fixing Size After Last Property  
	int32                                        PlayerLevelOverride;                               // 0x124(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EItemGenerationMode               ItemGenerationMode;                                // 0x128(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bConvertListingsToItemPoolOnLoad;                  // 0x129(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_563C[0x6];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValVendorRuleset* GetDefaultObj();

	TArray<class FString> GetItemPoolNames();
};

// 0x8 (0x90 - 0x88)
// Class Valhalla.ValVendorStaticConfig
class UValVendorStaticConfig : public UValVendorRulesetBase
{
public:
	int32                                        BackendVendorId;                                   // 0x88(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        BackendSellVendorId;                               // 0x8C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValVendorStaticConfig* GetDefaultObj();

};

// 0x58 (0x3B0 - 0x358)
// Class Valhalla.ValVendorStatic
class AValVendorStatic : public AValVendorBase
{
public:
	uint8                                        Pad_5643[0x58];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValVendorStatic* GetDefaultObj();

	void PopulateVendorItemsFromBackend();
	void OnBackendVendorsLoaded(int32 GroupId, TArray<int32>& VendorIds);
	void OnBackendSellerLoaded(int32 GroupId, TArray<int32>& VendorIds);
	void LoadBackendVendors();
	void LoadBackendSeller();
	bool GetVendorList(TArray<int32>* VendorList);
	void GetVendorItemIds(int32 VendorId, TArray<class UShopItem*>* OutShopItems);
	bool GetSellRecipeBundleIds(TArray<int32>* IDs);
	void BuildSellMap();
};

// 0x40 (0x68 - 0x28)
// Class Valhalla.ShopItem
class UShopItem : public UObject
{
public:
	int32                                        ItemId;                                            // 0x28(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        LootId;                                            // 0x2C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        BundleId;                                          // 0x30(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Quantity;                                          // 0x34(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        VendorId;                                          // 0x38(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SortOrder;                                         // 0x3C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PortalRulesetId;                                   // 0x40(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Type;                                              // 0x44(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SubType;                                           // 0x48(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        RecipeType;                                        // 0x4C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         ClientClaimable;                                   // 0x50(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5648[0x7];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_ShopItemPrice>        Prices;                                            // 0x58(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UShopItem* GetDefaultObj();

	bool IsClientClaimable();
	int32 GetVendorId();
	int32 GetType();
	int32 GetSubType();
	int32 GetSortOrder();
	int32 GetRecipeType();
	int32 GetQuantity();
	void GetPrices(TArray<struct Valhalla_ShopItemPrice>* PriceList);
	bool GetPrice(int32 CurrencyType, struct Valhalla_ShopItemPrice* Price);
	int32 GetPortalRulesetId();
	int32 GetLootId();
	int32 GetItemId();
	int32 GetBundleId();
};

// 0x18 (0x40 - 0x28)
// Class Valhalla.ShopVendor
class UShopVendor : public UObject
{
public:
	int32                                        VendorId;                                          // 0x28(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_564A[0x4];                                     // Fixing Size After Last Property  
	TArray<class UShopItem*>                     Items;                                             // 0x30(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UShopVendor* GetDefaultObj();

	int32 GetVendorId();
	void GetItems(TArray<class UShopItem*>* ItemList);
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValVendorStashFilter
class UValVendorStashFilter : public UObject
{
public:

	static class UClass* StaticClass();
	static class UValVendorStashFilter* GetDefaultObj();

	bool MatchesFilter(struct Valhalla_InventoryItem& Item, class UValItemAsset* Asset);
};

// 0x8 (0x2D8 - 0x2D0)
// Class Valhalla.ValVendorVolume
class AValVendorVolume : public AVolume
{
public:
	enum class EVendorType                       VendorType;                                        // 0x2D0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_564C[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValVendorVolume* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValViewBobInterface
class IValViewBobInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IValViewBobInterface* GetDefaultObj();

	struct CoreUObject_Vector GetWalkBob();
	bool GetIsAiming();
};

// 0x18 (0x2B0 - 0x298)
// Class Valhalla.ValWaypoint
class AValWaypoint : public AActor
{
public:
	class USceneComponent*                       DragTransformComponent;                            // 0x298(0x8)(Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USmoothTransformComponent*             SmoothDragComponent;                               // 0x2A0(0x8)(Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValCharacterOverlayComponent*         OverlayComponent;                                  // 0x2A8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValWaypoint* GetDefaultObj();

	void SetMinOverlayVisibilityDistanceSq(float MinVisibilityDistanceSq);
	void SetLabel(class FName& Label);
	void SetDebugText(const class FString& DebugText);
	void SetColor(struct CoreUObject_LinearColor& Color);
};

// 0x0 (0x298 - 0x298)
// Class Valhalla.ValLocalWorldAudioEvent
class AValLocalWorldAudioEvent : public AActor
{
public:

	static class UClass* StaticClass();
	static class AValLocalWorldAudioEvent* GetDefaultObj();

	void HandleAudio(bool bFriendly, struct GameplayTags_GameplayTag& ReferrenceTag);
};

// 0x0 (0x298 - 0x298)
// Class Valhalla.ValWorldAudioEvent
class AValWorldAudioEvent : public AActor
{
public:

	static class UClass* StaticClass();
	static class AValWorldAudioEvent* GetDefaultObj();

	void ClientSendEvent(int32 Team, const struct Engine_Vector_NetQuantize& Location, struct GameplayTags_GameplayTag& ReferenceTag);
};

// 0x60 (0x2F8 - 0x298)
// Class Valhalla.ValWorldMeshComposer
class AValWorldMeshComposer : public AActor
{
public:
	TMap<class FName, int32>                     ComponentTemplateNameIndex;                        // 0x298(0x50)(Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_5658[0x10];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValWorldMeshComposer* GetDefaultObj();

	bool HasValidRoomCoords();
	int32 GetRoomCoordY();
	int32 GetRoomCoordX();
	class UStaticMeshComponent* CreateStaticMeshComponent(class UStaticMesh* NewMesh);
	class AActor* ComposerSpawnActor(class UObject* WorldContextObject, TSubclassOf<class AActor> Class, const struct CoreUObject_Transform& SpawnTransform, int32 SpawnIndex);
	bool ApplyNetSafeName(class UActorComponent* Comp);
};

// 0x100 (0x5B8 - 0x4B8)
// Class Valhalla.ValWorldSettings
class AValWorldSettings : public AWorldSettings
{
public:
	TArray<struct CoreUObject_SoftObjectPath>    PreloadAssets;                                     // 0x4B8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        StallZ;                                            // 0x4C8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStallZEnabled;                                    // 0x4CC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_565A[0xEB];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValWorldSettings* GetDefaultObj();

	void SetDefaultGameMode(TSubclassOf<class AGameModeBase> NewGameMode);
};

// 0x58 (0x88 - 0x30)
// Class Valhalla.ValXpTable
class UValXpTable : public UPrimaryDataAsset
{
public:
	TMap<int32, int32>                           XpTable;                                           // 0x30(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FName                                  AssetId;                                           // 0x80(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValXpTable* GetDefaultObj();

	class UValXpTable* GetXpTableFromId(class FName& ID);
	int32 GetXpAt(int32 Level);
	int32 GetMaxLevel();
	int32 GetLevelAt(int32 Xp);
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValXrayScannable
class IValXrayScannable : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IValXrayScannable* GetDefaultObj();

	void BPOnStopDirectLight(class AActor* Instigator);
	void BPOnStartDirectLight(class AActor* Instigator);
};

// 0x10 (0x2B0 - 0x2A0)
// Class Valhalla.ViewBobComponent
class UViewBobComponent : public USceneComponent
{
public:
	float                                        XYDamping;                                         // 0x2A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ZDamping;                                          // 0x2A4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AimDamping;                                        // 0x2A8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Alpha;                                             // 0x2AC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UViewBobComponent* GetDefaultObj();

};

// 0x38 (0x60 - 0x28)
// Class Valhalla.ValEQSContext_CoverActors
class UValEQSContext_CoverActors : public UEnvQueryContext
{
public:
	struct AIModule_AIDataProviderFloatValue     SearchRadius;                                      // 0x28(0x38)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValEQSContext_CoverActors* GetDefaultObj();

};

// 0x50 (0x78 - 0x28)
// Class Valhalla.ValAIAudioCueAgent
class UValAIAudioCueAgent : public UObject
{
public:
	TArray<struct Valhalla_ValAIAudioCueConfig>  CueConfig;                                         // 0x28(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                        AmbientCheckTime;                                  // 0x38(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              AmbientSFXEventTag;                                // 0x3C(0x8)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValCharacter>          SourceBot;                                         // 0x44(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5666[0x4];                                     // Fixing Size After Last Property  
	struct GameplayTags_GameplayTagContainer     CurrentEventTags;                                  // 0x50(0x20)(Edit, DisableEditOnTemplate, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_5668[0x8];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValAIAudioCueAgent* GetDefaultObj();

	void RemoveEventTag(struct GameplayTags_GameplayTag& Tag, bool bCheckCues);
	void RegisterCueCallback(const struct GameplayTags_GameplayTag& CueTag, FDelegateProperty_ Callback);
	void OnAudioFinishedPlaying(enum class EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
	void OnAmbientTimer();
	void Initialize(class AValCharacter* PSourceBot);
	void CheckCues();
	void ChangeEventTags(struct GameplayTags_GameplayTagContainer& TagsToAdd, struct GameplayTags_GameplayTagContainer& TagsToRemove, bool bCheckCues);
	void AddEventTag(struct GameplayTags_GameplayTag& Tag, bool bCheckCues);
};

// 0x70 (0x98 - 0x28)
// Class Valhalla.ValAIAudioCueTagCache
class UValAIAudioCueTagCache : public UObject
{
public:
	TMap<struct GameplayTags_GameplayTag, int32> CurrentlyPlayingCues;                              // 0x28(0x50)(Transient, Protected, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTagContainer     HaveEverPlayedCues;                                // 0x78(0x20)(Transient, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValAIAudioCueTagCache* GetDefaultObj();

};

// 0xBD0 (0x16D0 - 0xB00)
// Class Valhalla.ValCharacterAnimInstance
class UValCharacterAnimInstance : public UValAnimInstance
{
public:
	struct Valhalla_ValCharAnimInstanceProxy     CharProxy;                                         // 0xB00(0x870)(BlueprintVisible, BlueprintReadOnly, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UValDeviceAudioVisual*                 DeviceAudioVisual;                                 // 0x1370(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EWeaponType                       WeaponType;                                        // 0x1378(0x1)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_567D[0x7];                                     // Fixing Size After Last Property  
	class AActor*                                LookAtTargetActor;                                 // 0x1380(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_Vector                    LookAtTargetLocation;                              // 0x1388(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLookAtTarget;                                     // 0x13A0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTurnInPlace;                                      // 0x13A1(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_567E[0x6];                                     // Fixing Size After Last Property  
	TMap<enum class EWeaponType, struct Valhalla_MontageArray> FireMontages;                                      // 0x13A8(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<enum class EWeaponType, struct Valhalla_MontageArray> ReloadMontages;                                    // 0x13F8(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<enum class EWeaponType, struct Valhalla_MontageArray> DrawMontages;                                      // 0x1448(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<enum class EWeaponType, struct Valhalla_MontageArray> HolsterMontages;                                   // 0x1498(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<enum class EWeaponType, struct Valhalla_MontageArray> QuickMeleeMontages;                                // 0x14E8(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAnimMontage*                          HealthPackMontage;                                 // 0x1538(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          HealthPackCrouchMontage;                           // 0x1540(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          AmmoBoostMontage;                                  // 0x1548(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          AmmoBoostCrouchMontage;                            // 0x1550(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                  DeathMontages;                                     // 0x1558(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                  HitReactMontages;                                  // 0x1568(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAnimMontage*                          SkydiveLandingRecoveryMontage;                     // 0x1578(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          BotSpawnMontage;                                   // 0x1580(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          BotDespawnMontage;                                 // 0x1588(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          BotHitReactionMontage;                             // 0x1590(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          WhatWasThatMontage;                                // 0x1598(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          AlertMontage;                                      // 0x15A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          LostThreatMontage;                                 // 0x15A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          BuildUpMontage;                                    // 0x15B0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          TransformMontage;                                  // 0x15B8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          MortarMontage;                                     // 0x15C0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          PreVaultingMontage;                                // 0x15C8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          VaultingMontage;                                   // 0x15D0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          Turn180Montage;                                    // 0x15D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          ClientTurn180Montage;                              // 0x15E0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          LeapMontage;                                       // 0x15E8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          ClientLeapMontage;                                 // 0x15F0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          LeapAttackMontage;                                 // 0x15F8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          LandedAttackMontage;                               // 0x1600(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          LatchBeginMontage;                                 // 0x1608(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          LatchLoopMontage;                                  // 0x1610(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          LatchEndMontage;                                   // 0x1618(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          LatchInterruptMontage;                             // 0x1620(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          ChaseIntroMontage;                                 // 0x1628(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          CeilingJumpMontage;                                // 0x1630(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          LeftWallJumpMontage;                               // 0x1638(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          RightWallJumpMontage;                              // 0x1640(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          DodgeLeftMontage;                                  // 0x1648(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          DodgeRightMontage;                                 // 0x1650(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          LastPlayedHitReactMontage;                         // 0x1658(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_567F[0x20];                                    // Fixing Size After Last Property  
	class UCurveFloat*                           LandingPelvisRecoil;                               // 0x1680(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LandingTotalTime;                                  // 0x1688(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AdditiveLeanAngleFactor;                           // 0x168C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SkiFallThreshold;                                  // 0x1690(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        GroundRotationInterpSpeed;                         // 0x1694(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsCrouched;                                       // 0x1698(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsPurelyCrouched;                                 // 0x1699(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsSliding;                                        // 0x169A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsJetpacking;                                     // 0x169B(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5681[0x4];                                     // Fixing Size After Last Property  
	class UValAT_GameplayTagAddedRemoved*        NonCombatTagTask;                                  // 0x16A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsNonCombat;                                      // 0x16A8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5682[0x7];                                     // Fixing Size After Last Property  
	struct Engine_TimerHandle                    TimerHandle3PSwap;                                 // 0x16B0(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Valhalla_ValCharacterSwappingInfo     WeaponSwappingInfo;                                // 0x16B8(0x18)(NoDestructor, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValCharacterAnimInstance* GetDefaultObj();

	void TimerFunc_PullOut3PWeapon();
	void StopTurn180Animation();
	void StopLeapAttackAnimation();
	void StopLeapAnimation();
	void StopLatchLoopAnimation();
	void StopLandedAttackAnimation();
	void StopClientTurn180Animation();
	void StopClientLeapAnimation();
	void StateSkiingChanged(bool bSkiing);
	void ResetAccumulatedTime();
	void PlayWhatWasThatAnimation();
	void PlayWeaponFired();
	void PlayVaultingAnimation();
	void PlayTurn180Animation();
	void PlayTransformAnimation();
	bool PlaySkydiveLandingRecoveryAnimation();
	void PlayRightWallJumpMontage();
	void PlayPreVaultingAnimation();
	void PlayPostWeaponMissed();
	void PlayPostWeaponFired();
	void PlayMortarMontage();
	void PlayLostThreatAnimation();
	void PlayLeftWallJumpMontage();
	void PlayLeapAttackAnimation();
	void PlayLeapAnimation();
	void PlayLatchLoopAnimation();
	void PlayLatchInterruptAnimation();
	void PlayLatchEndAnimation();
	void PlayLatchBeginAnimation();
	void PlayLanding();
	void PlayLandedAttackAnimation();
	void PlayHitReactAnimation(const struct Valhalla_DamageData& DamageData);
	void PlayClientTurn180Animation();
	void PlayClientLeapAnimation();
	void PlayChaseIntroAnimation();
	void PlayCeilingJumpMontage();
	void PlayBuildUpAnimation();
	void PlayBotSpawnAnimation(float Duration);
	void PlayBotHitReactionAnimation(float Duration);
	void PlayBotDodgeAnimation(bool bToLeft);
	void PlayBotDespawnAnimation();
	void PlayAlertAnimation();
	void OnTransform(const struct GameplayTags_GameplayTag& InTag, int32 NewCount);
	void OnShowDeviceAudioVisual(class UValDeviceAudioVisual* DeviceAV);
	void OnReload(const struct GameplayTags_GameplayTag& InTag, int32 NewCount);
	void OnQuickMelee(const struct GameplayTags_GameplayTag& InTag, int32 NewCount);
	void OnNonCombatTagChanged(const struct GameplayTags_GameplayTag& Tag);
	void OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted);
	void OnBuildUp(const struct GameplayTags_GameplayTag& InTag, int32 NewCount);
	bool IsVaultingMontagePlaying();
	bool HasSpawnAnimation();
	void Handle3PWeaponSwap(const struct Valhalla_ValCharacterSwappingInfo& Info);
	float GetTurn180AnimationLength();
	TArray<class UAnimMontage*> GetReloadMontages();
	TArray<class UAnimMontage*> GetQuickMeleeMontages();
	TArray<class UAnimMontage*> GetPostFireMontages();
	float GetPostFireMontageLength();
	float GetMortarMontageLength();
	float GetMortarAttackRecoverySequenceLength();
	float GetMortarAnticipationSequenceLength();
	float GetMontageLength(class UAnimMontage* Montage);
	TArray<class UAnimMontage*> GetMissedPostFireMontages();
	float GetMissedPostFireMontageLength();
	float GetLeapAttackAnimationLength();
	float GetLeapAnimationLength();
	float GetLatchInterruptAnimationLength();
	float GetLatchEndAnimationLength();
	float GetLatchBeginAnimationLength();
	float GetLandedAttackAnimationLength();
	TArray<class UAnimMontage*> GetHolsterMontages();
	TArray<class UAnimMontage*> GetFireMontages();
	TArray<class UAnimMontage*> GetDrawMontages();
	float GetChaseIntroAnimationLength();
	float GetBotSpawnAnimationLength();
	float GetBotHitReactionAnimationLength();
	float GetBotDodgeAnimationLength(bool bToLeft);
	float GetBotDespawnAnimationLength();
	float CalculateWallJumpMaxLength();
	void AddLocalRotationToRotator(const struct CoreUObject_Rotator& DeltaRotation, struct CoreUObject_Rotator& StartingRotation);
};

// 0x50 (0x3D0 - 0x380)
// Class Valhalla.ValAkPortalComponent
class UValAkPortalComponent : public UAkPortalComponent
{
public:
	uint8                                        Pad_5683[0x8];                                     // Fixing Size After Last Property  
	struct Valhalla_AudioGraphNode               AudioGraphNode;                                    // 0x388(0x38)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                         bIsCorridor;                                       // 0x3C0(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5684[0x7];                                     // Fixing Size After Last Property  
	struct Engine_TimerHandle                    NonManagedTimerHandle;                             // 0x3C8(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UValAkPortalComponent* GetDefaultObj();

	void SetPortalState(bool bIsOpened);
	void MarkUpdateRoomsAndTempLoad();
	void MarkUpdateRooms();
};

// 0x0 (0x480 - 0x480)
// Class Valhalla.ValAkComponent
class UValAkComponent : public UAkComponent
{
public:

	static class UClass* StaticClass();
	static class UValAkComponent* GetDefaultObj();

};

// 0x20 (0x2C0 - 0x2A0)
// Class Valhalla.ValAkGeometryComponent
class UValAkGeometryComponent : public USceneComponent
{
public:
	uint8                                        Pad_5685[0x8];                                     // Fixing Size After Last Property  
	class UAkGeometryComponent*                  CompGeometry;                                      // 0x2A8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AValAkRoom>             OwningRoom;                                        // 0x2B0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TransmissionLoss;                                  // 0x2B8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5686[0x1];                                     // Fixing Size After Last Property  
	bool                                         bOverrideGeometryGeneration;                       // 0x2BD(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5687[0x2];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValAkGeometryComponent* GetDefaultObj();

};

// 0x10 (0x2B0 - 0x2A0)
// Class Valhalla.ValAkRoomEventModifier
class UValAkRoomEventModifier : public USceneComponent
{
public:
	uint8                                        Pad_5688[0x8];                                     // Fixing Size After Last Property  
	class UAkAudioEvent*                         EventToUse;                                        // 0x2A8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValAkRoomEventModifier* GetDefaultObj();

	void ManualFindAkRoom();
};

// 0x18 (0xC90 - 0xC78)
// Class Valhalla.ValAudioComponent
class UValAudioComponent : public UAudioComponent
{
public:
	TWeakObjectPtr<class UValAudioComponent>     SpawnedAudioComponent;                             // 0xC78(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                       LastSceneIndex;                                    // 0xC80(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5689[0xC];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValAudioComponent* GetDefaultObj();

	void PostEvent(class USoundBase* Event);
	void OnPlaybackCompleted();
};

// 0x190 (0x230 - 0xA0)
// Class Valhalla.ValSpatialAudioManagerComponent
class UValSpatialAudioManagerComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnDungeonRoomsLoaded;                              // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStaticRoomsLoaded;                               // 0xB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AValDungeonGenerator>   DungeonPtr;                                        // 0xC0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAreStaticRoomsLoaded;                             // 0xC8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bArePortalsLoaded;                                 // 0xC9(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_568E[0x66];                                    // Fixing Size After Last Property  
	class AValPlayerController*                  OwningController;                                  // 0x130(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct Valhalla_SpatialAudioPortalRef, struct Valhalla_SpatialAudioPortalSet> AkPortals;                                         // 0x138(0x50)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<struct CoreUObject_IntPoint, class UValDummyRoomCollection*> DummyCollections;                                  // 0x188(0x50)(Protected, NativeAccessSpecifierProtected)
	uint32                                       SpatializationIndex;                               // 0x1D8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_568F[0x54];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValSpatialAudioManagerComponent* GetDefaultObj();

	void TryToAddAkRoom(class AValAkRoom* Room, bool bCreateDummy);
	void TryToAddAkObject(class UObject* Object);
	bool IsRoomLoaded(struct CoreUObject_IntPoint& Point);
	bool IsPointLoaded(struct CoreUObject_Vector& Location);
	void DungeonGeneratorCallback_AllRoomsLoaded();
	struct CoreUObject_IntPoint ConvertToPoint(struct CoreUObject_Vector& Location);
};

// 0x80 (0x320 - 0x2A0)
// Class Valhalla.ValTempAkComponent
class UValTempAkComponent : public USceneComponent
{
public:
	uint8                                        Pad_5693[0x8];                                     // Fixing Size After Last Property  
	FDelegateProperty_                           PostEventCallback;                                 // 0x2A8(0x10)(ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UValAkComponent>        AkComponent;                                       // 0x2B8(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UValSpatialAudioManagerComponent> ManagerComponent;                                  // 0x2C0(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class UAkRtpc*, float>                  CachedRTPCValues;                                  // 0x2C8(0x50)(Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_5694[0x8];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValTempAkComponent* GetDefaultObj();

	void StopEvent(bool bDontDestroy);
	void SetRTPCValue(class UAkRtpc* RTPCToSet, float Value, int32 InterpolationTimeMs);
	void PostEventTemporary(class UAkAudioEvent* AkEvent, class UAudioComponent* MetaComponent, class USoundBase* Metasound, bool bDontDestroy);
	void OnEventFinished(enum class EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
};

// 0x20 (0x2C0 - 0x2A0)
// Class Valhalla.ValAkAmbienceRoomObject
class UValAkAmbienceRoomObject : public USceneComponent
{
public:
	uint8                                        Pad_5695[0x8];                                     // Fixing Size After Last Property  
	class UAkAudioEvent*                         EventToPost;                                       // 0x2A8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5696[0x10];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValAkAmbienceRoomObject* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValAkBlueprintLibrary
class UValAkBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UValAkBlueprintLibrary* GetDefaultObj();

	class UAkComponent* SpawnAndAttachAkComponent(class AActor* ActorToAttachTo, const struct CoreUObject_Vector& Location, const struct CoreUObject_Rotator& Orientation, class UAkAudioEvent* AkEvent, bool bAutoPost, const class FString& EventName, bool bAutoDestroy);
	class UValAudioComponent* PostMetaEventAtLocation(class UObject* WorldContextObject, struct CoreUObject_Vector& Location, class USoundBase* Sound, bool bDestroyWhenFinished, bool bAutoPlay);
	void PostEventWithObstruction(class UAkAudioEvent* Event, class AActor* Actor);
	class UValSpatialAudioManagerComponent* GetLocalSpatialAudioManagerComponent(class UObject* WorldContextObject);
	class UValAkPortalComponent* CreateAndAttachValAkPortalComponent(class UPrimitiveComponent* ParentComponent);
	void AudioThreatOnShotAtPlayer(class AActor* Instigator, float Distance);
	void AddAkPortalToPrimitiveComponent(class UPrimitiveComponent* Parent);
};

// 0x10 (0x2A8 - 0x298)
// Class Valhalla.ValAkGeometryActor
class AValAkGeometryActor : public AActor
{
public:
	class UDynamicMeshComponent*                 DynamicMeshComp;                                   // 0x298(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UValAkGeometryComponent*               GeometryComp;                                      // 0x2A0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValAkGeometryActor* GetDefaultObj();

};

// 0xC0 (0x358 - 0x298)
// Class Valhalla.ValAkRoom
class AValAkRoom : public AActor
{
public:
	class USoundSubmixBase*                      RoomSubmix;                                        // 0x298(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDisableInMetasounds;                              // 0x2A0(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_569F[0x7];                                     // Fixing Size After Last Property  
	class UAkRoomComponent*                      RoomComponent;                                     // 0x2A8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValAkGeometryComponent*               GeometryComponent;                                 // 0x2B0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkLateReverbComponent*                ReverbComponent;                                   // 0x2B8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ManualPriority;                                    // 0x2C0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56A0[0x54];                                    // Fixing Size After Last Property  
	TArray<TWeakObjectPtr<class UObject>>        Objects;                                           // 0x318(0x10)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                        Pad_56A1[0x8];                                     // Fixing Size After Last Property  
	struct GeometryScriptingCore_GeometryScriptDynamicMeshBVH DynamicMeshBVH;                                    // 0x330(0x20)(Protected, NativeAccessSpecifierProtected)
	bool                                         bRoomEnabled;                                      // 0x350(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bObjectsEnabled;                                   // 0x351(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_56A2[0x6];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValAkRoom* GetDefaultObj();

	void SetReverbBus(class UAkAuxBus* AuxBus);
	void SetAkPriority(float Value);
	void MarkSetupCompleted();
};

// 0x8 (0x360 - 0x358)
// Class Valhalla.ValAkRoomDynamic
class AValAkRoomDynamic : public AValAkRoom
{
public:
	class UDynamicMeshComponent*                 DynamicMeshComponent;                              // 0x358(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValAkRoomDynamic* GetDefaultObj();

};

// 0x10 (0x368 - 0x358)
// Class Valhalla.ValAkRoomStatic
class AValAkRoomStatic : public AValAkRoom
{
public:
	class UBoxComponent*                         BoxCollisionComponent;                             // 0x358(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_56A3[0x8];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValAkRoomStatic* GetDefaultObj();

};

// 0x30 (0x2D0 - 0x2A0)
// Class Valhalla.ValAkRoomStaticHelper
class UValAkRoomStaticHelper : public USceneComponent
{
public:
	bool                                         bNeverDisableGeneratedRoom;                        // 0x2A0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDisableInMetasounds;                              // 0x2A1(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_56A4[0x6];                                     // Fixing Size After Last Property  
	class USoundSubmixBase*                      RoomSubmix;                                        // 0x2A8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAuxBus*                             ManualAuxBus;                                      // 0x2B0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                         AkEventToPost;                                     // 0x2B8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValAkRoomStatic>       CreatedAkRoom;                                     // 0x2C0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UBoxComponent>          ComponentToCopy;                                   // 0x2C8(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UValAkRoomStaticHelper* GetDefaultObj();

	void TryManualActivateRoom();
	void CreateRoom();
	void ActivateHelper();
};

// 0x18 (0x40 - 0x28)
// Class Valhalla.ValDummyRoomCollection
class UValDummyRoomCollection : public UObject
{
public:
	uint8                                        Pad_56A5[0x8];                                     // Fixing Size After Last Property  
	TArray<class AValAkRoom*>                    Rooms;                                             // 0x30(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValDummyRoomCollection* GetDefaultObj();

};

// 0x120 (0x148 - 0x28)
// Class Valhalla.ValQueueScheduleManager
class UValQueueScheduleManager : public UObject
{
public:
	FMulticastInlineDelegateProperty_            OnQueueScheduleUpdated;                            // 0x28(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnQueueBucketCycled;                               // 0x38(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnNonUniformCycleCycled;                           // 0x48(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_56A9[0xE0];                                    // Fixing Size After Last Property  
	class FString                                ActiveRegionId;                                    // 0x138(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValQueueScheduleManager* GetDefaultObj();

	void SetActiveRegionId(const class FString& RegionId);
	bool HasQueueSchedule();
	bool GetQueueSchedule(struct Valhalla_QueueScheduleConfig* OutQueueSchedule);
	struct CoreUObject_DateTime GetCurrentTime();
	bool GetActiveQueues(TMap<class FString, struct Valhalla_ResolvedBucketSchedule>* ResolvedBuckets, TMap<class FString, struct Valhalla_ResolvedNonUniformCycleInfo>* ResolvedCycles);
};

// 0x78 (0x118 - 0xA0)
// Class Valhalla.ValDynamicTickComponent
class UValDynamicTickComponent : public UActorComponent
{
public:
	TArray<class APlayerState*>                  Players;                                           // 0xA0(0x10)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct CoreUObject_Vector>            PlayerLocations;                                   // 0xB0(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                ProximityBuckets;                                  // 0xC0(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_ProximityBucket>      SortedProximityBucketConfig;                       // 0xD0(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	bool                                         bUseOnServer;                                      // 0xE0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56AA[0x7];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_ProximityBucket>      ServerProximityBucketConfig;                       // 0xE8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                        ServerFallbackTick;                                // 0xF8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUseOnClient;                                      // 0xFC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56AB[0x3];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_ProximityBucket>      ClientProximityBucketConfig;                       // 0x100(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                        ClientFallbackTick;                                // 0x110(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DebugTickInterval;                                 // 0x114(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValDynamicTickComponent* GetDefaultObj();

};

// 0x218 (0x4B0 - 0x298)
// Class Valhalla.ValDungeonLayout
class AValDungeonLayout : public AActor
{
public:
	class USceneComponent*                       SceneComponent;                                    // 0x298(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_Box2D                     MapBounds;                                         // 0x2A0(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct CoreUObject_Box2D                     LayoutBounds;                                      // 0x2C8(0x28)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TMap<struct CoreUObject_IntPoint, class UValDungeonRoomData*> RoomMap;                                           // 0x2F0(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected)
	float                                        RoomSpacing;                                       // 0x340(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56D3[0x4];                                     // Fixing Size After Last Property  
	struct CoreUObject_Rotator                   RoomRotation;                                      // 0x348(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                        RoomScale;                                         // 0x360(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MaxEncounterRooms;                                 // 0x364(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UValDungeonConfig*>             DungeonConfig;                                     // 0x368(0x10)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UValDungeonConfig*                     SelectedDungeonConfig;                             // 0x378(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AValDungeonRoom>           DungeonRoomActorClass;                             // 0x380(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_RandomStream              RandomStream;                                      // 0x388(0x8)(ZeroConstructor, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                         bDebugPathingToRoom;                               // 0x390(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDebugBounds;                                      // 0x391(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56D4[0x6];                                     // Fixing Size After Last Property  
	class UValDungeonRoomData*                   SpawnRoom;                                         // 0x398(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValDungeonRoomData*                   EndRoom;                                           // 0x3A0(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnRoomAddedDel;                                    // 0x3A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnRoomRemovedDel;                                  // 0x3B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_56D5[0xE8];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValDungeonLayout* GetDefaultObj();

	int32 ValidateAllRooms();
	void UpdateNeighbors(class UValDungeonRoomData* Room, bool bCheckMaxDoors, bool bPropagate, bool bUseDirection, int32 Direction);
	void SetSpawnRoom(class UValDungeonRoomData* Room);
	bool RemoveRoom(const struct CoreUObject_IntPoint& Coords, bool bRecalculateBounds, bool bReload, bool bRecreateCorridorsIfNeeded, bool bUpdateNeighbors);
	void RemoveAllRooms(bool bReload);
	void RemoveAllCorridors(TArray<class UValDungeonRoomData*>* RoomsWithEncounters);
	void RecreateAllCorridors();
	void RecaulateBounds();
	void OnSaved();
	void MarkAsDirty();
	bool IsSpaceValidForAdd(const struct CoreUObject_IntPoint& Coords, const struct CoreUObject_IntPoint& Dimensions, bool bCanTouchEncounterRoom, bool bIgnoreCorridors, class UValDungeonRoomData* IgnoreSelf);
	bool IsSpaceFree(const struct CoreUObject_IntPoint& Coords, const struct CoreUObject_IntPoint& Dimensions, bool bCanTouchEncounterRoom, bool bIgnoreCorridors, class UValDungeonRoomData* IgnoreSelf);
	bool IsRoomACorridor(class UValDungeonRoomData* RoomData);
	bool IsInBounds(const struct CoreUObject_IntPoint& Coords, const struct CoreUObject_IntPoint& Dimensions);
	bool IsDirty();
	void GetSurroundingCoords(TArray<struct CoreUObject_IntPoint>& Results, const struct CoreUObject_IntPoint& Coords, const struct CoreUObject_IntPoint& Dimensions, bool bExcludeCorners);
	class UValDungeonRoomData* GetSpawnRoom();
	float GetRoomSpacing();
	void GetRoomsAtCoords(const struct CoreUObject_IntPoint& Coords, const struct CoreUObject_IntPoint& Dimensions, TArray<class UValDungeonRoomData*>& OutRooms);
	int32 GetRoomCount(const class FString& DatabaseId);
	struct CoreUObject_IntPoint GetRoomCenterRounded(class UValDungeonRoomData* Room);
	class UValDungeonRoomData* GetRoomAtCoord(const struct CoreUObject_IntPoint& Coords);
	bool GetReverseLink(struct Valhalla_NeighborLink& Link, struct Valhalla_NeighborLink* ReverseLink);
	void GetPotentialDoorCoords(TArray<struct CoreUObject_IntPoint>& Results, const struct CoreUObject_IntPoint& Coords, const struct CoreUObject_IntPoint& Dimensions, bool bClearArray, bool bInBoundsOnly);
	struct CoreUObject_Box2D GetLayoutBounds();
	int32 GetCorridorLength(class UValDungeonRoomData* RoomData);
	void GetCoordsInRange(TArray<struct CoreUObject_IntPoint>& Results, const struct CoreUObject_IntPoint& Coords, const struct CoreUObject_IntPoint& Dimensions);
	struct CoreUObject_IntPoint GetCoordCenterRounded(const struct CoreUObject_IntPoint& Coords, const struct CoreUObject_IntPoint& Dimensions);
	void ConnectRoomWithCorridors(class UValDungeonRoomData* Room);
	bool CanRoomBeRemoved(const struct CoreUObject_IntPoint& Coords);
	bool CanPathToSpawnRoom(class UValDungeonRoomData* Start, TArray<class UValDungeonRoomData*>* RoomsToIgnore);
	bool CanPathToRoom(class UValDungeonRoomData* Start, class UValDungeonRoomData* Destination, TArray<class UValDungeonRoomData*>* Visited, TArray<class UValDungeonRoomData*>* RoomsToIgnore);
	bool CanPathToEndRoom(class UValDungeonRoomData* Start, TArray<class UValDungeonRoomData*>* RoomsToIgnore);
	bool CanDoorsConnect(const struct CoreUObject_IntPoint& Coords, const struct CoreUObject_IntPoint& Dimensions);
	void BeginAsyncLoad();
	void AsyncLoadFinished();
	bool AreAllRoomsValid();
	class AValDungeonRoom* AddRoom(struct Valhalla_DungeonRoomAddParams& Params);
	void AddOrRemoveFromMap(const struct CoreUObject_IntPoint& Coords, const struct CoreUObject_IntPoint& Dimensions, class UValDungeonRoomData* Room);
};

// 0x178 (0x628 - 0x4B0)
// Class Valhalla.ValDungeonGenerator
class AValDungeonGenerator : public AValDungeonLayout
{
public:
	uint8                                        Pad_56D9[0x8];                                     // Fixing Size After Last Property  
	int32                                        NearOcclusionRate;                                 // 0x4B8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        FarOcclusionRate;                                  // 0x4BC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56DA[0x20];                                    // Fixing Size After Last Property  
	enum class EGenerationType                   GenerationType;                                    // 0x4E0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56DB[0x3];                                     // Fixing Size After Last Property  
	struct CoreUObject_IntPoint                  Dimensions;                                        // 0x4E4(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        DefaultRoomCountMin;                               // 0x4EC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        DefaultRoomCountMax;                               // 0x4F0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EConnectRule                      ConnectDeadEndsRule;                               // 0x4F4(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EDepthRule                        DepthRule;                                         // 0x4F5(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EMiniBossRule                     MiniBossRule;                                      // 0x4F6(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bPruneDeadEnds;                                    // 0x4F7(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bFillHoles;                                        // 0x4F8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bSeedMiniBossRooms;                                // 0x4F9(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56DC[0x6];                                     // Fixing Size After Last Property  
	TArray<float>                                NeighborCreationChance;                            // 0x500(0x10)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                         PreferCloserToCenter;                              // 0x510(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56DD[0x3];                                     // Fixing Size After Last Property  
	float                                        ChanceToPickClosestToCenter;                       // 0x514(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MiniBossCountMax;                                  // 0x518(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MiniBossRandomDepthOffset;                         // 0x51C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MiniBossDepthJump;                                 // 0x520(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAllowNeighboringMiniBosses;                       // 0x524(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAllowMiniBossNextToSpawn;                         // 0x525(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EEndRoomRule                      EndRoomRule;                                       // 0x526(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56DE[0x1];                                     // Fixing Size After Last Property  
	int32                                        SeedOverride;                                      // 0x528(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShowLoadingScreenUntilFinished;                   // 0x52C(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDebugPrunedRooms;                                 // 0x52D(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDebugFilledHoles;                                 // 0x52E(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56DF[0x1];                                     // Fixing Size After Last Property  
	float                                        SimulateRandomClientLoadDelay;                     // 0x530(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SimulateRandomServerLoadDelay;                     // 0x534(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct CoreUObject_IntPoint, class UValSecurityLevel*> ForcedSecurityLevel;                               // 0x538(0x50)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TMap<struct CoreUObject_IntPoint, class UValDungeonRoomData*> FreeNeighbors;                                     // 0x588(0x50)(Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct CoreUObject_IntPoint>          RoomsToRemove;                                     // 0x5D8(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                MiniBossX;                                         // 0x5E8(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	bool                                         bGenerationCompleted;                              // 0x5F8(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAllRoomsLoaded;                                   // 0x5F9(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56E0[0x6];                                     // Fixing Size After Last Property  
	TArray<class AValDungeonRoom*>               RoomsToWaitForLoad;                                // 0x600(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	struct CoreUObject_IntPoint                  LastViewTargetCoord;                               // 0x610(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnAllRoomsLoaded;                                  // 0x618(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValDungeonGenerator* GetDefaultObj();

	void SpawnNodes();
	void SetRoomCount(int32 RoomCountMin, int32 RoomCountMax);
	void SetMiniBossCountMax(int32 NewMiniBossCountMax);
	void PruneDeadEnds();
	void PickMiniBossRooms();
	void PickEndRoom();
	void OnRoomLoaded(class AValDungeonRoom* LoadedRoom);
	void OnDungeonSeed(int32 DungeonSeed);
	void GenerateRooms(bool bSpawnOnFinish, bool bFreeNeighborDataOnFinish);
	void FillHoles();
	struct CoreUObject_Vector ConvertToWorldCoordinates(const struct CoreUObject_IntPoint& InCoord);
	struct CoreUObject_IntPoint ConvertToGridCoordinates(const struct CoreUObject_Vector& InLocation);
	void AllRoomsLoaded();
};

// 0xC0 (0x358 - 0x298)
// Class Valhalla.ValDungeonRoom
class AValDungeonRoom : public AActor
{
public:
	TMap<enum class EDoorState, struct Valhalla_RoomContents> PossibleContents;                                  // 0x298(0x50)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                         bDetermineContentsOnBeginPlay;                     // 0x2E8(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56E5[0x7];                                     // Fixing Size After Last Property  
	class USceneComponent*                       SceneComponent;                                    // 0x2F0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValDungeonRoomData*                   RoomData;                                          // 0x2F8(0x8)(Edit, ZeroConstructor, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56E6[0x8];                                     // Fixing Size After Last Property  
	TSoftClassPtr<class AActor>                  ContentsToSpawn;                                   // 0x308(0x28)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                SpawnedContents;                                   // 0x330(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ContentsRotation;                                  // 0x338(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        ContentsSeed;                                      // 0x33C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ContentsHeightOffset;                              // 0x340(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56E7[0x4];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnRoomLoaded;                                      // 0x348(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValDungeonRoom* GetDefaultObj();

	void SetRoomData(class UValDungeonRoomData* NewRoomData);
	class UValDungeonRoomData* GetRoomData();
	void EventContentsLoaded();
	void DetermineContents();
	void ContentsLoaded();
};

// 0x8 (0xF0 - 0xE8)
// Class Valhalla.ValActivityTracker_MissionTurnIn
class UValActivityTracker_MissionTurnIn : public UValActivityTracker
{
public:
	uint8                                        Pad_56E9[0x8];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValActivityTracker_MissionTurnIn* GetDefaultObj();

	void OnMissionProgressed(struct GameplayTags_GameplayTag& MissionTag);
	void OnMissionCompleted(struct GameplayTags_GameplayTag& MissionTag);
};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValStatsEndpoint
class UValStatsEndpoint : public UObject
{
public:

	static class UClass* StaticClass();
	static class UValStatsEndpoint* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValStatsEndpoint_HiRez
class UValStatsEndpoint_HiRez : public UValStatsEndpoint
{
public:

	static class UClass* StaticClass();
	static class UValStatsEndpoint_HiRez* GetDefaultObj();

};

// 0x128 (0x150 - 0x28)
// Class Valhalla.ValStatsManager
class UValStatsManager : public UObject
{
public:
	TArray<class UValStatsEndpoint*>             StatsEndpoints;                                    // 0x28(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                         bSealed;                                           // 0x38(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56F2[0x3];                                     // Fixing Size After Last Property  
	struct CoreUObject_Guid                      InstanceId;                                        // 0x3C(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_Guid                      MatchID;                                           // 0x4C(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56F3[0x4];                                     // Fixing Size After Last Property  
	class FString                                MapName;                                           // 0x60(0x10)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                GameModeName;                                      // 0x70(0x10)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                       MapGameId;                                         // 0x80(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                       QueueId;                                           // 0x84(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                       SiteId;                                            // 0x88(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56F4[0x4];                                     // Fixing Size After Last Property  
	struct CoreUObject_DateTime                  StatsStartedDateTime;                              // 0x90(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_DateTime                  StatsFinishedDateTime;                             // 0x98(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_DateTime                  MatchStartTime;                                    // 0xA0(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        TeamingDamageThreshold;                            // 0xA8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56F5[0x4];                                     // Fixing Size After Last Property  
	TMap<enum class EMatchStats, int32>          MatchStats;                                        // 0xB0(0x50)(Protected, NativeAccessSpecifierProtected)
	TMap<TWeakObjectPtr<class APlayerState>, class UValPlayerStats*> PlayerStats;                                       // 0x100(0x50)(Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValStatsManager* GetDefaultObj();

	void IncrementTeamingStat(class APlayerState* OwningState, class APlayerState* OtherState, enum class ESoloTeamingStat Stat, int32 IncrementBy);
	void IncrementPlayerStat(class APlayerState* PlayerState, enum class EPlayerStats Stat, int32 IncrementBy);
	void IncrementMatchStat(enum class EMatchStats Stat, int32 IncrementBy);
};

// 0x258 (0x288 - 0x30)
// Class Valhalla.ValSecurityLevel
class UValSecurityLevel : public UDataAsset
{
public:
	TMap<struct GameplayTags_GameplayTag, class UValLootConfigData*> BotLootTable;                                      // 0x30(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UValLootConfigData*                    DefaultLootTable;                                  // 0x80(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<enum class EBuildingType, struct Valhalla_ValBotWaveSet> BotWaveSetConfig;                                  // 0x88(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<enum class EBuildingType, struct Valhalla_ValBotWaveSet> AlarmWaveSetConfig;                                // 0xD8(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<enum class EBuildingType, int32>        BotRespawnTimerConfig;                             // 0x128(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<struct GameplayTags_GameplayTag, struct Valhalla_ValBotWaveSet> AlarmBotSetConfig;                                 // 0x178(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class UValSquad>                 BotSquadClass;                                     // 0x1C8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFillWithPlayerBots;                               // 0x1D0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_56F6[0x7];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_ValBotDataWeightPair> FillBotData;                                       // 0x1D8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UValBotTierData*                       BotTierData;                                       // 0x1E8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFillWithHunters;                                  // 0x1F0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_56F7[0x3];                                     // Fixing Size After Last Property  
	int32                                        GuaranteedHunterSpawnAmount;                       // 0x1F4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UGameplayEffect>> HunterClassEffects;                                // 0x1F8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<enum class EBuildingType, struct Valhalla_BuildingLootCrates> BuildingLootCrates;                                // 0x208(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UValQueueData>          DefaultQueue;                                      // 0x258(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESecurityLevel                    SecurityLevel;                                     // 0x280(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_56F8[0x3];                                     // Fixing Size After Last Property  
	float                                        MinimumPlayerDefensivePower;                       // 0x284(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValSecurityLevel* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValPlayerFinalizationTaskParameters
class UValPlayerFinalizationTaskParameters : public UObject
{
public:

	static class UClass* StaticClass();
	static class UValPlayerFinalizationTaskParameters* GetDefaultObj();

};

// 0x60 (0x88 - 0x28)
// Class Valhalla.ValPlayerFinalizationTask
class UValPlayerFinalizationTask : public UObject
{
public:
	TArray<TSubclassOf<class UValPlayerFinalizationTask>> DependentTaskTypes;                                // 0x28(0x10)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                        Pad_56F9[0x10];                                    // Fixing Size After Last Property  
	TWeakObjectPtr<class APlayerController>      OwningPlayer;                                      // 0x48(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValPlayerFinalizationTaskParameters*  FinalizationParameters;                            // 0x50(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56FA[0x18];                                    // Fixing Size After Last Property  
	enum class EPlayerFinalizationTaskStatus     TaskStatus;                                        // 0x70(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_56FB[0x7];                                     // Fixing Size After Last Property  
	class FString                                ErrorCode;                                         // 0x78(0x10)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UValPlayerFinalizationTask* GetDefaultObj();

};

// 0x118 (0x1B8 - 0xA0)
// Class Valhalla.ValPlayerFinalizationTaskComponent
class UValPlayerFinalizationTaskComponent : public UActorComponent
{
public:
	uint8                                        Pad_5701[0x118];                                   // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValPlayerFinalizationTaskComponent* GetDefaultObj();

	bool HasFinalizedPlayer(class APlayerController* Player);
	bool HasFinalizationTasksForPlayer(class APlayerController* Player);
	bool FinalizePlayer(class APlayerController* EndingPlayer);
	class UValPlayerFinalizationTask* CreateTask(TSubclassOf<class UValPlayerFinalizationTask> TaskClass, class APlayerController* Owner, TArray<class UValPlayerFinalizationTask*>* TaskContainer);
	void CreateFinalizationTasksForPlayer(class APlayerController* EndingPlayer, TArray<class UValPlayerFinalizationTask*>* OutTasks);
};

// 0x0 (0x1B8 - 0x1B8)
// Class Valhalla.ValPlayerFinalizationTaskComponent_SpaceDungeon
class UValPlayerFinalizationTaskComponent_SpaceDungeon : public UValPlayerFinalizationTaskComponent
{
public:

	static class UClass* StaticClass();
	static class UValPlayerFinalizationTaskComponent_SpaceDungeon* GetDefaultObj();

};

// 0x0 (0x1B8 - 0x1B8)
// Class Valhalla.ValPlayerFinalizationTaskComponent_Topaz
class UValPlayerFinalizationTaskComponent_Topaz : public UValPlayerFinalizationTaskComponent
{
public:

	static class UClass* StaticClass();
	static class UValPlayerFinalizationTaskComponent_Topaz* GetDefaultObj();

};

// 0x0 (0x88 - 0x88)
// Class Valhalla.ValPlayerFinalizationTask_Flush
class UValPlayerFinalizationTask_Flush : public UValPlayerFinalizationTask
{
public:

	static class UClass* StaticClass();
	static class UValPlayerFinalizationTask_Flush* GetDefaultObj();

};

// 0x0 (0x88 - 0x88)
// Class Valhalla.ValPlayerFinalizationTask_Secure
class UValPlayerFinalizationTask_Secure : public UValPlayerFinalizationTask
{
public:

	static class UClass* StaticClass();
	static class UValPlayerFinalizationTask_Secure* GetDefaultObj();

};

// 0x10 (0x98 - 0x88)
// Class Valhalla.ValPlayerFinalizationTask_Wait
class UValPlayerFinalizationTask_Wait : public UValPlayerFinalizationTask
{
public:
	float                                        Duration;                                          // 0x88(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5705[0xC];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValPlayerFinalizationTask_Wait* GetDefaultObj();

};

// 0x10 (0xA0 - 0x90)
// Class Valhalla.ValPlayerJoinTask_SimpleWait
class UValPlayerJoinTask_SimpleWait : public UValPlayerJoinTask
{
public:
	float                                        TaskDuration;                                      // 0x90(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         CompleteAsSuccess;                                 // 0x94(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5707[0xB];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValPlayerJoinTask_SimpleWait* GetDefaultObj();

	void SetTaskDuration(float NewDuration);
	void SetCompleteAsSuccess(bool CompleteSuccessfully);
	void OnTimer();
};

// 0x0 (0x158 - 0x158)
// Class Valhalla.ValPlayerJoinTaskComponent_Raid
class UValPlayerJoinTaskComponent_Raid : public UValPlayerJoinTaskComponent
{
public:

	static class UClass* StaticClass();
	static class UValPlayerJoinTaskComponent_Raid* GetDefaultObj();

};

// 0x0 (0x158 - 0x158)
// Class Valhalla.ValPlayerJoinTaskComponent_SpaceDungeon
class UValPlayerJoinTaskComponent_SpaceDungeon : public UValPlayerJoinTaskComponent
{
public:

	static class UClass* StaticClass();
	static class UValPlayerJoinTaskComponent_SpaceDungeon* GetDefaultObj();

};

// 0x0 (0x158 - 0x158)
// Class Valhalla.ValPlayerJoinTaskComponent_Topaz
class UValPlayerJoinTaskComponent_Topaz : public UValPlayerJoinTaskComponent
{
public:

	static class UClass* StaticClass();
	static class UValPlayerJoinTaskComponent_Topaz* GetDefaultObj();

};

// 0x10 (0xA0 - 0x90)
// Class Valhalla.ValPlayerJoinTask_AntiCheat
class UValPlayerJoinTask_AntiCheat : public UValPlayerJoinTask
{
public:
	uint8                                        Pad_5708[0x10];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValPlayerJoinTask_AntiCheat* GetDefaultObj();

};

// 0x8 (0x98 - 0x90)
// Class Valhalla.ValPlayerJoinTask_CheckPartyFill
class UValPlayerJoinTask_CheckPartyFill : public UValPlayerJoinTask
{
public:
	uint8                                        Pad_570A[0x8];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValPlayerJoinTask_CheckPartyFill* GetDefaultObj();

};

// 0x0 (0x90 - 0x90)
// Class Valhalla.ValPlayerJoinTask_DisplayName
class UValPlayerJoinTask_DisplayName : public UValPlayerJoinTask
{
public:

	static class UClass* StaticClass();
	static class UValPlayerJoinTask_DisplayName* GetDefaultObj();

};

// 0x8 (0x98 - 0x90)
// Class Valhalla.ValPlayerJoinTask_MctsInventory
class UValPlayerJoinTask_MctsInventory : public UValPlayerJoinTask
{
public:
	uint8                                        Pad_570C[0x8];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValPlayerJoinTask_MctsInventory* GetDefaultObj();

};

// 0x18 (0xA8 - 0x90)
// Class Valhalla.ValPlayerJoinTask_MctsLoadout
class UValPlayerJoinTask_MctsLoadout : public UValPlayerJoinTask
{
public:
	uint8                                        Pad_570D[0x18];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValPlayerJoinTask_MctsLoadout* GetDefaultObj();

};

// 0x8 (0x98 - 0x90)
// Class Valhalla.ValPlayerJoinTask_ValidateEOSUser
class UValPlayerJoinTask_ValidateEOSUser : public UValPlayerJoinTask
{
public:
	uint8                                        Pad_570F[0x8];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValPlayerJoinTask_ValidateEOSUser* GetDefaultObj();

};

// 0x0 (0x90 - 0x90)
// Class Valhalla.ValPlayerJoinTask_ValidEquipment
class UValPlayerJoinTask_ValidEquipment : public UValPlayerJoinTask
{
public:

	static class UClass* StaticClass();
	static class UValPlayerJoinTask_ValidEquipment* GetDefaultObj();

};

// 0x1B8 (0x9F8 - 0x840)
// Class Valhalla.ValGameMode_Lobby
class AValGameMode_Lobby : public AValGameModeBase
{
public:
	TArray<TSubclassOf<class UValVendorStaticConfig>> VendorStaticConfigs;                               // 0x840(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class FString                                RemoteLobbyQueueId;                                // 0x850(0x10)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        FirstPlayerConnectTimeoutSeconds;                  // 0x860(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ExpectedPlayerConnectTimeoutSeconds;               // 0x864(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        BackfillRequestAfterPlayerLoginSeconds;            // 0x868(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        BackfillTimeToLiveSeconds;                         // 0x86C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        BackfillPollingOverlapSeconds;                     // 0x870(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxConnectedPlayers;                               // 0x874(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxLobbyRuntimeMinutes;                            // 0x878(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxLobbyRuntimeProcessedPlayers;                   // 0x87C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MinConnectedPlayersBeforeKicking;                  // 0x880(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DelayBeforeKickingMinutes;                         // 0x884(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UValAbilityConfigData*                 AbilityConfig;                                     // 0x888(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValAbilityConfigData*                 PassiveConfig;                                     // 0x890(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValAbilityConfigData*                 PassiveSlotConfig;                                 // 0x898(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValWeaponCosmeticConfigData*          WeaponCosmeticConfig;                              // 0x8A0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UValRecipeGroup>        RecipeGroup;                                       // 0x8A8(0x28)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AValShopManager>           ShopManagerClass;                                  // 0x8D0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValXpTable*                           PlayerAccountXpTable;                              // 0x8D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValXpTable*                           PlayerReputationTable;                             // 0x8E0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<int32, int32>                           StashItemIdToSize;                                 // 0x8E8(0x50)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_5710[0xB8];                                    // Fixing Size After Last Property  
	int32                                        VIPStatusTokenItemID;                              // 0x9F0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5711[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValGameMode_Lobby* GetDefaultObj();

	enum class ELobbyState GetLobbyState();
};

// 0x170 (0x198 - 0x28)
// Class Valhalla.ValGameSingleton
class UValGameSingleton : public UObject
{
public:
	TMap<enum class ELevelType, struct Valhalla_LevelData> LevelData;                                         // 0x28(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              HeadshotDamageTag;                                 // 0x78(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              ShieldDamageTag;                                   // 0x80(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              HealthDamageTag;                                   // 0x88(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              ShieldBrokeDamageTag;                              // 0x90(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              IgnoreOnDamagedTag;                                // 0x98(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              IgnoreNotifyDamageTag;                             // 0xA0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              PodDamageSourceTag;                                // 0xA8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              ZoneDamageSourceTag;                               // 0xB0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              IgnoreHeadshotsTag;                                // 0xB8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>           EffectRemovalClass;                                // 0xC0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SwappableAbilityQuickDrawTime;                     // 0xC8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SwappableAbilityQuickHolsterTime;                  // 0xCC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundSubmixBase*                      DefaultSubmix;                                     // 0xD0(0x8)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<float, class USoundSubmixBase*>         RoomSizeSubmix;                                    // 0xD8(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct CoreUObject_SoftClassPath             DefaultLoadingScreenSubwidget;                     // 0x128(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct CoreUObject_SoftClassPath> PerMapLoadingScreenSubwidget;                      // 0x148(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValGameSingleton* GetDefaultObj();

	struct GameplayTags_GameplayTag GetZoneDamageSourceTag();
	float GetSwappableAbilityQuickHolsterTime();
	float GetSwappableAbilityQuickDrawTime();
	struct GameplayTags_GameplayTag GetShieldDamageTag();
	struct GameplayTags_GameplayTag GetShieldBrokeDamageTag();
	struct GameplayTags_GameplayTag GetPodDamageSourceTag();
	bool GetLevelName(enum class ELevelType Type, class FName* Name);
	bool GetLevelData(enum class ELevelType Type, struct Valhalla_LevelData* Data);
	struct GameplayTags_GameplayTag GetIgnoreOnDamagedTag();
	struct GameplayTags_GameplayTag GetIgnoreNotifyDamageTag();
	struct GameplayTags_GameplayTag GetIgnoreHeadshotsTag();
	struct GameplayTags_GameplayTag GetHealthDamageTag();
	struct GameplayTags_GameplayTag GetHeadshotDamageTag();
	TSubclassOf<class UGameplayEffect> GetEffectRemovalClass();
};

// 0x480 (0xE18 - 0x998)
// Class Valhalla.ValGameState_Frontier
class AValGameState_Frontier : public AValGameState
{
public:
	FMulticastInlineDelegateProperty_            OnLootState;                                       // 0x998(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPortalState;                                     // 0x9A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActiveLoot;                                      // 0x9B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActivePortals;                                   // 0x9C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayersRemaining;                                // 0x9D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTeamsRemaining;                                  // 0x9E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSelectedTrees;                                   // 0x9F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSelectedItems;                                   // 0xA08(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPortalActivationDelay;                           // 0xA18(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBuildingPOIsChanged;                             // 0xA28(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSpawnedLegendaryArtifactsChanged;                // 0xA38(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnOpenedLegendaryCratesChanged;                    // 0xA48(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayersWithLegendariesChanged;                   // 0xA58(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnRespawnPoints;                                   // 0xA68(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnExtractionPhaseEndedEarly;                       // 0xA78(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                        R_PlayersRemaining;                                // 0xA88(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_TeamsRemaining;                                  // 0xA8C(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EGameObjectiveState               R_LootState;                                       // 0xA90(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EGameObjectiveState               R_PortalState;                                     // 0xA91(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_573D[0x6];                                     // Fixing Size After Last Property  
	TArray<class AValObjective_Loot*>            R_ActiveLoot;                                      // 0xA98(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<class AValObjective_Portal*>          R_ActivePortals;                                   // 0xAA8(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                          R_SelectedTrees;                                   // 0xAB8(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                          R_SelectedItems;                                   // 0xAC8(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	float                                        R_PortalActivationDelay;                           // 0xAD8(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_573E[0x4];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_BuildingPOI>          R_BuildingPOIs;                                    // 0xAE0(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<class AValRespawnPoint*>              R_RespawnPoints;                                   // 0xAF0(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	int32                                        TotalLootCrates;                                   // 0xB00(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        TotalOpenedLootCrates;                             // 0xB04(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bNextCrateLegendary;                               // 0xB08(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_573F[0x7];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_LegendaryArtifactData> R_SpawnedLegendaryArtifacts;                       // 0xB10(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<class AActor*>                        R_PlayersWithLegendaries;                          // 0xB20(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<struct Engine_Vector_NetQuantize10>   R_RevealedPlayerLocations;                         // 0xB30(0x10)(Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                        R_OpenedLegendaryCrates;                           // 0xB40(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5741[0x4];                                     // Fixing Size After Last Property  
	TSubclassOf<class AValClosestFogPointActor>  ClosestFogPointClassToSpawn;                       // 0xB48(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValClosestFogPointActor> ClosestFogPointActor;                              // 0xB50(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnPortalEntered;                                   // 0xB58(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCaptureProgressChanged;                          // 0xB68(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPortalContested;                                 // 0xB78(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPortalCapturingTeamChanged;                      // 0xB88(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPortalCaptured;                                  // 0xB98(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTimeUntilSpectate;                               // 0xBA8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                        R_CapturingTeam;                                   // 0xBB8(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_CaptureProgress;                                 // 0xBBC(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bContested;                                      // 0xBC0(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5742[0x3];                                     // Fixing Size After Last Property  
	int32                                        R_TimeUntilSpectate;                               // 0xBC4(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5743[0x50];                                    // Fixing Size After Last Property  
	float                                        CapturePointAccrualInterval;                       // 0xC18(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUseKOTH;                                          // 0xC1C(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5744[0x3];                                     // Fixing Size After Last Property  
	int32                                        LegendaryLootPerCrate;                             // 0xC20(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5745[0xC];                                     // Fixing Size After Last Property  
	TArray<float>                                LegendaryLootThresholds;                           // 0xC30(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnDepositState;                                    // 0xC40(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnArtifactsExtractedChanged;                       // 0xC50(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        R_PlayerRevealDelay;                               // 0xC60(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        R_ArtifactRevealDelay;                             // 0xC64(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTotalArtifactsAvailableChanged;                  // 0xC68(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActiveLootExtractions;                           // 0xC78(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	enum class EGameObjectiveState               R_DepositState;                                    // 0xC88(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5747[0x3];                                     // Fixing Size After Last Property  
	int32                                        R_ArtifactsExtracted;                              // 0xC8C(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_TotalArtifactsAvailable;                         // 0xC90(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        LegendariesDiscovered;                             // 0xC94(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AValObjective_LootExtractionSite*> R_ActiveLootExtractions;                           // 0xC98(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	bool                                         R_bExtractionEndedEarly;                           // 0xCA8(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5748[0x7];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnTrainingState;                                   // 0xCB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTrainingBotCountChanged;                         // 0xCC0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	enum class ETrainingState                    R_TrainingState;                                   // 0xCD0(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5749[0x3];                                     // Fixing Size After Last Property  
	int32                                        R_TrainingBotsRemaining;                           // 0xCD4(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnActiveRoyaleFog;                                 // 0xCD8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCurrentFogPhaseChanged;                          // 0xCE8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFogSpawnRadiusChanged;                           // 0xCF8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFogEnabled;                                      // 0xD08(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AValRoyaleFogVolume*                   R_RoyaleFog;                                       // 0xD18(0x8)(Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Valhalla_FogPhase                     R_CurrentFogPhase;                                 // 0xD20(0x48)(Net, RepNotify, Protected, NativeAccessSpecifierProtected)
	float                                        R_FogSpawnRadius;                                  // 0xD68(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bFogEnabled;                                     // 0xD6C(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_574B[0x3];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnMissionScoresSet;                                // 0xD70(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFinaleMissionsRequiredSet;                       // 0xD80(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMissionsEnabled;                                 // 0xD90(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct Valhalla_MissionScore>         R_MissionScores;                                   // 0xDA0(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	int32                                        R_FinaleMissionsRequired;                          // 0xDB0(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bMissionsEnabled;                                // 0xDB4(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_574D[0x3];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnTrapSetoffDel;                                   // 0xDB8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCurrentTeamClassCountChanged;                    // 0xDC8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnActiveClassesChanged;                            // 0xDD8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_TeamClassList>        R_TeamClassData;                                   // 0xDE8(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTagContainer     R_ActiveClasses;                                   // 0xDF8(0x20)(Net, RepNotify, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValGameState_Frontier* GetDefaultObj();

	void UpdateCapturingTeam(int32 Value);
	void SetRespawnPoints(const TArray<class AValRespawnPoint*>& InRespawnPoints);
	void SetPOI(int32 Index, const struct Valhalla_BuildingPOI& POIData);
	void SetLegendaryLootCrateThresholds(const TArray<float>& Values);
	void SetLegendaryArtifactRevealed(const struct Valhalla_LegendaryArtifactData& ArtifactToReveal);
	void SetLegendaryArtifactHeld(const struct Valhalla_LegendaryArtifactData& ArtifactToRemove, class AValPlayerState* OwningPlayer);
	void SetLegendaryArtifactExtracting(const struct Valhalla_LegendaryArtifactData& ArtifactToAdd, class AValObjective_LootExtractionSite* ExtractionSite);
	void SetLegendaryArtifactExtracted(const struct Valhalla_LegendaryArtifactData& ArtifactToRemove, class AValPlayerState* OwningPlayer);
	void SetLegendaryArtifactDropped(const struct Valhalla_LegendaryArtifactData& ArtifactToRemove, class AValPickup_Item* ArtifactItem);
	void SetFogSpawnRadius(float Value);
	void SetFogEnabled(bool Value);
	void SetCurrentFogPhase(const struct Valhalla_FogPhase& Value);
	void SetActiveRoyaleFog(class AValRoyaleFogVolume* RoyaleFog);
	void SetActiveClasses(const struct GameplayTags_GameplayTagContainer& ActiveClasses);
	void RemovePlayerWithLegendary(class AActor* Player);
	void RemoveActorFromPortal(int32 TeamNumber);
	int32 RegisterPOI();
	void OnTrapIsSetOff(class AActor* Trap, class AActor* Victim);
	void OnRep_TrainingState();
	void OnRep_TrainingBotsRemaining();
	void OnRep_TotalArtifactsAvailable();
	void OnRep_TimeUntilSpectate();
	void OnRep_TeamsRemaining();
	void OnRep_TeamClassData();
	void OnRep_SpawnedLegendaryArtifacts();
	void OnRep_SelectedTrees();
	void OnRep_SelectedItems();
	void OnRep_RoyaleFog();
	void OnRep_RespawnPoints();
	void OnRep_PortalState();
	void OnRep_PortalActivationDelay();
	void OnRep_PlayersWithLegendaries();
	void OnRep_PlayersRemaining();
	void OnRep_PlayerRevealDelay();
	void OnRep_OpenedLegendaryCrates();
	void OnRep_MissionsEnabled();
	void OnRep_MissionScores();
	void OnRep_LootState();
	void OnRep_FogSpawnRadius();
	void OnRep_FogEnabled();
	void OnRep_FinaleMissionsRequired();
	void OnRep_ExtractionEndedEarly();
	void OnRep_DepositState();
	void OnRep_CurrentFogPhase();
	void OnRep_Contested();
	void OnRep_CapturingTeam();
	void OnRep_CaptureProgress();
	void OnRep_BuildingPOIs();
	void OnRep_ArtifactsExtracted();
	void OnRep_ArtifactRevealDelay();
	void OnRep_ActivePortals();
	void OnRep_ActiveLootExtractions();
	void OnRep_ActiveLoot();
	void OnRep_ActiveClasses();
	void OnPOICrateOpened(int32 Index);
	bool IsClassAvailable(int32 TeamId, const struct GameplayTags_GameplayTag& Class);
	void InitializeClassData(TArray<int32>& TeamIds, TMap<struct GameplayTags_GameplayTag, int32> MaxClassCounts);
	void IncrementClassCount(int32 TeamId, const struct GameplayTags_GameplayTag& Class);
	bool GetUseKoTH();
	enum class ETrainingState GetTrainingState();
	int32 GetTrainingBotsRemaining();
	int32 GetTotalArtifactsAvailable();
	int32 GetTimeUntilSpectate();
	int32 GetTeamsRemaining();
	TMap<int32, int32> GetTeamCounts();
	bool GetTeamClassCount(int32 TeamId, struct Valhalla_TeamClassList* OutTeamClassCount);
	TArray<struct Valhalla_LegendaryArtifactData> GetSpawnedArtifactLocations();
	TArray<struct Engine_Vector_NetQuantize10> GetRevealedPlayerLocations();
	void GetRespawnPoints(TArray<class AValRespawnPoint*>* OutRespawnPoints);
	enum class EGameObjectiveState GetPortalState();
	float GetPortalActivationDelay();
	int32 GetPlayersRemaining();
	bool GetNextChestLegendary();
	bool GetMissionsEnabled();
	void GetMissionScore(int32 TeamNum, int32* Score);
	enum class EGameObjectiveState GetLootState();
	int32 GetLegendaryLootPerCrate();
	float GetFogSpawnRadius();
	bool GetFogEnabled();
	int32 GetFinaleMissionsRequired();
	enum class EGameObjectiveState GetDepositState();
	struct Valhalla_FogPhase GetCurrentFogPhase();
	bool GetContested();
	int32 GetCapturingTeam();
	float GetCaptureProgress();
	TArray<struct Valhalla_BuildingPOI> GetBuildingPOIs();
	TArray<class FName> GetAvailableTrees();
	TArray<class FName> GetAvailableItems();
	int32 GetArtifactsExtracted();
	class AValRoyaleFogVolume* GetActiveRoyaleFog();
	void GetActiveRespawnPoints(TArray<class AValRespawnPoint*>* OutRespawnPoints);
	void GetActivePortals(TArray<class AValObjective_Portal*>* ActivePortals);
	void GetActiveLootExtractions(TArray<class AValObjective_LootExtractionSite*>* OutLootExtractions);
	void GetActiveLoot(TArray<class AValObjective_Loot*>* ActiveLoot);
	void GetActiveClasses(struct GameplayTags_GameplayTagContainer* OutActiveClasses);
	void DecrementClassCount(int32 TeamId, const struct GameplayTags_GameplayTag& Class);
	void ChangeClass(int32 TeamId, const struct GameplayTags_GameplayTag& OldClass, const struct GameplayTags_GameplayTag& NewClass);
	void AddSpawnedLegendaryArtifact(const struct Valhalla_LegendaryArtifactData& ArtifactToAdd);
	void AddPlayerWithLegendary(class AActor* Player);
	void AddActorToPortal(int32 TeamNumber);
};

// 0x308 (0x1120 - 0xE18)
// Class Valhalla.ValGameState_Dungeon
class AValGameState_Dungeon : public AValGameState_Frontier
{
public:
	FMulticastInlineDelegateProperty_            OnDungeonSeed;                                     // 0xE18(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnUseGridBasedFog;                                 // 0xE28(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActiveDungeonPortals;                            // 0xE38(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHackablePanelLocations;                          // 0xE48(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerEmissivesEnabledChanged;                   // 0xE58(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct CoreUObject_RandomStream              NamedRandomStream;                                 // 0xE68(0x8)(ZeroConstructor, NoDestructor, Protected, NativeAccessSpecifierProtected)
	int32                                        R_DungeonSeed;                                     // 0xE70(0x4)(Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_575E[0x4];                                     // Fixing Size After Last Property  
	TMap<class FName, struct CoreUObject_Int32Range> NamedSeededRandsToGenerate;                        // 0xE78(0x50)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, int32>                     NamedSeededRands;                                  // 0xEC8(0x50)(Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class AValDungeonPortal*>             R_ActiveDungeonPortals;                            // 0xF18(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<struct CoreUObject_Vector2f>          R_HackablePanelLocations;                          // 0xF28(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	bool                                         R_bShowDungeonPortalWorldUI;                       // 0xF38(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bGridBasedFog;                                   // 0xF39(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_575F[0x6];                                     // Fixing Size After Last Property  
	TMap<struct CoreUObject_IntPoint, struct Valhalla_DungeonCellObjects> CellBucketsMap;                                    // 0xF40(0x50)(Protected, NativeAccessSpecifierProtected)
	TArray<struct CoreUObject_IntPoint>          SortedCellBuckets;                                 // 0xF90(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<TWeakObjectPtr<class UObject>, class UStaticMesh*> MeshSwapMap;                                       // 0xFA0(0x50)(Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_5760[0x8];                                     // Fixing Size After Last Property  
	class UValCellDestructionConfig*             CellDestructionConfig;                             // 0xFF8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5761[0xF8];                                    // Fixing Size After Last Property  
	int32                                        BatchSize;                                         // 0x10F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5762[0x4];                                     // Fixing Size After Last Property  
	TArray<TSoftObjectPtr<class UWorld>>         LevelsToUnloadPostWait;                            // 0x1100(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                         R_bPlayerEmissivesEnabled;                         // 0x1110(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5763[0xF];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValGameState_Dungeon* GetDefaultObj();

	void UnloadStreamLevelCompleted();
	void SetPlayerEmissivesEnabled(bool bPlayerEmissivesEnabled);
	void SetDungeonSeed(int32 NewSeed);
	struct CoreUObject_IntPoint RegisterObjectToCell(class UObject* CellObject);
	void RegisterObjectForMeshSwap(class UObject* CellObject, class UStaticMesh* StaticMesh);
	void RegisterCellObject(struct CoreUObject_IntPoint& CellCenter, class UObject* CellObject);
	void OnRep_PlayerEmissivesEnabled();
	void OnRep_HackablePanelLocations();
	void OnRep_GridBasedFog();
	void OnRep_DungeonSeed();
	void OnRep_ActiveDungeonPortals();
	bool IsLocationInFog(struct CoreUObject_Vector& InLocation, float BufferDistance);
	void HideCellObjects(struct CoreUObject_IntPoint& CellBucketKey);
	void HideActorObject(class AActor* ActorObject, enum class EChannelToRemove ChannelToRemove);
	bool GetShowDungeonPortalsWorldUI();
	bool GetPlayerEmissivesEnabled();
	bool GetNamedSeededRand(class FName& SeededRandName, int32* OutValue);
	void GetHackablePanelLocations(TArray<struct CoreUObject_Vector2f>* Locations);
	bool GetGridBasedFog();
	int32 GetDungeonSeed();
	void GetActiveDungeonPortals(TArray<class AValDungeonPortal*>* ActiveDungeonPortals);
	bool DeregisterCellObject(struct CoreUObject_IntPoint& CellCenter, class UObject* CellObject);
	void CheckForFogDestroyedObjects();
	void BatchRemoveCollision();
};

// 0x108 (0xAA0 - 0x998)
// Class Valhalla.ValGameState_Lobby
class AValGameState_Lobby : public AValGameState
{
public:
	uint8                                        Pad_5767[0x10];                                    // Fixing Size After Last Property  
	TArray<struct Valhalla_AbilityConfig>        R_LoadoutAbilities;                                // 0x9A8(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_AbilityConfig>        R_LoadoutPassives;                                 // 0x9B8(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_AbilityConfig>        R_LoadoutPassiveSlots;                             // 0x9C8(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_WeaponCosmeticConfig> R_WeaponCosmeticConfigs;                           // 0x9D8(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	class UValMasteriesConfigData*               R_MasteriesConfig;                                 // 0x9E8(0x8)(Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValCallToActionManager*               CallToActionManager;                               // 0x9F0(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnMasteriesConfigDataLoaded;                       // 0x9F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAffectedAbilitiesDataLoaded;                     // 0xA08(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_5768[0x88];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValGameState_Lobby* GetDefaultObj();

	void OnRep_WeaponCosmeticConfigs();
	void OnRep_MasteriesConfig();
	void OnRep_LoadoutPassiveSlots();
	void OnRep_LoadoutPassives();
	void OnRep_LoadoutAbilities();
	bool IsMasteryConfigLoaded();
	void GetWeaponCosmeticConfigs(TArray<struct Valhalla_WeaponCosmeticConfig>* WeaponCosmeticConfigs);
	void GetPassivesAffectingAbilityByID(int32 AbilityID, TArray<struct Valhalla_ValAbilityAffectingPassiveInfo>* AffectingPassivesArray);
	class UValItemAsset* GetMasteryItemAssetForLevel(enum class EPlayerProperty MasteryType, int32 Level);
	void GetLoadoutPassiveSlots(TArray<struct Valhalla_AbilityConfig>* LoadoutPassiveSlots);
	void GetLoadoutPassives(TArray<struct Valhalla_AbilityConfig>* LoadoutPassives);
	void GetLoadoutAbilities(TArray<struct Valhalla_AbilityConfig>* LoadoutAbilities);
	class AValCallToActionManager* GetCallToActionManager();
};

// 0x2A0 (0x790 - 0x4F0)
// Class Valhalla.ValGameUserSettings
class UValGameUserSettings : public URHGameUserSettings
{
public:
	FMulticastInlineDelegateProperty_            OnSettingsChanged;                                 // 0x4F0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFOVUpdatedDel;                                   // 0x500(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGammaUpdatedDel;                                 // 0x510(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bBackgroundAudio;                                  // 0x520(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         AutoSprint;                                        // 0x521(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         ManualJetpackThrust;                               // 0x522(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         InvertYAxis;                                       // 0x523(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        AimingSensitivity;                                 // 0x524(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        GamepadSensitivity;                                // 0x528(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        GamepadAimingSensitivity;                          // 0x52C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        DamageNumberType;                                  // 0x530(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        AimingMode;                                        // 0x534(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        CrouchMode;                                        // 0x538(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDeployablePreview;                                // 0x53C(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDisableCameraBob;                                 // 0x53D(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5789[0x2];                                     // Fixing Size After Last Property  
	int32                                        ReticleType;                                       // 0x540(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        ReticleShadowOpacity;                              // 0x544(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        NetStats;                                          // 0x548(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        FPSStats;                                          // 0x54C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        IgnoreLOS;                                         // 0x550(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         ShowQADebug;                                       // 0x554(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_578B[0x3];                                     // Fixing Size After Last Property  
	int32                                        HideNameplateInMatchLobby;                         // 0x558(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        ShowDamageNumbers;                                 // 0x55C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_PlayerContract>       PlayerContracts;                                   // 0x560(0x10)(ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	enum class EFSRQualityMode                   FSRQualityMode;                                    // 0x570(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         ShowAccuracyInfo;                                  // 0x571(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         CanSpectateEnemies;                                // 0x572(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         AutoDetectGraphics;                                // 0x573(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FOV;                                               // 0x574(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        Gamma;                                             // 0x578(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_FloatRange                FOVMinMax;                                         // 0x57C(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_FloatRange                GammaMinMax;                                       // 0x58C(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_578D[0x4];                                     // Fixing Size After Last Property  
	TMap<class FName, class USoundClass*>        SoundClasses;                                      // 0x5A0(0x50)(Protected, NativeAccessSpecifierProtected)
	class USoundMix*                             DefaultSoundMix;                                   // 0x5F0(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_578E[0x18];                                    // Fixing Size After Last Property  
	float                                        LowScreenPercentage;                               // 0x610(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        NormalScreenPercentage;                            // 0x614(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Valhalla_PlayerXPInfo                 PlayerXPInfo;                                      // 0x618(0x60)(Config, Protected, NativeAccessSpecifierProtected)
	struct Valhalla_MatchSummaryData             MatchSummaryData;                                  // 0x678(0x30)(Config, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_578F[0x50];                                    // Fixing Size After Last Property  
	bool                                         bSquadsQueueSelected;                              // 0x6F8(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bFillParty;                                        // 0x6F9(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bValPushToTalkEnabled;                             // 0x6FA(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bValVoiceChatEnabled_SV;                           // 0x6FB(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ValVoiceChatVolume;                                // 0x6FC(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                VoiceChatInputDevice;                              // 0x700(0x10)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                VoiceChatOutputDevice;                             // 0x710(0x10)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        FrameRateLimitOverride;                            // 0x720(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHasCompletedTutorial;                             // 0x724(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5790[0x3];                                     // Fixing Size After Last Property  
	TSet<int32>                                  UnviewedUnlocks;                                   // 0x728(0x50)(Config, Protected, NativeAccessSpecifierProtected)
	class FString                                LastSelectedQueue;                                 // 0x778(0x10)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDebug_UseEnhancedInput;                           // 0x788(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5791[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValGameUserSettings* GetDefaultObj();

	void UpdatePlayerContract(struct Valhalla_PlayerContract& Contract);
	void SetVoiceChatVolume(float Value);
	void SetVoiceChatOutputDevice(const class FString& SelectedVoiceChatOutputDevice);
	void SetVoiceChatInputDevice(const class FString& SelectedVoiceChatInputDevice);
	void SetVoiceChatEnabled(bool Value);
	void SetSquadsQueueSelected(bool bNewValue);
	void SetShowQADebug(bool Value);
	void SetShowDamageNumbers(int32 Value);
	void SetShowAccuracyInfo(bool Value);
	void SetScreenPercentage(int32 Value);
	void SetReticleType(int32 Value);
	void SetReticleShadowOpacity(int32 Value);
	void SetPushToTalkEnabled(bool Value);
	void SetNetStats(int32 Value);
	void SetManualJetpackThrust(bool Value);
	void SetLastSelectedQueue(const class FString& NewLastSelectedQueue);
	void SetInvertYAxis(bool Value);
	void SetIgnoreLOS(int32 Value);
	void SetHideNameplateInMatchLobby(int32 Value);
	void SetHasCompletedTutorial(bool NewHasCompletedTutorial);
	void SetGamma(class UObject* WorldContextObject, float Value);
	void SetGamepadSensitivity(int32 Value);
	void SetGamepadAimingSensitivity(int32 Value);
	void SetFSRQualityMode(enum class EFSRQualityMode NewMode);
	void SetFrameRateLimitOverride(int32 NewFrameRateLimitOverride);
	void SetFPSStats(int32 Value);
	void SetFOV(float Value);
	void SetFillParty(bool bNewFillParty);
	void SetDisableCameraBob(bool Value);
	void SetDeployablePreview(bool Value);
	void SetDamageNumberType(int32 Value);
	void SetCurrentXP(int32 Value);
	void SetCrouchMode(int32 Value);
	void SetCanSpectateEnemies(bool Value);
	void SetBackgroundAudio(bool Value);
	void SetAutoSprint(bool Value);
	void SetAutoDetectGraphics(bool Value);
	void SetAntiAliasingType(int32 Value);
	void SetAimingSensitivity(int32 Value);
	void SetAimingMode(int32 Value);
	void RemoveUnviewedUnlock(int32 ItemIdToRemove);
	void RemovePlayerContract(class FName& ContractId);
	void OnGammaUpdated(class UObject* WorldContextObject);
	void OnFOVUpdated();
	bool IsItemUnviewd(int32 ItemId);
	float GetVoiceChatVolume();
	class FString GetVoiceChatInputDevice();
	bool GetVoiceChatEnabledVal();
	TSet<int32> GetUnviewedUnlocks();
	bool GetSquadsQueueSelected();
	bool GetShowQADebug();
	int32 GetShowDamageNumbers();
	bool GetShowAccuracyInfo();
	int32 GetScreenPercentage();
	int32 GetReticleType();
	int32 GetReticleShadowOpacity();
	bool GetPushToTalkEnabledVal();
	struct Valhalla_PlayerXPInfo GetPlayerXPInfo();
	void GetPlayerContracts(TArray<struct Valhalla_PlayerContract>* Contracts);
	int32 GetNetStats();
	bool GetMaxResolution(const struct CoreUObject_IntPoint& MaxResolution);
	bool GetManualJetpackThrust();
	class FString GetLastSelectedQueue();
	bool GetInvertYAxis();
	bool GetIntSetting(class FName SettingName, int32* IntVal);
	int32 GetIgnoreLOS();
	int32 GetHideNameplateInMatchLobby();
	bool GetHasCompletedTutorial();
	struct CoreUObject_FloatRange GetGammaMinMax();
	float GetGamma();
	int32 GetGamepadSensitivity();
	int32 GetGamepadAimingSensitivity();
	enum class EFSRQualityMode GetFSRQualityMode();
	bool GetFSREnabled();
	int32 GetFrameRateLimitOverride();
	int32 GetFPSStats();
	struct CoreUObject_FloatRange GetFOVMinMax();
	float GetFOV();
	bool GetFloatSetting(class FName SettingName, float* FloatVal);
	bool GetFillParty();
	bool GetDisableCameraBob();
	bool GetDeployablePreview();
	bool GetDebugUseEnhancedInput();
	int32 GetDamageNumberType();
	int32 GetCrouchMode();
	bool GetCanSpectateEnemies();
	bool GetBoolSetting(class FName SettingName, bool* BoolVal);
	bool GetBackgroundAudio();
	bool GetAutoSprint();
	bool GetAutoDetectGraphics();
	int32 GetAntiAliasingType();
	int32 GetAimingMode();
	void CachePlayerXP();
	float BP_GetLastGPUBenchmarkResult();
	float BP_GetLastCPUBenchmarkResult();
	void ApplySoundSettings();
	void AddUnviewedUnlocks(TArray<int32>& UnlockedItemIds);
	void AddUnviewedUnlock(int32 UnlockedItemId);
	void AddPlayerXP(int32 Value);
	void AddPlayerContract(struct Valhalla_PlayerContract& Contract);
};

// 0x0 (0x3B0 - 0x3B0)
// Class Valhalla.ValGameViewportClient
class UValGameViewportClient : public UGameViewportClient
{
public:

	static class UClass* StaticClass();
	static class UValGameViewportClient* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValGroundAffectInterface
class IValGroundAffectInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IValGroundAffectInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Valhalla.ValTrapInterface
class IValTrapInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IValTrapInterface* GetDefaultObj();

};

// 0x128 (0x3C0 - 0x298)
// Class Valhalla.ValInteractableMission
class AValInteractableMission : public AActor
{
public:
	uint8                                        Pad_579B[0x8];                                     // Fixing Size After Last Property  
	TArray<class AValCharacter*>                 CharactersThatCanInteract;                         // 0x2A0(0x10)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                        Pad_579C[0x18];                                    // Fixing Size After Last Property  
	class USphereComponent*                      InteractCollisionComp;                             // 0x2C8(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DefaultChannelTime;                                // 0x2D0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_579D[0x4];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_MissionPhaseInfo>     MissionPhases;                                     // 0x2D8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTagContainer     MissionTagsForInteraction;                         // 0x2E8(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_579E[0x50];                                    // Fixing Size After Last Property  
	TArray<struct CoreUObject_Transform>         BotSpawnLocations;                                 // 0x358(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class AValUtopiaConstructor*                 OwningConstructor;                                 // 0x368(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_579F[0x30];                                    // Fixing Size After Last Property  
	class FText                                  InteractText;                                      // 0x3A0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class AValCharacter*                         R_Channeler;                                       // 0x3B8(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValInteractableMission* GetDefaultObj();

	void SpawnPhaseBots(class AValCharacter* Initiator, int32 MissionPhaseIndex);
	void SetOwningConstructor(class AValUtopiaConstructor* InConstructor);
	void SetCachedChanneler(class AValCharacter* Initiator);
	void RegisterBotSpawnLocation(struct CoreUObject_Transform& InSpawnLocation);
	void OnLootItemsLoaded(int32 Phase);
	void OnLootAssetLoaded(int32 Phase);
	void InteractionEventTriggered(class AValCharacter* Initiator, int32 MissionPhaseIndex, enum class EInteractionEventType EventType);
	class AValUtopiaConstructor* GetOwningConstructor();
	int32 GetMissionPhaseForPlayer(class AValPlayerController* ValPlayerController);
	class UPrimitiveComponent* GetInteractComponent();
	float GetChannelTime(class AValCharacter* Initiator);
	class AValCharacter* GetCachedChanneler();
	enum class EInteractionFailureType GetBlockInteractReason(class AValCharacter* Initiator);
	bool DoesPlayerHaveRequiredMissionTags(class AValCharacter* Initiator);
	bool DoesPlayerHaveRequiredItems(class AValCharacter* Initiator, int32 MissionPhase);
	bool DoesPlayerHaveEnoughMissionSlotsSpace(class AValCharacter* Initiator);
};

// 0x118 (0x4C0 - 0x3A8)
// Class Valhalla.ValDeathCrate
class AValDeathCrate : public AValBaseCrate
{
public:
	uint8                                        Pad_57A7[0x8];                                     // Fixing Size After Last Property  
	class FString                                R_OwnerName;                                       // 0x3B0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_OwnerPlayerId;                                   // 0x3C0(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        R_OwnerAccountLevel;                               // 0x3C4(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_57A8[0x3];                                     // Fixing Size After Last Property  
	int32                                        R_OwnerEntryCost;                                  // 0x3C8(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_DeathcrateDuration;                              // 0x3CC(0x4)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_Vector                    R_LaunchVelocity;                                  // 0x3D0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<enum class ERarity, int32>              DogTagValueRanges;                                 // 0x3E8(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class USphereComponent*                      DespawnCheckCollisionComp;                         // 0x438(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    DeathcrateTimer;                                   // 0x440(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_57A9[0x48];                                    // Fixing Size After Last Property  
	bool                                         bPlayerBotDeathCrate;                              // 0x490(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_57AA[0x3];                                     // Fixing Size After Last Property  
	float                                        LootIncreaseInterval;                              // 0x494(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        LootPerInterval;                                   // 0x498(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MaxGeneratedLoot;                                  // 0x49C(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CrateDespawnTime;                                  // 0x4A0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_57AB[0x4];                                     // Fixing Size After Last Property  
	struct Engine_TimerHandle                    DespawnTimerHandle;                                // 0x4A8(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UValItemAsset>>  DefaultPlayerDeathDrops;                           // 0x4B0(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValDeathCrate* GetDefaultObj();

	void SetLaunchVelocity(const struct CoreUObject_Vector& Velocity);
	void OnRep_OwnerName();
	void OnPlayerCrateCreated(int32 PlayerTeam);
	void OnLootItemsLoaded();
	void OnLootAssetLoaded(int32 BotLootIncrease);
	void OnHoverStart(class AValCharacter* Initiator);
	void OnHoverEnd(class AValCharacter* Initiator);
	void OnEndBestInteractable(class AValCharacter* Initiator);
	void OnDespawnTimerEnd();
	void OnDespawnCheckComponentOverlapped(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct Engine_HitResult& SweepResult);
	void OnDespawnCheckComponentEndOverlapped(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnBecomeBestInteractable(class AValCharacter* Initiator);
	enum class ERarity GetDogTagRarity(int32 Value);
	class USphereComponent* GetDespawnCheckCollisionComp();
	void DoLaunchSequence();
};

// 0x10 (0x3B8 - 0x3A8)
// Class Valhalla.ValDropCrate
class AValDropCrate : public AValBaseCrate
{
public:
	float                                        R_DropcrateDuration;                               // 0x3A8(0x4)(Edit, BlueprintVisible, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_57AC[0x4];                                     // Fixing Size After Last Property  
	struct Engine_TimerHandle                    DropcrateTimer;                                    // 0x3B0(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValDropCrate* GetDefaultObj();

	void EndInteraction();
};

// 0x170 (0x518 - 0x3A8)
// Class Valhalla.ValLootCrate
class AValLootCrate : public AValBaseCrate
{
public:
	FMulticastInlineDelegateProperty_            OnOpened;                                          // 0x3A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFirstOpened;                                     // 0x3B8(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class AValUtopiaConstructor*                 OwningConstructor;                                 // 0x3C8(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AValCharacter*>                 CharactersThatCanInteract;                         // 0x3D0(0x10)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                        Pad_57B1[0x38];                                    // Fixing Size After Last Property  
	bool                                         R_bCrateActive;                                    // 0x418(0x1)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bWasOpened;                                      // 0x419(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_57B2[0x2];                                     // Fixing Size After Last Property  
	TWeakObjectPtr<class AValCharacter>          R_BoobyTrapInstigator;                             // 0x41C(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHasBeenOpenedBefore;                              // 0x424(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHasBeenInteractedWithBefore;                      // 0x425(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_57B3[0x2];                                     // Fixing Size After Last Property  
	int32                                        NumLootDropsMin;                                   // 0x428(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        NumLootDropsMax;                                   // 0x42C(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UValLootAsset>          LootAsset;                                         // 0x430(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<enum class ERarity, int32>              RarityToWeightValues;                              // 0x458(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TArray<enum class ELateralDirection>         SpawnLocations;                                    // 0x4A8(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<enum class ELateralDirection, int32>    LocationOffsetMap;                                 // 0x4B8(0x50)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                         bDestroyOnBotSpawn;                                // 0x508(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_57B4[0x3];                                     // Fixing Size After Last Property  
	float                                        BotSpawnLingerTime;                                // 0x50C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsHighSecCrate;                                   // 0x510(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_57B5[0x7];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValLootCrate* GetDefaultObj();

	void UpdateBoobyTrapVFX();
	bool TryToOpen(class AValCharacter* Initiator);
	void StartChanneledInteract(class AValCharacter* Initiator);
	bool SpawnLoot();
	void SpawnArtifact();
	void SetOwningConstructor(class AValUtopiaConstructor* InConstructor);
	void SetFullyOpened();
	void ResetCrate();
	void PredictInteract(class AValCharacter* Initiator);
	void PredictedOpen();
	void OnRep_CrateActive();
	void OnRep_BoobyTrapInstigator();
	void OnLootItemsLoaded();
	void OnLootAssetLoaded();
	void OnInActive();
	void OnHoverStart(class AValCharacter* Initiator);
	void OnHoverEnd(class AValCharacter* Initiator);
	void OnEndBestInteractable(class AValCharacter* Initiator);
	void OnBecomeBestInteractable(class AValCharacter* Initiator);
	void LingerTimerExpired();
	void HandleTriggeredAlarmUX(class AValBotSpawner* botSpawner);
	void HandleFirstOpen(class AValCharacter* Initiator);
	void HandleFirstInteract(class AValCharacter* Initiator);
	void HandleBotsSpawned(class AValBotSpawner* botSpawner);
	class AValUtopiaConstructor* GetOwningConstructor();
	bool GetIsHighSecCrate();
	class AValCharacter* GetBoobyTrapInstigator();
	void Explode();
	void ClientHandleTriggeredAlarmUX(class AValBotSpawner* botSpawner);
};

// 0x2338 (0x29D8 - 0x6A0)
// Class Valhalla.ValCharacter
class AValCharacter : public AValCharacterBase
{
public:
	uint8                                        Pad_586E[0x28];                                    // Fixing Size After Last Property  
	class USkeletalMesh*                         ServerCollisionSkeleton;                           // 0x6C8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                         ServerDownedCollisionSkeleton;                     // 0x6D0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                         ClientCollisionSkeleton;                           // 0x6D8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                Mesh1P;                                            // 0x6E0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                FP_Gun;                                            // 0x6E8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                TP_Gun;                                            // 0x6F0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponentBudgeted*        JetpackMesh;                                       // 0x6F8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>            WeaponRarityMaterials;                             // 0x700(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                  GunDigit1sParam;                                   // 0x710(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  GunDigit10sParam;                                  // 0x718(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  GunDigit100sParam;                                 // 0x720(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  GunAmmoMaxParam;                                   // 0x728(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  GunAmmoCurrentParam;                               // 0x730(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  GunAmmoClipsParam;                                 // 0x738(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  IsLocallyViewed1pParam;                            // 0x740(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                          HeadBoneNames;                                     // 0x748(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                          ShieldBlockBoneNames;                              // 0x758(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct CoreUObject_Vector                    Local3PMeshOffsetIn1P;                             // 0x768(0x18)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_Vector                    InitialLocal3PMeshOffset;                          // 0x780(0x18)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                 R_AITargetedActor;                                 // 0x798(0x8)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                 LastAITargetedActor;                               // 0x7A0(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                 LatcherActor;                                      // 0x7A8(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                       FP_MuzzleLocation;                                 // 0x7B0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                       TP_MuzzleLocation;                                 // 0x7B8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                         R_BotMesh;                                         // 0x7C0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UValAnimInstance>          R_BotAnimInstanceClass;                            // 0x7C8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_Vector                    R_BotMeshScale;                                    // 0x7D0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AValBotSpawnVolume*                    R_BotSpawnVolume;                                  // 0x7E8(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        R_BotStartingPatrolIndex;                          // 0x7F0(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5870[0x4];                                     // Fixing Size After Last Property  
	TArray<struct CoreUObject_Vector>            BotPatrolPoints;                                   // 0x7F8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct CoreUObject_Vector                    LastBotSquadWaypoint;                              // 0x808(0x18)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5871[0x8];                                     // Fixing Size After Last Property  
	bool                                         bBotPatrolBackward;                                // 0x828(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5872[0x7];                                     // Fixing Size After Last Property  
	class UValBotData*                           BotConfigDataToAssign;                             // 0x830(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UValBotData*                           R_BotConfigData;                                   // 0x838(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Engine_Vector_NetQuantize100          R_CustomViewRotation;                              // 0x840(0x18)(BlueprintVisible, Net, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class AValCharacter>>  SupportingBots;                                    // 0x858(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UBotInitData*>                  SpawnedAlarmBots;                                  // 0x868(0x10)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSpawnedAlarmBotsDied;                            // 0x878(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AValCharacter>          TriggerCharacter;                                  // 0x888(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                      FirstPersonCameraComponent;                        // 0x890(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpringArmComponent*                   ThirdPersonCameraBoom;                             // 0x898(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                      ThirdPersonCameraComponent;                        // 0x8A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UValMeshMergeComponent*                MeshMergeComp;                                     // 0x8A8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UViewBobComponent*                     CameraViewBobComponent;                            // 0x8B0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UViewBobComponent*                     WeaponViewBobComponent;                            // 0x8B8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UValKickbackComponent*                 KickbackComponent;                                 // 0x8C0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UValPositionHistoryComponent*          PositionHistoryComp;                               // 0x8C8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UValCrouchComponent*                   CrouchComponent;                                   // 0x8D0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AValCameraHitFeedbackActor*            CameraHitFeedbackActor;                            // 0x8D8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AValCameraHitFeedbackActor> CameraHitFeedbackActorClass;                       // 0x8E0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct GameplayAbilities_GameplayAbilitySpecHandle> LoadoutAbilityUpgradeHandles;                      // 0x8E8(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<struct GameplayTags_GameplayTag, struct Valhalla_PermanentEquippedModData> PermanentEquippedModData;                          // 0x8F8(0x50)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct GameplayTags_GameplayTagContainer     PermanentlyEquippedModSlots;                       // 0x948(0x20)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>      ArmsMeshMaterials;                                 // 0x968(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*              ThirdPersonMeshMaterial;                           // 0x978(0x8)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>      GunVFXMaterials;                                   // 0x980(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class UNiagaraComponent*>             SpawnedRemainingAmmoFX;                            // 0x990(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                        DefaultJumpHeight;                                 // 0x9A0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5873[0x4];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            WallRotationSetDel;                                // 0x9A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct CoreUObject_Vector                    R_WallRotation;                                    // 0x9B8(0x18)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsCharmed;                                        // 0x9D0(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5874[0x7];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnBotResetTimerUpdated;                            // 0x9D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct Valhalla_BotResetTimerData            TimerData;                                         // 0x9E8(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                         bShowTimerData;                                    // 0x9F8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5875[0x7];                                     // Fixing Size After Last Property  
	class UBehaviorTree*                         BehaviorTree;                                      // 0xA00(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PrestreamDeviceTexturesDuration;                   // 0xA08(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5876[0x1C];                                    // Fixing Size After Last Property  
	bool                                         bUseMeshHitDetection;                              // 0xA28(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5877[0x7];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnBotSpawnVolumeSet;                               // 0xA30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bIsPet;                                            // 0xA40(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDoesNotDie;                                       // 0xA41(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        NavLinkAgentBitmask;                               // 0xA42(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5879[0x1];                                     // Fixing Size After Last Property  
	float                                        CrouchHeightAdjust;                                // 0xA44(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_Vector                    CachedRelativeCameraLocation;                      // 0xA48(0x18)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BaseTurnRate;                                      // 0xA60(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BaseLookUpRate;                                    // 0xA64(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_587A[0x1];                                     // Fixing Size After Last Property  
	bool                                         bIs3pCheatActive;                                  // 0xA69(0x1)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_587B[0x2];                                     // Fixing Size After Last Property  
	float                                        RemainingOutlineHitPulseTime;                      // 0xA6C(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OutlineHitPulseTotalTime;                          // 0xA70(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OutlineHitPulseIntensity;                          // 0xA74(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           OutlineHitPulseDecayCurve;                         // 0xA78(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bWantsToAim;                                       // 0xA80(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsAiming;                                         // 0xA81(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_587D[0x2];                                     // Fixing Size After Last Property  
	float                                        LastStartedAiming;                                 // 0xA84(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasAimCapableWeaponEquipped;                      // 0xA88(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsMounted;                                        // 0xA89(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFlinchBlendingIn;                                 // 0xA8A(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_587E[0x3D];                                    // Fixing Size After Last Property  
	TSubclassOf<class UCameraModifier>           AimingCameraModifier;                              // 0xAC8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraModifier*                       AimingCameraModifierInstance;                      // 0xAD0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraModifier>           ThirdPersonInterpCameraModifier;                   // 0xAD8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraModifier*                       ThirdPersonInterpCameraModifierInstance;           // 0xAE0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraModifier>           KickbackCameraModifier;                            // 0xAE8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraModifier*                       KickbackCameraModifierInstance;                    // 0xAF0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraModifier>           CrouchCameraModifier;                              // 0xAF8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraModifier*                       CrouchCameraModifierInstance;                      // 0xB00(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraModifier>           PersistentOutlineCameraModifier;                   // 0xB08(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraModifier*                       PersistentOutlineCameraModifierInstance;           // 0xB10(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraModifier>           SkydiveCameraModifier;                             // 0xB18(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>           SkydiveRecoveryEffectClass;                        // 0xB20(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5880[0x8];                                     // Fixing Size After Last Property  
	TSubclassOf<class UCameraModifier>           FogCameraModifier;                                 // 0xB30(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraModifier*                       FogCameraModifierInstance;                         // 0xB38(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraModifier>           FirstPersonAnimationCameraModifier;                // 0xB40(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraModifier*                       FirstPersonAnimationCameraModifierInstance;        // 0xB48(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowAllySilhouette;                               // 0xB50(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsDownable;                                       // 0xB51(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHitMovementDebuff;                                // 0xB52(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         R_bCanBeDowned;                                    // 0xB53(0x1)(Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         R_bCanRespawn;                                     // 0xB54(0x1)(Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5881[0x3];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnStartSwappingWeaponDel;                          // 0xB58(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UValAimAssistComponent*                AimAssistComponent;                                // 0xB68(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeBetweenScrolls;                                // 0xB70(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5882[0x3C];                                    // Fixing Size After Last Property  
	float                                        AimingBlendSpeed;                                  // 0xBB0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5883[0x4];                                     // Fixing Size After Last Property  
	TSubclassOf<class UCameraModifier>           SprintCameraModifierClass;                         // 0xBB8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraModifier*                       SprintCameraModifier;                              // 0xBC0(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraModifier*                       PickupCameraModifier;                              // 0xBC8(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FlinchBlendInSpeed;                                // 0xBD0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FlinchBlendOutSpeed;                               // 0xBD4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCameraModifier>           FlinchCameraModifierClass;                         // 0xBD8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraModifier*                       FlinchCameraModifier;                              // 0xBE0(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCameraModifier>           LatchCameraModifierClass;                          // 0xBE8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraModifier*                       LatchCameraModifier;                               // 0xBF0(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCameraModifier>           TookDamageCameraModifierClass;                     // 0xBF8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraModifier*                       TookDamageCameraModifier;                          // 0xC00(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                           TookDamageCameraModifierDurationMapping;           // 0xC08(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    TookDamageCameraModifierTimer;                     // 0xC10(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHasFullScreenScope;                               // 0xC18(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5885[0x3];                                     // Fixing Size After Last Property  
	float                                        LowHealthPercent;                                  // 0xC1C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputMappingContext*                  DefaultInputMappingContext;                        // 0xC20(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValCharacterInputConfigData*          InputActions;                                      // 0xC28(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValAbilitySystemComponent*            AbilitySystemComponent;                            // 0xC30(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValAttributeSet*                      Attributes;                                        // 0xC38(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>           DefaultAttributeEffect;                            // 0xC40(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5886[0x18];                                    // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnAbilityPropertyModsUpdated;                      // 0xC60(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<struct GameplayTags_GameplayTag, TSubclassOf<class UValGameplayAbility>> DefaultAbilities;                                  // 0xC70(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UValGameplayAbility>> DefaultPassiveAbilities;                           // 0xCC0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct GameplayTags_GameplayTag>      SwappableSlots;                                    // 0xCD0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct GameplayTags_GameplayTag>      ScrollableSlots;                                   // 0xCE0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              SwapEquipSlot;                                     // 0xCF0(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              PrevEquipSlot;                                     // 0xCF8(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              PendingEquipSlot;                                  // 0xD00(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Valhalla_ValCharacterSwappingInfo     R_SwappingInfo;                                    // 0xD08(0x18)(Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTagContainer     CooldownTagsForReset;                              // 0xD20(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                         bStartThirdPerson;                                 // 0xD40(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5887[0x7];                                     // Fixing Size After Last Property  
	struct GameplayTags_GameplayTagContainer     LoadoutBlockTags;                                  // 0xD48(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnPlayerStateReady;                                // 0xD68(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnThirdPerson;                                     // 0xD78(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMeshVisibilityUpdatedDel;                        // 0xD88(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAimingState;                                     // 0xD98(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGameplayCueAimingState;                          // 0xDA8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFullyAimed;                                      // 0xDB8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFullyUnAimed;                                    // 0xDC8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFullyAimedChanged;                               // 0xDD8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStartAimed;                                      // 0xDE8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStartUnAimed;                                    // 0xDF8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnVaulting;                                        // 0xE08(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTargetImpacted;                                  // 0xE18(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnViewRotationUpdated;                             // 0xE28(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         CachedFullyAimed;                                  // 0xE38(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bBotHasDealtDamage;                                // 0xE39(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5889[0x6];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            On3PWeaponSwap;                                    // 0xE40(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Pad_588A[0x48];                                    // Fixing Size After Last Property  
	bool                                         bTeamOutlineEnabled;                               // 0xE98(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRequireMeshMergeToApplyTeamOutline;               // 0xE99(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_588B[0x2];                                     // Fixing Size After Last Property  
	struct CoreUObject_LinearColor               FriendlyTeamColor;                                 // 0xE9C(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_LinearColor               EnemyTeamColor;                                    // 0xEAC(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_LinearColor               EnemyBotTeamColor;                                 // 0xEBC(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_LinearColor               DeadColor;                                         // 0xECC(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_LinearColor               ScrubTeamColor;                                    // 0xEDC(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  ThirdPersonGunSocket;                              // 0xEEC(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  JetpackSocketName;                                 // 0xEF4(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bReceivesLoadout;                                  // 0xEFC(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanCapturePoints;                                 // 0xEFD(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanGainXP;                                        // 0xEFE(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_588C[0x1];                                     // Fixing Size After Last Property  
	float                                        PostOverburnRechargeThreshold;                     // 0xF00(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_588D[0x4];                                     // Fixing Size After Last Property  
	class UValThreatComponent*                   ThreatComponent;                                   // 0xF08(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                       TransformComponent;                                // 0xF10(0x8)(Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValCharacterOverlayComponent*         OverlayComponent;                                  // 0xF18(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValOutlineComponent*                  OutlineComponent;                                  // 0xF20(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  PerceptionSocketName;                              // 0xF28(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_588F[0x4];                                     // Fixing Size After Last Property  
	float                                        CrouchOverlayOffset;                               // 0xF34(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        OverlayBaseHeight;                                 // 0xF38(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CurrentCrouchOverlayOffset;                        // 0xF3C(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CrouchOverlayTransitionSpeed;                      // 0xF40(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              MeshAppearanceTag;                                 // 0xF44(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5890[0x4];                                     // Fixing Size After Last Property  
	TArray<struct GameplayTags_GameplayTag>      LoadoutMeshTags;                                   // 0xF50(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UValMergeableMesh*>             MergeableMeshes;                                   // 0xF60(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_5891[0x4];                                     // Fixing Size After Last Property  
	float                                        HardLandThreshold;                                 // 0xF74(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        HardLandRootDuration;                              // 0xF78(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5892[0x4];                                     // Fixing Size After Last Property  
	TSubclassOf<class UGameplayEffect>           RootEffect;                                        // 0xF80(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayAbilities_GameplayEffectSpecHandle RootEffectHandle;                                  // 0xF88(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_5893[0x1B8];                                   // Fixing Size After Last Property  
	bool                                         bIsReloading;                                      // 0x1150(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5894[0x7];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnHealthChanged;                                   // 0x1158(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHealthMaxChanged;                                // 0x1168(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTempHealthChanged;                               // 0x1178(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnShieldChanged;                                   // 0x1188(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnShieldMaxChanged;                                // 0x1198(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTempShieldChanged;                               // 0x11A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnClipAmmoChanged;                                 // 0x11B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnShotsPerFireChanged;                             // 0x11C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnClipAmmoMaxChanged;                              // 0x11D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnReserveAmmoChanged;                              // 0x11E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnReloadSpeedChanged;                              // 0x11F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnReloadMinimumChanged;                            // 0x1208(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAttackSpreadChanged;                             // 0x1218(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnJetpackVerticalBoostChanged;                     // 0x1228(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnJetpackEnergyConsumptionRateChanged;             // 0x1238(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEnergyRegenRateChanged;                          // 0x1248(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEnergyChanged;                                   // 0x1258(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEnergyMaxChanged;                                // 0x1268(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnJetpackOverburnDurationChanged;                  // 0x1278(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAimingMaxSpeedMultiplierChanged;                 // 0x1288(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnKickbackModifierChanged;                         // 0x1298(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnShieldDamageOutputModifierChanged;               // 0x12A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStimSpeedMultiplierChanged;                      // 0x12B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMaxGroundSpeedMultiplierChanged;                 // 0x12C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSprintSpeedMultiplierChanged;                    // 0x12D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSlideSpeedMultiplierChanged;                     // 0x12E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnJumpHeightMultiplierChanged;                     // 0x12F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHealReductionModifierChanged;                    // 0x1308(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFabricatorCostMultiplierChanged;                 // 0x1318(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPerceptionSightDistanceChanged;                  // 0x1328(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPerceptionHearingDistanceChanged;                // 0x1338(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPerceptionPeripheralVisionHalfAngleChanged;      // 0x1348(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPerceptionLoseSightDistanceChanged;              // 0x1358(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCybridBeamDistanceChanged;                       // 0x1368(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCybridAlertStateTimeChanged;                     // 0x1378(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHealthPackUseSpeedModifierChanged;               // 0x1388(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnShieldPackUseSpeedModifierChanged;               // 0x1398(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFlashlightIntensityModifierChanged;              // 0x13A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnChestInteractTimeMultiplierChanged;              // 0x13B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAmmoUsedPerShotChanged;                          // 0x13C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnUniversalAbilityCooldownModifierChanged;         // 0x13D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterMassChanged;                            // 0x13E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_5897[0x10];                                    // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnEnergyEmpty;                                     // 0x1408(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnClipEmpty;                                       // 0x1418(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterLanded;                                 // 0x1428(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterNotFalling;                             // 0x1438(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayUIJiggle;                                    // 0x1448(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterJumped;                                 // 0x1458(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterVaulted;                                // 0x1468(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterMounted;                                // 0x1478(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDied;                                            // 0x1488(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnExtracted;                                       // 0x1498(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnRespawned;                                       // 0x14A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStartedFreeFalling;                              // 0x14B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStoppedFreeFalling;                              // 0x14C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStartedHighSpeedFalling;                         // 0x14D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStoppedHighSpeedFalling;                         // 0x14E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLockUIAmmo;                                      // 0x14F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnNamedAreaUpdated;                                // 0x1508(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStartedCrouch;                                   // 0x1518(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEndedCrouch;                                     // 0x1528(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAmmoDataChanged;                                 // 0x1538(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAmmoSlotRarityChanged;                           // 0x1548(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSprintPressed;                                   // 0x1558(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSkydiveLandingCompleted;                         // 0x1568(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTargetedActorUpdated;                            // 0x1578(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bWeaponMICUnlocked;                                // 0x1588(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bManualUpdateWeaponMIC;                            // 0x1589(0x1)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5899[0x6];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnHealthPercentChanged;                            // 0x1590(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTempHealthPercentChanged;                        // 0x15A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnShieldPercentChanged;                            // 0x15B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTempShieldPercentChanged;                        // 0x15C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnShieldBroken;                                    // 0x15D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AValGATA_LineTrace*                    LineTraceTargetActor;                              // 0x15E0(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValGATA_ShapeTrace*                   ShapeTraceTargetActor;                             // 0x15E8(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        Energy;                                            // 0x15F0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PendingEnergy;                                     // 0x15F4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_589B[0x4];                                     // Fixing Size After Last Property  
	float                                        InitialEnergyCost;                                 // 0x15FC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ShieldValueOnSpawn;                                // 0x1600(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_ActiveMuzzleIndex;                               // 0x1604(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnRespawnFinished;                                 // 0x1608(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterInitialized;                            // 0x1618(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnInitRagdoll;                                     // 0x1628(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bInitializing;                                     // 0x1638(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bExtracted;                                      // 0x1639(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_589C[0x6];                                     // Fixing Size After Last Property  
	struct GameplayTags_GameplayTagContainer     SlotsToDropOnDeath;                                // 0x1640(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class AValPickup>>        AdditionalDropOnDeath;                             // 0x1660(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	float                                        DropConeAngle;                                     // 0x1670(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DropConeMagnitude;                                 // 0x1674(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RagdollVelocityScale;                              // 0x1678(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_FloatRange                RagdollVelocityRange;                              // 0x167C(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShouldRagdoll;                                    // 0x168C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_589E[0x3];                                     // Fixing Size After Last Property  
	float                                        RespawnOnDeathDelay;                               // 0x1690(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_589F[0x4];                                     // Fixing Size After Last Property  
	TSubclassOf<class AActor>                    DeathActorClass;                                   // 0x1698(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    DownExpireTimer;                                   // 0x16A0(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    SpectateTimer;                                     // 0x16A8(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Engine_TimerHandle                    RespawnTimer;                                      // 0x16B0(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_ValAmmoData>          R_AmmoData;                                        // 0x16B8(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTagContainer     SlotsWithAmmoData;                                 // 0x16C8(0x20)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                         bUseInventoryAmmoForReserves;                      // 0x16E8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58A0[0x7];                                     // Fixing Size After Last Property  
	struct CoreUObject_Vector                    LastHitDirection;                                  // 0x16F0(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_Vector                    LastHitLocation;                                   // 0x1708(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  AimKeyName;                                        // 0x1720(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDamagedDel;                                      // 0x1728(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bCanBeHealedByRepairTool;                          // 0x1738(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_58A1[0x7];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnDealtDamage;                                     // 0x1740(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnServerDealtDamageDelegate;                       // 0x1750(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHealingDone;                                     // 0x1760(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSwapRequestUpdated;                              // 0x1770(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPendingDeviceSet;                                // 0x1780(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<struct GameplayTags_GameplayTag, enum class EValAbilityInputID> EquipSlotInput;                                    // 0x1790(0x50)(Edit, Protected, NativeAccessSpecifierProtected)
	TMap<struct GameplayTags_GameplayTag, struct GameplayAbilities_GameplayAbilitySpecHandle> EquipSlots;                                        // 0x17E0(0x50)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_EquipSlot>            R_EquipSlotArray;                                  // 0x1830(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              PrimaryEquipSlotTag;                               // 0x1840(0x8)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              StartingEquipSlotOverride;                         // 0x1848(0x8)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct GameplayAbilities_GameplayAbilitySpecHandle> R_ActivatableHandles;                              // 0x1850(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	struct Valhalla_ValActiveAbilityData         R_ActiveDevice;                                    // 0x1860(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, Net, EditConst, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UValPingComponent*                     PingComponent;                                     // 0x1870(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PingHoldTime;                                      // 0x1878(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58A3[0x28];                                    // Fixing Size After Last Property  
	struct GameplayTags_GameplayTag              LocalActiveDeviceTag;                              // 0x18A4(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayAbilities_GameplayAbilitySpecHandle R_SwappedAbilityHandle;                            // 0x18AC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, EditConst, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayAbilities_GameplayAbilitySpecHandle LocalSwappedAbilityHandle;                         // 0x18B0(0x4)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58A4[0xF4];                                    // Fixing Size After Last Property  
	TArray<struct Valhalla_DeviceUpgradeSlot>    R_DeviceUpgradeEffectsArray;                       // 0x19A8(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnDeviceUpgradeEffectsUpdated;                     // 0x19B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEquipSlotsChanged;                               // 0x19C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEquipSlotUpdated;                                // 0x19D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEquipSlotsUpdated;                               // 0x19E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnShowDeviceAudioVisual;                           // 0x19F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnUpdateDeviceAudioVisual;                         // 0x1A08(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnShowAbilityAudioVisual;                          // 0x1A18(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActivatablesUpdated;                             // 0x1A28(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDeployablePlaced;                                // 0x1A38(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDeployableCanceled;                              // 0x1A48(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_58A5[0x18];                                    // Fixing Size After Last Property  
	float                                        Bob;                                               // 0x1A70(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BobPeriod;                                         // 0x1A74(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_Vector                    WalkBob;                                           // 0x1A78(0x18)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           BobSpeedMapping;                                   // 0x1A90(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WeaponLeadingYaw;                                  // 0x1A98(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WeaponLeadingPitch;                                // 0x1A9C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct Engine_TimerHandle                    MonkeyTimerHandle;                                 // 0x1AA0(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_58A6[0x28];                                    // Fixing Size After Last Property  
	float                                        MaxWeaponLeadingDiffYaw;                           // 0x1AD0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxWeaponLeadingDiffPitch;                         // 0x1AD4(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        WeaponLeadingYawInterpSpeed;                       // 0x1AD8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        WeaponLeadingPitchInterpSpeed;                     // 0x1ADC(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58A7[0x10];                                    // Fixing Size After Last Property  
	class UValAbilityAudioVisual*                CachedPending1PAbilityAV;                          // 0x1AF0(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValAbilityAudioVisual*                CachedActive1PAbilityAV;                           // 0x1AF8(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValAbilityAudioVisual*                CachedPending3PAbilityAV;                          // 0x1B00(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UValAbilityAudioVisual*                CachedActive3PAbilityAV;                           // 0x1B08(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AActor>>         PossibleInteractions;                              // 0x1B10(0x10)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                 FocusedInteraction;                                // 0x1B20(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                 BestInteraction;                                   // 0x1B28(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxWideInteractionAngle;                           // 0x1B30(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxInnerInteractionAngle;                          // 0x1B34(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxWideInteractionDistance;                        // 0x1B38(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxInnerInteractionDistance;                       // 0x1B3C(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnBestInteractionChanged;                          // 0x1B40(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBestInteractionTextUpdated;                      // 0x1B50(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnServerAttemptInteract;                           // 0x1B60(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnInteractFailed;                                  // 0x1B70(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnInteractSucceeded;                               // 0x1B80(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        CachedCharacterGravity;                            // 0x1B90(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CachedCharacterBoomLength;                         // 0x1B94(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class AValPlayerState*, float>          DamageDealers;                                     // 0x1B98(0x50)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_RecentDamage>         RecentDamageData;                                  // 0x1BE8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class AValPlayerState*                       MostRecentDamager;                                 // 0x1BF8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct Valhalla_RecentDamage                 RecentDamage;                                      // 0x1C00(0x108)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>           SuicideDamageEffect;                               // 0x1D08(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              SuicideDataTag;                                    // 0x1D10(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>           ItemRarityHealthMultiplierEffect;                  // 0x1D18(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58AA[0x8];                                     // Fixing Size After Last Property  
	TSubclassOf<class UGameplayEffect>           ItemRarityShieldMultiplierEffect;                  // 0x1D28(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58AB[0x8];                                     // Fixing Size After Last Property  
	TSubclassOf<class UGameplayEffect>           VaultGameplayEffectClass;                          // 0x1D38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58AC[0x8];                                     // Fixing Size After Last Property  
	TSubclassOf<class UGameplayEffect>           BanGameplayEffectClass;                            // 0x1D48(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        BanItemId;                                         // 0x1D50(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58AD[0x4];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnDownStateChanged;                                // 0x1D58(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>           DownedDefaultAttributeEffect;                      // 0x1D68(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct GameplayTags_GameplayTag, TSubclassOf<class UValGameplayAbility>> DefaultDownedAbilities;                            // 0x1D70(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UValGameplayAbility>> DefaultDownedPassiveAbilities;                     // 0x1DC0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UClass*                                CachedAnimInstanceClass;                           // 0x1DD0(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UClass*                                DefaultDownedAnimInstanceClass;                    // 0x1DD8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        RevealedCount;                                     // 0x1DE0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        RevealedViewerCount;                               // 0x1DE4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_HealthPackCount;                                 // 0x1DE8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        R_ShieldPackCount;                                 // 0x1DEC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnHealthPackCountChanged;                          // 0x1DF0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnShieldPackCountChanged;                          // 0x1E00(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnHealingActive;                                   // 0x1E10(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnConsumableActive;                                // 0x1E20(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnHealingPercent;                                  // 0x1E30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	bool                                         R_bIsChanneling;                                   // 0x1E40(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58AE[0x7];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnInteractChannelingActive;                        // 0x1E48(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnInteractChannelingPercent;                       // 0x1E58(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnAbilityProgressActive;                           // 0x1E68(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnAbilityProgressPercent;                          // 0x1E78(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnDamageRampCurveChanged;                          // 0x1E88(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDamageRampReset;                                 // 0x1E98(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDamageRampVisibilityChanged;                     // 0x1EA8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSpawnAdded;                                      // 0x1EB8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TArray<enum class EValOwnedSpawnType>        SpawnedActorsToDeleteOnDeath;                      // 0x1EC8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                        ForcedFOVAngle;                                    // 0x1ED8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58AF[0x4];                                     // Fixing Size After Last Property  
	TArray<enum class EValOwnedSpawnType>        SpawnedActorsToPersistAfterDeath;                  // 0x1EE0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<enum class EValOwnedSpawnType, int32>   OwnedSpawnedActorsLimit;                           // 0x1EF0(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AActor>>         R_OwnedSpawnedActors;                              // 0x1F40(0x10)(Net, ZeroConstructor, RepNotify, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<enum class EValOwnedSpawnType, struct Valhalla_OwnedActorsContainer> OwnedSpawnedActorsMap;                             // 0x1F50(0x50)(NativeAccessSpecifierPublic)
	float                                        HighSpeedFallingAlpha;                             // 0x1FA0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HighSpeedFallingAlphaZOnly;                        // 0x1FA4(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsHighSpeedFallingBlendingOut;                    // 0x1FA8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_58B0[0x3];                                     // Fixing Size After Last Property  
	float                                        HighSpeedFallingSpeedMin;                          // 0x1FAC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HighSpeedFallingSpeedMax;                          // 0x1FB0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HighSpeedFallingBlendOutSpeed;                     // 0x1FB4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsFreeFalling;                                    // 0x1FB8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_58B1[0x3];                                     // Fixing Size After Last Property  
	float                                        WeaponSpread;                                      // 0x1FBC(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WeaponSpreadInterpSpeed;                           // 0x1FC0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        R_AimingSpreadMultiplier;                          // 0x1FC4(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_FallingSpreadMultiplier;                         // 0x1FC8(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_CrouchingSpreadMultiplier;                       // 0x1FCC(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        R_MovingSpreadMultiplier;                          // 0x1FD0(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIgnoreCollisionWithTeammates;                     // 0x1FD4(0x1)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58B2[0x3];                                     // Fixing Size After Last Property  
	TArray<TWeakObjectPtr<class AActor>>         NudgingActors;                                     // 0x1FD8(0x10)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	class UValNudgeComponent*                    NudgeComponent;                                    // 0x1FE8(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UValNudgeComponent>        NudgeComponentClass;                               // 0x1FF0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        AbilityAmbientSoundHandle;                         // 0x1FF8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_58B3[0x4];                                     // Fixing Size After Last Property  
	TSubclassOf<class UGameplayEffect>           DeadGameplayeffect;                                // 0x2000(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_58B4[0x8];                                     // Fixing Size After Last Property  
	class USkeletalMeshComponent*                VFXMesh1P;                                         // 0x2010(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                VFXMesh3P;                                         // 0x2018(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                VFXFP_Gun;                                         // 0x2020(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                VFXTP_Gun;                                         // 0x2028(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMesh*                         OverrideMesh;                                      // 0x2030(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCanEverBeViewTarget;                              // 0x2038(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58B5[0x3];                                     // Fixing Size After Last Property  
	float                                        CorpseDestroyDelay;                                // 0x203C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58B6[0x8];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_ValOverlayMatData>    OverlayMatData;                                    // 0x2048(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FText                                  CurrentNamedArea;                                  // 0x2058(0x18)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct GameplayTags_GameplayTagContainer     R_CurrentAreas;                                    // 0x2070(0x20)(Net, RepNotify, NativeAccessSpecifierPublic)
	enum class ESecurityLevel                    CurrentAreaSecurityLevel;                          // 0x2090(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_58B7[0x3];                                     // Fixing Size After Last Property  
	TWeakObjectPtr<class AActor>                 CurrentZeroGArea;                                  // 0x2094(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_58B8[0x1];                                     // Fixing Size After Last Property  
	bool                                         bClientProjectileHitLog;                           // 0x209D(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_58B9[0x2];                                     // Fixing Size After Last Property  
	TArray<class UNiagaraComponent*>             AlwaysOnVFX;                                       // 0x20A0(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UNiagaraComponent*>             RemainingAmmoVFX;                                  // 0x20B0(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UNiagaraComponent*>             ReloadVFX;                                         // 0x20C0(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class FName                                  NSMaterialForegroundParam;                         // 0x20D0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SmoothedSpectatorLocationLerpSpeed;                // 0x20D8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SmoothedSpectatorRotationLerpSpeed;                // 0x20DC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SmoothedSpectatorMaxDistance;                      // 0x20E0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_58BA[0x4];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnPingPressedDel;                                  // 0x20E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPingHeldDel;                                     // 0x20F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPingReleasedDel;                                 // 0x2108(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct Engine_TimerHandle                    SkydiveLandingRecoveryTimerHandle;                 // 0x2118(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_Vector                    SmoothedSpectatorLocation;                         // 0x2120(0x18)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_Rotator                   SmoothedSpectatorRotation;                         // 0x2138(0x18)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class AValDeathCrate>            DeathCrateClass;                                   // 0x2150(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bApplyVelocityToDeathCrate;                        // 0x2158(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58BB[0x3];                                     // Fixing Size After Last Property  
	float                                        DeathCrateVelocityModifier;                        // 0x215C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DeathCrateZVelocity;                               // 0x2160(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58BC[0x4];                                     // Fixing Size After Last Property  
	TSubclassOf<class AValDropCrate>             DropCrateClass;                                    // 0x2168(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaximumDropCrateDistance;                          // 0x2170(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58BD[0x4];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnWeaponFiredDel;                                  // 0x2178(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDropCrateOpen;                                   // 0x2188(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AValDropCrate>          OpenedDropCrate;                                   // 0x2198(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDeathCrateOpen;                                  // 0x21A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AValDeathCrate>         OpenedDeathCrate;                                  // 0x21B0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnInputSetupCompleted;                             // 0x21B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                 OpenedInteractable;                                // 0x21C8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMasteryTriggeredDel;                             // 0x21D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMasteryEndedDel;                                 // 0x21E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bUseAutoPickup;                                    // 0x21F0(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58BE[0x1F];                                    // Fixing Size After Last Property  
	float                                        TimeBetweenAutoPickups;                            // 0x2210(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58BF[0xC];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnPurchaseItem;                                    // 0x2220(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AValVendingMachine>     OpenFabricator;                                    // 0x2230(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AValReviveBeacon>          ReviveBeaconClass;                                 // 0x2238(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct CoreUObject_Vector                    ReviveBeaconSpawnOffset;                           // 0x2240(0x18)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  FirstPersonCameraAnimationBoneName;                // 0x2258(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTrackedTargetChanged;                            // 0x2260(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AValCharacter>          R_TrackedTarget;                                   // 0x2270(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bShowEnemyHealthBar;                             // 0x2278(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58C0[0x3];                                     // Fixing Size After Last Property  
	float                                        Oxygen;                                            // 0x227C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnOxygenChangedDel;                                // 0x2280(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnOxygenEmptyDel;                                  // 0x2290(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBotTeamNumChanged;                               // 0x22A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            BotConfigDataSetDel;                               // 0x22B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMeleeSwingStartDel;                              // 0x22C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMeleeSwingEndDel;                                // 0x22D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        BlockAlpha;                                        // 0x22E0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsBlocking;                                       // 0x22E4(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_58C1[0x3];                                     // Fixing Size After Last Property  
	TSubclassOf<class AActor>                    BlockingColliderClass;                             // 0x22E8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MeleeSwingElapsedTime;                             // 0x22F0(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MeleeSwingAccumulatedTime;                         // 0x22F4(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MeleeSwingSampleRate;                              // 0x22F8(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_58C2[0x4];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnMeleeSwingHit;                                   // 0x2300(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bIsMeleeSwinging;                                  // 0x2310(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bVisualizeMeleeSwing;                              // 0x2311(0x1)(Edit, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_58C3[0x6];                                     // Fixing Size After Last Property  
	struct Valhalla_ValMeleeSwing                CurrentMeleeSwing;                                 // 0x2318(0x28)(NativeAccessSpecifierPrivate)
	bool                                         bIsBlockColliderOn;                                // 0x2340(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_58C4[0x7];                                     // Fixing Size After Last Property  
	class UChildActorComponent*                  BlockingColliderComponent;                         // 0x2348(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class AActor>                    FlashlightActorClass;                              // 0x2350(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChildActorComponent*                  FlashlightComponent;                               // 0x2358(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFlashlightedChanged;                             // 0x2360(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bIsInFlashlight;                                   // 0x2370(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShouldEquipDevice;                                // 0x2371(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58C5[0x6];                                     // Fixing Size After Last Property  
	TMap<struct GameplayTags_GameplayTag, struct GameplayTags_GameplayTag> AmmoTypeToSlot;                                    // 0x2378(0x50)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<struct GameplayTags_GameplayTag, struct GameplayTags_GameplayTag> SlotToAmmoType;                                    // 0x23C8(0x50)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<struct GameplayTags_GameplayTag, struct GameplayTags_GameplayTag> WeaponSlotToAmmoSlot;                              // 0x2418(0x50)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_ValAmmoSlotRarity>    R_SlotAmmoRarity;                                  // 0x2468(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	bool                                         bUseAmmoInventoryItems;                            // 0x2478(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58C7[0x7];                                     // Fixing Size After Last Property  
	TMap<struct GameplayTags_GameplayTag, struct GameplayTags_GameplayTag> SlotToMagBoostStateTag;                            // 0x2480(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMagBoostStatusChanged;                           // 0x24D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<int32, struct GameplayTags_GameplayTag> BeltSlotToConsumableTag;                           // 0x24E0(0x50)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                        Pad_58C9[0x8];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_CosmeticSlot>         R_CosmeticSlots;                                   // 0x2538(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	class FString                                ActiveLoadoutId;                                   // 0x2548(0x10)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTagContainer     DroppableEquipSlots;                               // 0x2558(0x20)(Protected, NativeAccessSpecifierProtected)
	class UValLoadoutAsset*                      DefaultLoadoutAsset;                               // 0x2578(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct GameplayTags_GameplayTag              LoadoutTag;                                        // 0x2580(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         UseDefaultLoaoudt;                                 // 0x2588(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58CA[0x1F];                                    // Fixing Size After Last Property  
	TArray<struct Valhalla_EquipmentEffectSlot>  R_EquipmentEffects;                                // 0x25A8(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_58CB[0xA0];                                    // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnEquipmentEffectsUpdated;                         // 0x2658(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_58CC[0x50];                                    // Fixing Size After Last Property  
	float                                        FootstepBaseSpeed;                                 // 0x26B8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FootstepCadence;                                   // 0x26BC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FootstepCrouchBaseSpeed;                           // 0x26C0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FootstepCrouchCadence;                             // 0x26C4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FootstepSprintBaseSpeed;                           // 0x26C8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FootstepSprintCadence;                             // 0x26CC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FootstepTimer;                                     // 0x26D0(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_58CD[0x4];                                     // Fixing Size After Last Property  
	TMap<struct GameplayTags_GameplayTag, struct Valhalla_ValActiveGameplayEffectHandles> EquipSlotPassiveEffects;                           // 0x26D8(0x50)(Protected, NativeAccessSpecifierProtected)
	class AActor*                                R_HeldActor;                                       // 0x2728(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MaxTrappedCrates;                                  // 0x2730(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58CE[0x24];                                    // Fixing Size After Last Property  
	TSubclassOf<class UGameplayEffect>           RevealEffect;                                      // 0x2758(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RevealDuration;                                    // 0x2760(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_58CF[0x4];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnDownloadMapData;                                 // 0x2768(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHideMapData;                                     // 0x2778(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnRechargeShields;                                 // 0x2788(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHackableButtonPressedDel;                        // 0x2798(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnOpenHackablePanel;                               // 0x27A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCloseHackablePanel;                              // 0x27B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AValHackablePanel*                     R_ViewedHackablePanel;                             // 0x27C8(0x8)(Net, ZeroConstructor, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct Valhalla_SlotAV>               R_AbilityAVs;                                      // 0x27D0(0x10)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UPlayerAttributeConfig> WeakPlayerAttributeConfig;                         // 0x27E0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<enum class EPlayerAttributeType, float> CachedPlayerAttributeValues;                       // 0x27E8(0x50)(Protected, NativeAccessSpecifierProtected)
	TMap<enum class EPlayerAttributeType, struct GameplayAbilities_ActiveGameplayEffectHandle> PlayerAttributeEffectHandles;                      // 0x2838(0x50)(Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnConsumablePressedDel;                            // 0x2888(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnConsumableHeldDel;                               // 0x2898(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnConsumableReleasedDel;                           // 0x28A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGrenadeRadialPressedDel;                         // 0x28B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGrenadeRadialHeldDel;                            // 0x28C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGrenadeRadialReleasedDel;                        // 0x28D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        RadialHoldTime;                                    // 0x28E8(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_58D0[0x14];                                    // Fixing Size After Last Property  
	class UValClassComponentBase*                PlayerClassComponent;                              // 0x2900(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct GameplayTags_GameplayTag, TSubclassOf<class UValClassComponentBase>> PlayerClassClassMap;                               // 0x2908(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMap<struct GameplayTags_GameplayTag, struct GameplayTags_GameplayTag> QuickSlotTypes;                                    // 0x2958(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnInventoryStationCooldownDelegate;                // 0x29A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnForcedToDropFlag;                                // 0x29B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	float                                        CachedBaseCharacterMass;                           // 0x29C8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bEnergyRegenDisabled;                              // 0x29CC(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_58D1[0x3];                                     // Fixing Size After Last Property  
	int32                                        CachedAimingFOVIdx;                                // 0x29D0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_58D2[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValCharacter* GetDefaultObj();

	bool UseQuickSlot(struct GameplayTags_GameplayTag& QuickSlot);
	void UpdateWeaponRarity(class USkeletalMeshComponent* MeshComponent, enum class ERarity Rarity);
	void UpdateTeamMaterial();
	void UpdateTeamColor();
	void UpdateTeamCollision(int32 OldTeamId, int32 NewTeamId);
	void UpdateSkiingSound(enum class EPhysicalSurface SurfaceType);
	void UpdatePendingDevice(struct GameplayAbilities_GameplayAbilitySpecHandle& SpecHandle);
	void UpdateMeshVisibility();
	void UpdateInteractions();
	void UpdateGunMICs(class UValAbilityAudioVisual* AV);
	void UpdateGunMaterialAmmoWithAmount(int32 Amount);
	void UpdateGunMaterialAmmo(struct Valhalla_ValAmmoData& AmmoData);
	void UpdateFullyAimed(bool FullyAimed);
	void UpdateEnergy(float DeltaEnergy);
	void UpdateDevice3PAudioVisual();
	void UpdateDevice1PAudioVisual();
	void UpdateCustomViewRotation(const struct CoreUObject_Rotator& DeltaRotation);
	void UpdateCachedAmmoDataForSlot(struct GameplayTags_GameplayTag& Slot);
	void UpdateBotMesh(class USkeletalMesh* NewMesh, TSubclassOf<class UValAnimInstance> NewABP, const struct CoreUObject_Vector& MeshScale);
	void UpdateBlockAlpha(float DeltaSeconds);
	void Update3PMeshIn1P();
	void UnregisterOverlayMat(class UMaterialInterface* OverrideMat, enum class EOverlayMeshType OverlayMesh);
	void UnequipSlot(struct GameplayTags_GameplayTag& Slot, bool bChangeLoadout);
	void TryToPingWithType(enum class EValPingType TryPingType);
	void TryToPing();
	void TryPickUpNextPendingPickup();
	bool TryGrabPhysicsObject(class AActor* GrabObject);
	void TryCancelingAbilityByEquipSlotsTag(const struct GameplayTags_GameplayTag& TagToCancel);
	bool TryActivateAbilityByEquipSlotsTag(const struct GameplayTags_GameplayTag& TagToActivate);
	void TriggerShieldBreak();
	void TriggerAbilitySystemInputReleased(enum class EValAbilityInputID AbilityInput);
	void TriggerAbilitySystemInputPressed(enum class EValAbilityInputID AbilityInput);
	void ToggleDebugBotPerception(bool bOn);
	void ToggleBlockingCollider(bool bWantToBlock);
	void ToggleAllowShowVFX(bool ShouldAllow);
	void ToggleAimingFOV();
	void ThrowHeldItem();
	void TakeInteractableInventory(struct Valhalla_InventoryItem& InventoryItem);
	void SwapToEquipSlot(const struct GameplayTags_GameplayTag& EquipSlot);
	void SwapToDevice(struct GameplayTags_GameplayTag& SlotTag, bool bWarnOnInvalidSlot, bool bUpdateEffects, bool bForceImmedateEquip);
	bool SwapDevice();
	void Suicide();
	void StopMonkey();
	void StopMeleeSwing();
	void StartOutlineHitPulse(float TotalTime, float Intensity);
	void StartMonkey();
	void StartMeleeSwing(const struct Valhalla_ValMeleeSwing& NewMeleeSwing);
	void StartCharmCybrid(class AValCharacter* PCharmSource);
	void SpawnRemainingAmmoVFX(class UValDeviceAudioVisual* DeviceAV);
	class AValPickup_Item* SpawnPickupItem(TSubclassOf<class AValPickup_Item> PickupClass, struct Valhalla_PendingItem& ItemData, class AActor* ReplacedActor, const struct CoreUObject_Vector& Offset, bool TrySpawnOnGround);
	class AValAbilityPickup* SpawnPickupAbility(TSubclassOf<class AValAbilityPickup> PickupClass, bool bRandomAbility, class AActor* ReplacedActor, const struct CoreUObject_Vector& Offset, bool TrySpawnOnGround);
	class AActor* SpawnPickup(TSubclassOf<class AActor> PickupClass, class AActor* ReplacedActor, const struct CoreUObject_Vector& Offset, bool TrySpawnOnGround);
	void SpawnBotWave(class AActor* TriggerActor);
	void SpawnAlwaysOnVFX(class UValDeviceAudioVisual* DeviceAV);
	bool ShowDeviceAudioVisual(class UValDeviceAudioVisual* DeviceAV);
	bool ShouldUsePredictiveAimingForActiveAbility();
	bool ShouldFireSimultaneously();
	bool ShouldFireFromMesh();
	void SetWallRotation(const struct CoreUObject_Rotator& Rotation);
	void SetUseControllerRotationYaw(bool bNewValue);
	void SetUseAutoPickup(bool Value);
	void SetTrackedTarget(class AValCharacter* NewTarget);
	void SetThreatComponent(class UValThreatComponent* NewThreatComponent);
	void SetSpawnedActorLimit(enum class EValOwnedSpawnType ActorType, int32 NewLimit);
	void SetSlotAmmoRarity(struct GameplayTags_GameplayTag& Slot, enum class ERarity Rarity);
	void SetShowNamedAreaBotTimer(bool bShow);
	void SetShowEnemyHealthBar(bool NewBool);
	void SetShields(float Value);
	void SetPendingDevice(bool bClearDeviceTag, bool bWasAbilityCancelled);
	void SetOxygen(float NewValue);
	void SetOverrideMesh(class USkeletalMesh* New1PMesh, class USkeletalMesh* New3PMesh);
	void SetMovingSpreadMultiplier(float Value);
	void SetIsMounted(bool bEnabled);
	void SetIsFlashlighted(class AActor* Flashlighter, bool bIsFlashlighted);
	void SetInteractChannelingPercent(float Value);
	void SetInteractChannelingActive(bool Value);
	void SetHealth(float Value);
	void SetHealingPercent(float Value);
	void SetHealingActive(bool Value, bool Shields);
	void SetFlashlightLevel(int32 Level);
	void SetFallingSpreadMultiplier(float Value);
	void SetEnergyRegenDisabled(bool bDisable);
	void SetEnergy(float NewEnergy);
	void SetCurrentZeroGArea(class AActor* ZeroGArea);
	void SetCurrentNamedArea(class FText NewAreaName, enum class ESecurityLevel NewSecurityLevel);
	void SetCrouchingSpreadMultiplier(float Value);
	void SetConsumableActive(bool bActive, class FText ConsumeableText);
	void SetBotStartingPatrolIndex(int32 StartingPatrolIndex);
	void SetBotSpawnVolume(class AValBotSpawnVolume* SpawnVolume);
	void SetBotResetTimerStart(struct Valhalla_BotResetTimerData& Timer);
	void SetBotPatrolRoute(TArray<struct CoreUObject_Vector>& Points);
	void SetBotPatrolBackward(bool bBackward);
	void SetAITargetedActor(class AActor* NewTargetActor);
	void SetAimingSpreadMultiplier(float Value);
	void SetActiveSwappedAbility(struct GameplayAbilities_GameplayAbilitySpecHandle& Handle);
	void SetAbilityProgressPercent(float Value);
	void SetAbilityProgressActive(bool Active, float Value);
	void ServerUseConsumable(struct GameplayTags_GameplayTag& EquipSlot);
	void ServerUnequipDevice(struct GameplayTags_GameplayTag& SlotTag, bool bRevokeAbility, bool bWarnOnInvalidSlot);
	void ServerToggleDowned(bool bDowned);
	void ServerTakeInteractableInventory(struct Valhalla_InventoryItem& InventoryItem);
	void ServerSwapDevice(const struct GameplayTags_GameplayTag& RequestedEquipSlot);
	void ServerSetSwappingInfo(struct GameplayTags_GameplayTag& NewSlot, float HolsterTime, float DrawTime);
	void ServerSetPendingDevice(const struct GameplayTags_GameplayTag& RequestedEquipSlot);
	void ServerSetAlwaysSkiOnCrouch(bool bEnabled);
	void ServerRequestPurchaseFabricatorItem(enum class EFabricatorShopType RequestedItem);
	void ServerRemoveOnExtraction();
	void ServerRemoveCurrentArea(const struct GameplayTags_GameplayTag& AreaTag);
	void ServerOnRemoveDirectFlashlightFromTargets(TArray<class AActor*>& Targets);
	void ServerOnApplyDirectFlashlightToTargets(TArray<class AActor*>& Targets);
	void ServerKillSpawn(enum class EValOwnedSpawnType SpawnType);
	void ServerEquipDevice(struct GameplayTags_GameplayTag& SlotTag, TSubclassOf<class UGameplayAbility> Ability, bool bReplaceSlotIfNeeded, bool bSwapToAbility);
	void ServerDropScrap(TSubclassOf<class AValPickup> PickupClass, int32 CurrencyToDrop);
	void ServerDropPendingItem(struct Valhalla_PendingItem& InventoryItem, TSubclassOf<class AValPickup> ItemToDrop);
	void ServerDropPack(bool bHealthPack, TSubclassOf<class AValPickup> PickupClass);
	void ServerDropInventorySlot(struct Valhalla_InventorySlot& RequestedSlot, int32 Quantity);
	void ServerDropBoostItem(class FName BoostItem, TSubclassOf<class AValPickup> BoostToDrop);
	void ServerDropAmmoClip(bool bPrimaryAmmo, TSubclassOf<class AValPickup> PickupClass);
	void ServerCloseInteractable();
	void ServerCloseDropCrate();
	void ServerCloseDeathCrate();
	void ServerBoobyTrapLootCrate(class AValLootCrate* LootCrate);
	void ServerAddCurrentArea(const struct GameplayTags_GameplayTag& AreaTag);
	void Server_RevealTeamDungeonPortal();
	void Server_RequestShieldRecharge(int32 ButtonIndex);
	void Server_RequestHideMapData(int32 ButtonIndex);
	void Server_RequestDownloadMapData(int32 ButtonIndex);
	void Server_RequestCloseHackablePanel();
	void Revive();
	void RevealStatusChanged3P(bool bValue);
	void RevealStatusChanged1P(bool bValue);
	void ResetAllCooldowns();
	void ResetAbilitiesForNewRound();
	void RequestSwap();
	bool RequestActivateEquipSlot(struct GameplayTags_GameplayTag& EquipSlot);
	bool RequestActivateBeltItem(int32& BeltIndex);
	void RemoveSupportingBot(class AValCharacter* Bot);
	void RemoveSpawn(class AActor* SpawnToRemove);
	bool RemoveItemUpgrade(const struct Valhalla_BoostItem& ItemUpgrade);
	void RemoveInteraction(class AActor* Interactable);
	void RemoveFocusedInteraction(class AActor* Interactable);
	void RemoveCurrentArea(const struct GameplayTags_GameplayTag& AreaTag);
	void RegisterOverlayMat(class UMaterialInterface* OverrideMat, enum class EOverlayMeshType OverlayMesh, int32 PriorityLevel);
	void RefreshFlashlight();
	void RefillAmmo(bool bUseStartingValues);
	void RefillAbilityCharges(struct GameplayTags_GameplayTag& EquipSlot);
	void ProcessGunShot();
	void PredictSwap();
	void PredictEffectRemoval();
	void PlayUIJiggle(class UUIJiggle* Jiggle);
	void PlayHolsterAnimation(float AnimationTime);
	void PlayFootstepSound(enum class EPhysicalSurface SurfaceType);
	void PlayDrawAnimation(float AnimationTime);
	void PhaseShiftStateChanged(bool bIsActive);
	void OverrideSpecificOverlayMats(class UMaterialInterface* OverrideMat, const TArray<int32>& ElementIndices, enum class EOverlayMeshType OverlayMesh);
	void OverrideAllOverlayMats(class UMaterialInterface* OverrideMat, enum class EOverlayMeshType OverlayMesh);
	void OpenHackablePanel(class AValHackablePanel* PanelToView);
	void OnWeaponMICAmmoLock(bool bUnlockWeaponMICAmmo);
	void OnVaulted();
	void OnTeamRegistered(int32 TeamId, class ATeamState* TeamState);
	void OnSupportingBotDied(float TimeToRespawn, class AValCharacter* Pawn);
	void OnSprintStopped_BP();
	void OnSprintStopped();
	void OnSprintStarted_BP();
	void OnSprintStarted();
	void OnSkiStoppedEvent();
	void OnSkiStopped();
	void OnSkiStartedEvent();
	void OnSkiStarted();
	void OnSecondaryFireReleased();
	void OnSecondaryFirePressed();
	void OnRoundStateChanged(enum class ERoundState RoundState);
	void OnRep_WallRotation();
	void OnRep_ViewedHackablePanel();
	void OnRep_TrackedTarget();
	void OnRep_TargetedActor();
	void OnRep_SwappedAbility();
	void OnRep_SwapInfo();
	void OnRep_Swap();
	void OnRep_ShieldPackCount(int32& OldShieldPackCount);
	void OnRep_OwnedSpawnedActors();
	void OnRep_IsExtracted();
	void OnRep_IsChanneling();
	void OnRep_HeldActor();
	void OnRep_HealthPackCount(int32& OldHealthPackCount);
	void OnRep_EquipSlotArray();
	void OnRep_EquipmentEffects();
	void OnRep_DeviceUpgradeEffectsArray();
	void OnRep_CustomViewRotation();
	void OnRep_CurrentAreas();
	void OnRep_CosmeticSlots();
	void OnRep_BotMeshScale();
	void OnRep_BotMesh();
	void OnRep_BotData();
	void OnRep_BotABP();
	void OnRep_AmmoSlotRarity();
	void OnRep_AmmoData(TArray<struct Valhalla_ValAmmoData>& OldAmmoData);
	void OnRep_ActivatableHandles();
	void OnRep_AbilityAVs();
	void OnReloadPressed();
	void OnReload(const struct GameplayTags_GameplayTag& InTag, int32 NewCount);
	void OnRecallPressed();
	void OnPrimaryFireReleased();
	void OnPrimaryFirePressed();
	void OnPlayerStateUpdatedEvent();
	void OnPlayerLoadoutIdUpdated(const class FString& LoadoutId);
	void OnPingWatch();
	void OnPingReleased();
	void OnPingPressed();
	void OnPingMoving();
	void OnPingLoot();
	void OnPingHeld();
	void OnPingEnemyNear();
	void OnPingEnemy();
	void OnPingDefend();
	void OnPickup(class AValPickup* Pickup);
	void OnMeshVisibilityUpdated();
	void OnMatchStateChanged();
	void OnLocalPCUpdatedViewTarget(class AActor* NewViewTarget);
	void OnLivesRemaining(int32 LivesRemaining);
	void OnJetpackStoppedEvent();
	void OnJetpackStopped();
	void OnJetpackStartedEvent(bool bStartedFromMidAir);
	void OnJetpackStarted(bool bStartedFromMidAir);
	void OnInventoryStationCooldown();
	void OnInventoryManagerReady(class AValInventoryManager* InventoryManager);
	void OnHit(const struct CoreUObject_Vector& HitDirection, float Magnitude);
	void OnHardLand();
	void OnGrenadeRadialReleased();
	void OnGrenadeRadialPressed();
	void OnGrenadeRadialHeld();
	void OnGameUserSettingsSaved();
	void OnGameplayCueAimingStateChanged();
	void OnFOVUpdated(float NewFOV);
	void OnFlashlightPressed();
	void OnFalling(bool bIsFalling);
	void OnEquippedSlotsUpdated(TArray<struct Valhalla_InventorySlot>& UpdatedSlots);
	void OnDamaged(const struct Valhalla_DamageData& DamageData);
	void OnCrouchTogglePressed();
	void OnCrouchReleased();
	void OnCrouchPressed();
	void OnCosmeticSlotsUpdated(TArray<struct Valhalla_InventorySlot>& UpdatedSlots);
	void OnCosmeticAssetsLoaded();
	void OnCorpseDestroyDelayEnd();
	void OnConsumableReleased();
	void OnConsumablePressed();
	void OnConsumableHeld();
	void OnCheckTeammateDied();
	void OnChannelingStateChanged();
	void OnBotConfigDataSet();
	void OnAmmoPickup(int32 StackSize, const struct GameplayTags_GameplayTag& ItemType, enum class ERarity AmmoRarity);
	void OnAlarmBotSpawned(class UBotInitData* Data);
	void OnAimingStateChanged();
	void OnAbilitySlot2Pressed();
	void OnAbilitySlot1Pressed();
	void NotifyFinishRespawned();
	void MulticastSkiStopped();
	void MulticastSkiStarted();
	void MulticastRPCUpdateDownedState(bool bDowned);
	void MulticastOnJumped();
	void MulticastLanded(struct Engine_HitResult& Hit);
	void MulticastJetpackStopped();
	void MulticastJetpackStarted(bool bStartedFromMidAir);
	void MulticastForceDisableFlashlight();
	void Multicast_ReleaseHeldItem();
	void MonkeyTimerExpired();
	void KillSpawn(enum class EValOwnedSpawnType SpawnType);
	bool IsPlayerBot();
	bool IsPlayerBanned();
	bool IsPetBot();
	bool IsMagBoostActive(struct GameplayTags_GameplayTag& EquipSlot);
	bool IsInvisible();
	bool IsInterpingToThirdPerson();
	bool IsInterpingToFirstPerson();
	bool IsInShip();
	bool IsInForge();
	bool IsHunterPlayer();
	bool IsHunterBot();
	bool IsHunter();
	bool IsHoldingObject();
	bool IsFullyAimed();
	bool IsFirstPerson();
	bool IsEquipSlotUsed(struct GameplayTags_GameplayTag& SlotTag);
	bool IsCybrid();
	bool IsCurrentlySpectated();
	bool IsBotPatrollingBackward();
	bool IsBaseTurret();
	bool IsAlive();
	bool IsAbilityHandleActivatable(struct GameplayAbilities_GameplayAbilitySpecHandle& Handle);
	void InitializeCharacterDuringRound();
	void InitializeCharacter();
	bool HasPendingBoostSpace();
	bool HasOpenedInteractable();
	bool HasMultipleMuzzleFireLocations();
	bool HasMaxBotPatrolPoints();
	bool HasBotDealtDamage();
	void HandleSpawnedAlarmBotDied(float TimeToRespawn, class AValCharacter* Pawn);
	void HandleSpawnedAlarmBotDestroyed(class AActor* Actor);
	void HandleMeshChanged();
	bool GiveItemUpgrade(const struct Valhalla_BoostItem& ItemUpgrade, const struct GameplayTags_GameplayTag& Slot);
	struct GameplayAbilities_GameplayAbilitySpecHandle GiveAbilityUpgrade(TSubclassOf<class UGameplayAbility> DeviceUpgrade, const struct GameplayTags_GameplayTag& Slot, TArray<struct Valhalla_ValAbilityUpgradeEffectData>& Effects, float Value);
	struct CoreUObject_Vector GetWallRotation();
	class USkeletalMeshComponent* GetVisibleMesh();
	class USkeletalMeshComponent* GetVisibleGunMesh();
	struct CoreUObject_Rotator GetViewRotation();
	class USkeletalMeshComponent* GetVFXTP_Gun();
	class USkeletalMeshComponent* GetVFXMesh3P();
	class USkeletalMeshComponent* GetVFXMesh1P();
	class USkeletalMeshComponent* GetVFXFP_Gun();
	class AValPlayerController* GetValPlayerController();
	bool GetUseAutoPickup();
	class AValCharacter* GetTrackedTarget();
	int32 GetTotalHealth();
	float GetTotalAbilityPropertyModValue(const struct GameplayTags_GameplayTag& AbilityTag, const struct GameplayTags_GameplayTag& PropertyTag);
	class UValThreatComponent* GetThreatComponent();
	float GetThirdPersonCameraAlpha();
	float GetTempShieldPercent();
	int32 GetTemporaryShields();
	int32 GetTemporaryHealth();
	float GetTempHealthPercent();
	void GetSwapTimeModifier(float& OutPercentModifier, float& OutFlatModifier, struct GameplayTags_GameplayTag& SwappedFromSlot, struct GameplayTags_GameplayTag& SwappedToSlot);
	void GetSwapEquipSlot(struct GameplayTags_GameplayTag* EquipSlot);
	TArray<TSoftObjectPtr<class AValCharacter>> GetSupportingBots();
	int32 GetSpawnedActorLimit(enum class EValOwnedSpawnType ActorType);
	struct GameplayTags_GameplayTag GetSlotForEquippedAbility(struct GameplayAbilities_GameplayAbilitySpecHandle& Handle, bool bWarnOnInvalidSlot);
	enum class ERarity GetSlotAmmoRarity(const struct GameplayTags_GameplayTag& Slot);
	bool GetShowEnemyHealthBar();
	int32 GetShieldsMax();
	int32 GetShields();
	float GetShieldPercent();
	class AValGATA_ShapeTrace* GetShapeTraceTargetActor();
	bool GetQuickSlotType(struct GameplayTags_GameplayTag& QuickSlot, struct GameplayTags_GameplayTag* ItemType);
	void GetQuickSlots(TArray<struct GameplayTags_GameplayTag>* QuickSlots);
	struct GameplayTags_GameplayTag GetPrimaryEquipSlotTag();
	struct GameplayAbilities_GameplayAbilitySpecHandle GetPrimaryEquippedAbility();
	void GetPreviousActiveMuzzleSocketName(class FName* OutSocketName);
	struct GameplayAbilities_GameplayAbilitySpecHandle GetPredictedSwappedToAbility();
	class UValDevice* GetPredictedInteractableAbility();
	class UValPositionHistoryComponent* GetPositionHistoryComp();
	class UValPingComponent* GetPingComponent();
	class UValAbilityAudioVisual* GetPending3PAbilityAV();
	class UValAbilityAudioVisual* GetPending1PAbilityAV();
	float GetOxygen();
	class USkeletalMeshComponent* GetOverlayMesh(enum class EOverlayMeshType MeshType);
	class UValCharacterOverlayComponent* GetOverlayComponent();
	class UValOutlineComponent* GetOutlineComponent();
	float GetNextHolsterTime();
	float GetNextDrawTime();
	int32 GetMuzzleSocketCount();
	bool GetMuzzleLocationAtIndex(int32 MuzzleIndex, struct CoreUObject_Vector* OutLocation);
	struct CoreUObject_Vector GetMuzzleFireLocation();
	class USceneComponent* GetMuzzle();
	float GetMovingSpreadMultiplier();
	class AValPlayerState* GetMostRecentDamager();
	class USkeletalMeshComponent* GetMesh3P();
	class USkeletalMeshComponent* GetMesh1P();
	int32 GetMaxPatrolPoints();
	struct GameplayTags_GameplayTag GetLoadoutTag();
	class AValGATA_LineTrace* GetLineTraceTargetActor();
	struct CoreUObject_Vector GetLastHitLocation();
	struct CoreUObject_Vector GetLastHitDirection();
	class USkeletalMeshComponentBudgeted* GetJetpackMesh();
	bool GetItemsForSlot(struct Valhalla_BoostItem* Item, struct GameplayTags_GameplayTag& Slot);
	bool GetItemAbilityUpgrades(struct GameplayTags_GameplayTag& Slot, TArray<struct GameplayAbilities_GameplayAbilitySpecHandle>* OutDeviceUpgrades);
	bool GetIsMounted();
	int32 GetInventoryAmmo(const struct GameplayTags_GameplayTag& Slot);
	struct CoreUObject_Vector GetHitReactDirection(struct CoreUObject_Vector& ImpactPoint);
	float GetHealthPercent();
	int32 GetHealthMax();
	int32 GetHealth();
	bool GetHasFullScreenScope();
	TArray<class UMaterialInstanceDynamic*> GetGunVFXMaterials();
	class USkeletalMeshComponent* GetGunMesh3P();
	class USkeletalMeshComponent* GetGunMesh1P();
	struct CoreUObject_Vector GetFirstPersonCameraRootOffset();
	struct CoreUObject_Rotator GetFirstPersonCameraAnimation();
	float GetFallingSpreadMultiplier();
	TMap<struct GameplayTags_GameplayTag, enum class EValAbilityInputID> GetEquipSlotInput();
	class UValJetpackMeshData* GetEquippedJetpackAt(struct GameplayTags_GameplayTag& EquipSlot);
	float GetEquippedAbilityTimeBetweenShots(struct GameplayTags_GameplayTag& Slot);
	TSubclassOf<class AValProjectile> GetEquippedAbilityProjectileClass(struct GameplayTags_GameplayTag& Slot);
	struct GameplayTags_GameplayTag GetEquippedAbilityFireMode(struct GameplayTags_GameplayTag& Slot);
	bool GetEquippedAbilityClass(const struct GameplayTags_GameplayTag& SlotTag, TSubclassOf<class UGameplayAbility>* AbilityClass);
	struct GameplayAbilities_GameplayAbilitySpecHandle GetEquippedAbility(struct GameplayTags_GameplayTag& SlotTag, bool bWarnOnInvalidSlot);
	bool GetEquipmentEffectsForSlot(struct GameplayTags_GameplayTag& Slot, TArray<struct Valhalla_EquipmentEffect>* EquipmentEffects);
	bool GetEquipmentEffectHandlesForSlot(struct GameplayTags_GameplayTag& Slot, TArray<struct GameplayAbilities_GameplayAbilitySpecHandle>* EffectHandles);
	float GetEnergy();
	bool GetDowned();
	float GetDistanceFromPivotToMuzzle1P();
	class UValDeviceAudioVisual* GetDeviceAudioVisualForSlot(struct GameplayTags_GameplayTag& SlotTag, bool bWarnOnInvalidSlot);
	TMap<class AValPlayerState*, float> GetDamageDealers();
	struct CoreUObject_Vector GetCustomViewRotationAsVector();
	struct CoreUObject_Rotator GetCustomViewRotationAsRotator();
	float GetCurrentHolsterTime();
	struct CoreUObject_Rotator GetCurrentFlinchRotation();
	float GetCurrentDrawTime();
	struct Valhalla_ValAmmoData GetCurrentAmmo();
	float GetCrouchingSpreadMultiplier();
	void GetCosmeticSlots(TArray<struct Valhalla_CosmeticSlot>* CosmeticSlots);
	struct GameplayTags_GameplayTag GetBotType();
	uint8 GetBotTeamNum();
	int32 GetBotStartingPatrolIndex();
	class AValBotSpawnVolume* GetBotSpawnVolume();
	TArray<struct CoreUObject_Vector> GetBotPatrolPoints();
	bool GetBotPatrolPointAtIndex(int32 PatrolIndex, struct CoreUObject_Vector* PatrolPoint);
	class UValLoadoutAsset* GetBotLoadout();
	class UValBotData* GetBotConfigData();
	class UValCharacterAnimInstance* GetBotAnimInstance();
	float GetBlockAlpha();
	class AActor* GetBestInteraction();
	class UValAttributeSet* GetAttributes();
	class USphereComponent* GetAOEComponent();
	struct Valhalla_ValAmmoData GetAmmoForSlotConst(struct GameplayTags_GameplayTag& SlotTag);
	struct Valhalla_ValAmmoData GetAmmoForSlot(struct GameplayTags_GameplayTag& SlotTag);
	void GetAllMuzzleSocketNames(TArray<class FName>* OutSocketNames);
	struct CoreUObject_Vector GetAITargetPoint();
	class AActor* GetAITargetedActor();
	float GetAimingSpreadMultiplier();
	float GetAimingFOV();
	float GetAimingAlpha();
	bool GetAimFromBlackboard(struct CoreUObject_Vector* AimValue);
	bool GetAimForTargetData(struct CoreUObject_Vector* AimValue);
	class UGameplayAbility* GetActiveSwappedAbility();
	struct CoreUObject_Vector GetActiveMuzzleLocation();
	struct GameplayTags_GameplayTag GetActiveEquipSlotTag();
	class UValDeviceAudioVisual* GetActiveEquipSlotAV();
	float GetActiveEquippedAbilityTimeBetweenShots();
	TSubclassOf<class AValProjectile> GetActiveEquippedAbilityProjectileClass();
	struct GameplayTags_GameplayTag GetActiveEquippedAbilityFireMode();
	struct GameplayAbilities_GameplayAbilitySpecHandle GetActiveEquippedAbility();
	class UValAbilityAudioVisual* GetActive3PAbilityAV();
	class UValAbilityAudioVisual* GetActive1PAbilityAV();
	bool GetAbilityUpgradesForSlot(struct GameplayTags_GameplayTag& Slot, TArray<struct GameplayAbilities_GameplayAbilitySpecHandle>* OutDeviceUpgrades);
	bool GetAbilityUpgradeEffectsForSlot(struct GameplayTags_GameplayTag& Slot, TArray<struct Valhalla_ValAbilityUpgradeEffectData>* OutDeviceUpgradeEffects);
	class UValAbilityAudioVisual* GetAbilityAVForSlot(struct GameplayTags_GameplayTag& SlotTag);
	void ForceSetClientEnergy(float NewEnergy);
	void FlushOverlayMat(enum class EOverlayMeshType OverlayMesh);
	void FinalizeInteract(class AActor* RequestedInteraction);
	void EventRespawned();
	void EventDied();
	bool EquipDevice(struct GameplayTags_GameplayTag& SlotTag, TSubclassOf<class UGameplayAbility> Ability, bool bReplaceSlotIfNeeded, bool bSwapToAbility, bool bForceImmedateEquip);
	void EndLatch();
	void EndCharmCybrid();
	void EnableManualJetpackThrustMode(bool bEnabled);
	bool DropSlot(struct GameplayTags_GameplayTag& SlotTag);
	void DropInventorySlot(struct Valhalla_InventorySlot& RequestedSlot, int32 Quantity);
	void DropHeldItem();
	void DropDeathLoot();
	bool DropBoostItemSlot(struct GameplayTags_GameplayTag& SlotTag, class AActor* ItemActor);
	void DownStateChanged(bool bDowned);
	void DisableRemainingAmmoVFX();
	void DisableEnableWwise();
	void DisableAlwaysOnVFX();
	void DeployablePlaced();
	void DeployableCanceled();
	void CycleActiveMuzzleForEquippedWeapon();
	void CopyEquippedSlots(TArray<struct Valhalla_InventorySlot>& EquippedSlots);
	void ConfigureAmmoForSlot(struct GameplayTags_GameplayTag& EquipSlot);
	void CloseInteractable();
	void CloseHackablePanel();
	void ClientUpdateEnergy(float DeltaEnergy);
	void ClientOpenDropCrate(class AValDropCrate* Crate);
	void ClientOpenDeathCrate(class AValDeathCrate* Crate);
	void ClientOnPurchaseFabricatorItem(enum class EFabricatorShopType PurchasedItem);
	void ClientOnPickup(class AValPickup* Pickup);
	void ClientOnInitializedDuringRound_Implementation();
	void ClientOnInitializedDuringRound();
	void ClientOnHealingDone(const struct Valhalla_DamageData& Data, class AActor* TargetActor);
	void ClientInteractSucceeded(class AActor* Interactable);
	void ClientInteractFailed(class AActor* Interactable);
	void ClientDamageDebug(struct Valhalla_DamageCalculationStruct& Data);
	void ClientAnnounceMasteryTriggered(struct GameplayTags_GameplayTag& Mastery, float Duration);
	void ClientAnnounceMasteryEnded(struct GameplayTags_GameplayTag& Mastery);
	void Client_RechargeShields();
	void Client_HideMapData();
	void Client_DownloadMapData();
	void ClearMagBoosts_Client(struct GameplayTags_GameplayTag& EquipSlot);
	void ClearMagBoosts(struct GameplayTags_GameplayTag& EquipSlot);
	void ClearItemSlotAbilityUpgrades(struct GameplayTags_GameplayTag& Slot);
	void ClearBotDamageFlag();
	void ClearAllSpawn(bool ClearOnlyArray);
	void CleanupSpecifcOverlayMat(class UMaterialInterface* OverrideMat, enum class EOverlayMeshType OverlayMesh);
	void CleanupOverlay(enum class EOverlayMeshType OverlayMesh);
	void CheckPlayerEmissivesEnabled();
	bool CanTakeInteractableInventory(struct Valhalla_InventoryItem& InventoryItem);
	bool CanMount();
	bool CanBeHealed();
	bool CanBeDamaged();
	void BroadcastVaultingState(bool bActive);
	void BroadcastOnMeleeSwing(bool bStart);
	bool BPIsNetRelevantFor(class AActor* RealViewer, class AActor* ViewTarget, struct CoreUObject_Vector& SrcLocation);
	void BP_ReleaseHeldItem();
	void BP_OnRep_HeldActor();
	void BestInteractionTextUpdated(class FText NewText);
	void AutoWalk();
	void AttemptInteract();
	bool AreFootstepsSilenced();
	void ApplySkydiveRecoveryEffect();
	void ApplySkydiveEffect();
	void ApplyRevealToTrapSetoff(class AActor* Trap, class AActor* Victim);
	void ApplyLatch(class AValCharacter* Latcher);
	void ApplyBanEffects();
	bool AlwaysDamageable();
	void AddSupportingBot(class AValCharacter* Bot);
	void AddSpawn(enum class EValOwnedSpawnType SpawnType, class AActor* NewSpawn);
	bool AddShieldPickup(int32 Amount);
	void AddRevealCount(int32 Amount);
	void AddReserveClips(int32 ClipCount, const struct GameplayTags_GameplayTag& Slot);
	void AddReserveAmmo(float Amount, const struct GameplayTags_GameplayTag& Slot);
	void AddPendingPickup(class AValPickup* Pickup);
	bool AddPendingBoost();
	void AddItemAbilityUpgrade(const struct GameplayAbilities_GameplayAbilitySpecHandle& SpecHandle, const struct GameplayTags_GameplayTag& Slot);
	void AddInteraction(class AActor* Interactable);
	bool AddHealthPickup(int32 Amount);
	void AddFocusedInteraction(class AActor* Interactable);
	void AddCurrentArea(const struct GameplayTags_GameplayTag& AreaTag);
	void AddClipAndReserveAmmo(float ClipAmount, float ReserveAmount, const struct GameplayTags_GameplayTag& Slot);
	void AddClipAmmo(float Amount, const struct GameplayTags_GameplayTag& Slot);
	void AddBotPatrolPoint(struct CoreUObject_Vector& NewPatrolPoint);
	void AddAmmoPickupForSlot(const struct GameplayTags_GameplayTag& Slot);
	void ActiveDeviceSwapped(bool bForceImmedateEquip);
	bool ActivateMagBoost(struct GameplayTags_GameplayTag& EquipSlot);
};

// 0x0 (0xB28 - 0xB28)
// Class Valhalla.ValPlayerInput
class UValPlayerInput : public URHPlayerInput
{
public:

	static class UClass* StaticClass();
	static class UValPlayerInput* GetDefaultObj();

};

// 0x0 (0xD0 - 0xD0)
// Class Valhalla.ValTeamCreationComponent
class UValTeamCreationComponent : public USimpleTeamCreationComponent
{
public:

	static class UClass* StaticClass();
	static class UValTeamCreationComponent* GetDefaultObj();

};

// 0x0 (0xD0 - 0xD0)
// Class Valhalla.ValTeamCreationComponent_Cybrid
class UValTeamCreationComponent_Cybrid : public UValTeamCreationComponent
{
public:

	static class UClass* StaticClass();
	static class UValTeamCreationComponent_Cybrid* GetDefaultObj();

	class FName GetCybridTeamDefinition();
};

// 0x0 (0xD0 - 0xD0)
// Class Valhalla.ValTeamCreationComponent_SpaceDungeon
class UValTeamCreationComponent_SpaceDungeon : public UValTeamCreationComponent_Cybrid
{
public:

	static class UClass* StaticClass();
	static class UValTeamCreationComponent_SpaceDungeon* GetDefaultObj();

	class FName GetWaitingLobbyTeamDefinition();
	class FName GetDungeonHazardsTeamDefinition();
};

// 0x20 (0x50 - 0x30)
// Class Valhalla.ValInputBlocker
class UValInputBlocker : public UDataAsset
{
public:
	TArray<class FName>                          ActionsToBlock;                                    // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                          AxesToBlock;                                       // 0x40(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UValInputBlocker* GetDefaultObj();

};

// 0x0 (0x5B0 - 0x5B0)
// Class Valhalla.ValUIWidget_MatchInfo
class UValUIWidget_MatchInfo : public UValRHWidget
{
public:

	static class UClass* StaticClass();
	static class UValUIWidget_MatchInfo* GetDefaultObj();

	class FString GetRallyHereUuid();
	class FString GetMatchId();
};

// 0x10 (0x238 - 0x228)
// Class Valhalla.ValInputManager
class UValInputManager : public URHInputManager
{
public:
	float                                        InitialInputsPerSec;                               // 0x228(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinInputsPerSec;                                   // 0x22C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        InputThrottleCountToMax;                           // 0x230(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        InputThrottleCount;                                // 0x231(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58EC[0x6];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValInputManager* GetDefaultObj();

	bool IsBlockingNonUIInput();
	void GetRHInputKeys(class FName Name, enum class EInputType InputType, TArray<struct InputCore_Key>* OutKeys);
	void EnableNonUIInput();
	void DisableNonUIInput();
};

// 0x10 (0x2A8 - 0x298)
// Class Valhalla.ValClosestFogPointActor
class AValClosestFogPointActor : public AActor
{
public:
	float                                        UpdateRate;                                        // 0x298(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValRoyaleFogVolume>    Fog;                                               // 0x29C(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58ED[0x4];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValClosestFogPointActor* GetDefaultObj();

	void OnFogUpdated(float Distance, float Radius);
	void OnFogStarted();
	void OnCellDestroyed(class UAkAudioEvent* SoundToPlay, struct CoreUObject_Vector& Location);
	void FogUpdatedCallback();
};

// 0xF0 (0x388 - 0x298)
// Class Valhalla.ValDungeonPortal
class AValDungeonPortal : public AActor
{
public:
	uint8                                        Pad_58FC[0x10];                                    // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnDungeonPortalActivated;                          // 0x2A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDungeonPortalStateChanged;                       // 0x2B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDungeonPortalDestroyed;                          // 0x2C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnInteractableTeamsChanged;                        // 0x2D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USceneComponent*                       SceneComponent;                                    // 0x2E8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                      InteractCollisionComp;                             // 0x2F0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EDungeonPortalState               R_State;                                           // 0x2F8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58FD[0x7];                                     // Fixing Size After Last Property  
	TArray<int32>                                R_InteractableTeams;                               // 0x300(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                PlayersToRevealTo;                                 // 0x310(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	int32                                        NumUses;                                           // 0x320(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAutoActivate;                                     // 0x324(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bBossPortal;                                       // 0x325(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EOnActivationReturnState          BehaviorAfterActivation;                           // 0x326(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_58FF[0x1];                                     // Fixing Size After Last Property  
	float                                        TimeSpentInActiveState;                            // 0x328(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5900[0x4];                                     // Fixing Size After Last Property  
	struct Engine_TimerHandle                    BehaviorAfterActivationTimer;                      // 0x330(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                  InteractText;                                      // 0x338(0x18)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                        InteractChannelTime;                               // 0x350(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5901[0x4];                                     // Fixing Size After Last Property  
	class AValCharacter*                         R_CachedChanneler;                                 // 0x358(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5902[0x18];                                    // Fixing Size After Last Property  
	TArray<class AValCharacter*>                 CharactersThatCanInteract;                         // 0x378(0x10)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValDungeonPortal* GetDefaultObj();

	void UpdateState(enum class EDungeonPortalState Value);
	void SetState(enum class EDungeonPortalState NewState);
	void SetCachedChanneler(class AValCharacter* Initiator);
	void PortalUsedByPlayer();
	void OnRep_State();
	void OnRep_InteractableTeams();
	void OnRep_CachedChanneler();
	void OnPortalBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct Engine_HitResult& SweepResult);
	void OnPlayerStoppedUsing();
	void OnPlayerStartedUsing();
	void OnHoverStart(class AValCharacter* Initiator);
	void OnHoverEnd(class AValCharacter* Initiator);
	void OnEndBestInteractable(class AValCharacter* Initiator);
	void OnBecomeBestInteractable(class AValCharacter* Initiator);
	void Interact(class AValCharacter* Initiator);
	void GetPlayersToRevealTo(TArray<int32>* Players);
	enum class EInteractType GetInteractType();
	class FText GetInteractText();
	class UPrimitiveComponent* GetInteractComponent();
	void GetInteractableTeams(TArray<int32>* TeamsThatCanInteract);
	class UShapeComponent* GetCollisionComp();
	float GetChannelTime(class AValCharacter* Initiator);
	class AValCharacter* GetCachedChanneler();
	enum class EInteractionFailureType GetBlockInteractReason(class AValCharacter* Initiator);
	bool CanInteract(class AValCharacter* Initiator);
	void AttemptPortalCharacter(class AValCharacter* Character);
};

// 0xE0 (0x110 - 0x30)
// Class Valhalla.ValEnvDamageData
class UValEnvDamageData : public UDataAsset
{
public:
	TMap<class FName, TSoftObjectPtr<class UMaterialInterface>> MaterialsToSwap;                                   // 0x30(0x50)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         AkEvent;                                           // 0x80(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDelayAkEventUntilAllLoaded;                       // 0x88(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5904[0x3];                                     // Fixing Size After Last Property  
	float                                        LightComponentIntensity;                           // 0x8C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDelayLightChangeUntilAllLoaded;                   // 0x90(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5905[0x7];                                     // Fixing Size After Last Property  
	TSoftObjectPtr<class UNiagaraSystem>         VFX;                                               // 0x98(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_Vector                    FXRelativeOffset;                                  // 0xC0(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct CoreUObject_Rotator                   FXRelativeRotationOffset;                          // 0xD8(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct CoreUObject_Vector                    FXWorldOffset;                                     // 0xF0(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseBoundsCenterForFXOffset;                       // 0x108(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsAffectedByLightPanel;                           // 0x109(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        MinDamageToTrigger;                                // 0x10A(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5906[0x5];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class UValEnvDamageData* GetDefaultObj();

};

// 0x300 (0x598 - 0x298)
// Class Valhalla.ValEnvironmentDamageManager
class AValEnvironmentDamageManager : public AActor
{
public:
	struct Valhalla_DamageCompArray              R_DamagedComponents;                               // 0x298(0x120)(Net, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<struct GameplayTags_GameplayTag, class UValEnvDamageData*> EnvDamageDataConfig;                               // 0x3B8(0x50)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                         bEnvironmentalDamagedEnabled;                      // 0x408(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_590D[0x7];                                     // Fixing Size After Last Property  
	TMap<class UActorComponent*, uint8>          CachedLocalComponentDamage;                        // 0x410(0x50)(Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<class UActorComponent*, struct Valhalla_DestroyedComponentData> CachedLocalEnvDestructionData;                     // 0x460(0x50)(Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_590E[0xE8];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValEnvironmentDamageManager* GetDefaultObj();

	void OnProjectileHitComponent(class APawn* ProjectileInstigator, class UActorComponent* Comp);
	void OnLightPanelShutdown(const struct CoreUObject_Vector& PanelLocation, float EffectRadius);
	void OnLightPanelOvercharge(const struct CoreUObject_Vector& PanelLocation, float EffectRadius);
	void DamageComponent(class UActorComponent* Comp, uint8 Amount, bool* bDestroyedEnvironmentObject);
};

// 0x28 (0x2C0 - 0x298)
// Class Valhalla.ValForceField
class AValForceField : public AActor
{
public:
	FMulticastInlineDelegateProperty_            OnActiveDel;                                       // 0x298(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                  Mesh;                                              // 0x2A8(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBoxComponent*                         CollisionComp;                                     // 0x2B0(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         R_bActive;                                         // 0x2B8(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ESecurityLevel                    SecurityLevel;                                     // 0x2B9(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5913[0x6];                                     // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValForceField* GetDefaultObj();

	void SetForceFieldActive(bool Value);
	void OnRep_Active();
	enum class ESecurityLevel GetSecurityLevel();
	struct CoreUObject_Rotator GetPassThroughRotation();
	class UStaticMeshComponent* GetMesh();
	bool GetForceFieldActive();
	class UBoxComponent* GetCollisionComp();
	bool DoesPlayerHaveSecurityLevelAccess(class AValCharacter* Player);
};

// 0x70 (0x308 - 0x298)
// Class Valhalla.ValObjectiveTerminal
class AValObjectiveTerminal : public AActor
{
public:
	uint8                                        Pad_5919[0x8];                                     // Fixing Size After Last Property  
	class USphereComponent*                      InteractCollisionComp;                             // 0x2A0(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ChannelTime;                                       // 0x2A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_591A[0x4];                                     // Fixing Size After Last Property  
	class FText                                  InteractText;                                      // 0x2B0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_591B[0x18];                                    // Fixing Size After Last Property  
	TWeakObjectPtr<class AValCharacter>          CachedChanneler;                                   // 0x2E0(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                R_InteractablePlayers;                             // 0x2E8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, RepNotify, Protected, NativeAccessSpecifierProtected)
	enum class ESecurityLevel                    R_SecurityLevel;                                   // 0x2F8(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_591D[0x7];                                     // Fixing Size After Last Property  
	class AValSwarmBeacon*                       LocalSwarmBeacon;                                  // 0x300(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValObjectiveTerminal* GetDefaultObj();

	void SetSecurityLevel(enum class ESecurityLevel SecurityLevel);
	void SetLocalSwarmBeacon(class AValSwarmBeacon* SwarmBeacon);
	void OnSecurityLevelUpdated();
	void OnRep_SecurityLevel();
	void OnRep_InteractablePlayers();
	void OnInteractablePlayersUpdated();
	enum class ESecurityLevel GetSecurityLevel();
	class AValSwarmBeacon* GetLocalSwarmBeacon();
	void GetInteractablePlayers(TArray<int32>* OutPlayers);
};

// 0xA8 (0x340 - 0x298)
// Class Valhalla.ValPing
class AValPing : public AActor
{
public:
	uint8                                        Pad_5927[0x8];                                     // Fixing Size After Last Property  
	enum class EValPingType                      R_Type;                                            // 0x2A0(0x1)(Edit, BlueprintVisible, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5928[0x7];                                     // Fixing Size After Last Property  
	class AValPlayerState*                       R_OwnerState;                                      // 0x2A8(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                 R_ReferencedActor;                                 // 0x2B0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERarity                           R_Rarity;                                          // 0x2B8(0x1)(Edit, BlueprintVisible, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bWasPlacedByLocal;                                 // 0x2B9(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5929[0x2];                                     // Fixing Size After Last Property  
	float                                        BigModeAngle;                                      // 0x2BC(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTypeChanged;                                     // 0x2C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFocusChanged;                                    // 0x2D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPingHide;                                        // 0x2E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnClaimedDibs;                                     // 0x2F0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnConfirmed;                                       // 0x300(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_592A[0x1];                                     // Fixing Size After Last Property  
	bool                                         bIsPreview;                                        // 0x311(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsHidden;                                         // 0x312(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_592B[0x5];                                     // Fixing Size After Last Property  
	class AValCharacter*                         R_Dibber;                                          // 0x318(0x8)(Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AValCharacter*>                 R_ConfirmedPlayers;                                // 0x320(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_592C[0x10];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValPing* GetDefaultObj();

	void SetPingRarity(enum class ERarity ItemRarity);
	void OnRep_Dibber();
	void OnRep_ConfirmedPlayers();
	void OnPlaced(bool bPlacedByLocal);
	void OnPingConfirmed();
	void OnOwnerDiedTimerEnded();
	void OnOwnerDied(bool bDead);
	void OnDibsCalled();
	void LootCrateDestroyCallback(class AValLootCrate* Crate);
	bool IsPingWithinAngle(float CheckAngle);
	bool IsDibsable();
	bool IsConfirmable();
	bool IsCancelable();
	bool GetIsBigMode();
	bool CanPlayerDibs(class AActor* Player);
	bool CanPlayerConfirm(class AActor* Player);
	bool CanPlayerCancel(class AActor* Player);
};

// 0xE8 (0x380 - 0x298)
// Class Valhalla.ValSwarmBeacon
class AValSwarmBeacon : public AActor
{
public:
	uint8                                        Pad_5931[0x8];                                     // Fixing Size After Last Property  
	FMulticastInlineDelegateProperty_            OnUsedStateUpdated;                                // 0x2A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCurrentWaveChangedDel;                           // 0x2B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFinishedDel;                                     // 0x2C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UValBotWaveConfig*>             SpawnWaves;                                        // 0x2D0(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                         bTreatNullBotDataAsValid;                          // 0x2E0(0x1)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5932[0x3];                                     // Fixing Size After Last Property  
	float                                        ChannelTimeInSec;                                  // 0x2E4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                  InteractText;                                      // 0x2E8(0x18)(Edit, Protected, NativeAccessSpecifierProtected)
	class USphereComponent*                      InteractCollisionComp;                             // 0x300(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        BeaconResetTime;                                   // 0x308(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5933[0x4];                                     // Fixing Size After Last Property  
	struct Engine_TimerHandle                    ResetTimerHandle;                                  // 0x310(0x8)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValUtopiaConstructor*                 OwningConstructor;                                 // 0x318(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct CoreUObject_Transform>         SpawnLocations;                                    // 0x320(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	bool                                         R_bUsed;                                           // 0x330(0x1)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5934[0x3];                                     // Fixing Size After Last Property  
	int32                                        R_CurrentWave;                                     // 0x334(0x4)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AValCharacter>          CachedChanneler;                                   // 0x338(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AValCharacter>>  Participants;                                      // 0x340(0x10)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AValCharacter>>  WaveBots;                                          // 0x350(0x10)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                        Pad_5935[0x20];                                    // Fixing Size Of Struct 

	static class UClass* StaticClass();
	static class AValSwarmBeacon* GetDefaultObj();

	void UpdateForceFieldState(bool Active);
	void TriggerSwarm();
	void SetUsed(bool Value);
	void SetOwningConstructor(class AValUtopiaConstructor* InConstructor);
	void SetCurrentWave(int32 Value);
	void RemoveParticipant(class AValCharacter* InParticipant);
	void RegisterSpawnLocation(struct CoreUObject_Transform& InSpawnLocation);
	void OnWavePreSpawnTimerExpired();
	void OnWavePostSpawnTimerExpired();
	void OnResetTimerEnd();
	void OnRep_Used();
	void OnRep_CurrentWave();
	void OnParticipantDied(float TimeToRespawn, class AValCharacter* PCharacter);
	void OnBotSpawned(class UBotInitData* BotData);
	void OnBotDied(float TimeToRespawn, class AValCharacter* PCharacter);
	int32 GetWaveCount();
	class AValUtopiaConstructor* GetOwningConstructor();
	int32 GetCurrentWave();
	void EndEarly(bool bReset);
	void AddParticipant(class AValCharacter* InParticipant);
};

// 0xE8 (0x3E0 - 0x2F8)
// Class Valhalla.ValUtopiaConstructor
class AValUtopiaConstructor : public AValWorldMeshComposer
{
public:
	uint8                                        Pad_593E[0x8];                                     // Fixing Size After Last Property  
	TArray<class AValAkRoom*>                    AkRooms;                                           // 0x300(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                         bIsOddRoom;                                        // 0x310(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_593F[0x3];                                     // Fixing Size After Last Property  
	int32                                        NativeSeed;                                        // 0x314(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<enum class EValConstructorAkPortalSpawnType, TSubclassOf<class AActor>> AkPortalActorClasses;                              // 0x318(0x50)(Edit, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                        Pad_5940[0x18];                                    // Fixing Size After Last Property  
	TArray<class UObject*>                       SpawnedAkObjects;                                  // 0x380(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UValAkRoomStaticHelper*>        StaticRoomChildren;                                // 0x390(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class AValBotSpawner*>                Spawners;                                          // 0x3A0(0x10)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                        OcclusionLevel;                                    // 0x3B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5941[0x4];                                     // Fixing Size After Last Property  
	TArray<struct Valhalla_OccludableComponent>  OccludableChildren;                                // 0x3B8(0x10)(Edit, BlueprintVisible, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	int32                                        OcclusionIndex;                                    // 0x3C8(0x4)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        OcclusionRate;                                     // 0x3CC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AkRoomCornerOffset;                                // 0x3D0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bManualAkRoomOverride;                             // 0x3D4(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUtilizeManualAkRoomsForEpicFeatures;              // 0x3D5(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5942[0x2];                                     // Fixing Size After Last Property  
	class UValSecurityLevel*                     SecurityLevel;                                     // 0x3D8(0x8)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AValUtopiaConstructor* GetDefaultObj();

	void SpawnAkPortals();
	void SetSecurityLevel(class UValSecurityLevel* NewSecurityLevel);
	void SetOccluded(uint8 NewOcclusionLevel, int32 NewOcclusionRate);
	void SetNativeSeed(int32 NewSeed);
	void SetIsOddRoom(bool bNewIsOddRoom);
	void OnDungeonGenerated();
	void OcclusionChanged(uint8 NewOcclusionLevel);
	class USceneComponent* GetStartingMeshComponent();
	void GetSpawners(TArray<class AValBotSpawner*>* InSpawners);
	void GetDoors(TArray<class AActor*>* Doors);
	class UStaticMeshComponent* GetCellProxyComponent();
	enum class EBuildingType GetBuildingType();
	bool GetBotWaveConfig(struct Valhalla_ValBotWaveSet* OutConfig);
	void GetBotTransformMap(TMap<struct GameplayTags_GameplayTag, struct Valhalla_BotTransformData>* Transforms);
	int32 GetBotRespawnTimer();
	bool GetAlarmWaveConfig(struct Valhalla_ValBotWaveSet* OutConfig);
	bool GetAlarmBotSetConfig(struct GameplayTags_GameplayTag& BotType, struct Valhalla_ValBotWaveSet* OutConfig);
	void GenerationCompleted();
	int32 GenerateWallBitmask(bool Top, bool Bottom, bool Left, bool Right);
	void GenerateAudioRooms(TArray<struct Valhalla_ValUtopiaConstructorCellData>& Cells, float CellSize, float GlobalHeightOffset, TArray<float>& Heights, int32 ColumnCount, int32 RowCount, int32 GenerationSeed, bool bShowCollisionBox);
	bool DoOcclusionWork(int32 NumPerFrame, uint8 StartOcclusionLevel);
	void CacheOccludableChildren();
	void AddAkObjectRecord(class AActor* Actor);
};

// 0x10 (0x4A0 - 0x490)
// Class Valhalla.ValGameMode_Vendor
class AValGameMode_Vendor : public ARHGameModeBase
{
public:
	TArray<TSubclassOf<class UValVendorRuleset>> VendorRulesets;                                    // 0x490(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AValGameMode_Vendor* GetDefaultObj();

};

}


